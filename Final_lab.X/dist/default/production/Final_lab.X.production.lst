

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue May 10 09:16:12 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1
   114                           	psect	text96,global,reloc=2,class=CODE,delta=1
   115                           	psect	text97,global,reloc=2,class=CODE,delta=1
   116                           	psect	text98,global,reloc=2,class=CODE,delta=1
   117                           	psect	text99,global,reloc=2,class=CODE,delta=1
   118                           	psect	text100,global,reloc=2,class=CODE,delta=1
   119                           	psect	text101,global,reloc=2,class=CODE,delta=1
   120                           	psect	text102,global,reloc=2,class=CODE,delta=1
   121                           	psect	text103,global,reloc=2,class=CODE,delta=1
   122                           	psect	text104,global,reloc=2,class=CODE,delta=1
   123                           	psect	text105,global,reloc=2,class=CODE,delta=1
   124                           	psect	text106,global,reloc=2,class=CODE,delta=1
   125                           	psect	text107,global,reloc=2,class=CODE,delta=1
   126                           	psect	text108,global,reloc=2,class=CODE,delta=1
   127                           	psect	text109,global,reloc=2,class=CODE,delta=1
   128                           	psect	text110,global,reloc=2,class=CODE,delta=1
   129                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   130                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   137                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   138  0000                     
   139                           	psect	idataCOMRAM
   140  003C2E                     __pidataCOMRAM:
   141                           	opt stack 0
   142                           
   143                           ;initializer for _heater_set_temp
   144  003C2E  4B                 	db	75
   145                           
   146                           	psect	idataBANK0
   147  0031EC                     __pidataBANK0:
   148                           	opt stack 0
   149                           
   150                           ;initializer for _tempSecond
   151  0031EC  FF                 	db	255
   152                           
   153                           ;initializer for _wrap
   154  0031ED  01                 	db	1
   155                           
   156                           ;initializer for _alarm_time
   157  0031EE  30                 	db	48
   158  0031EF  30                 	db	48
   159  0031F0  3A                 	db	58
   160  0031F1  30                 	db	48
   161  0031F2  30                 	db	48
   162  0031F3  3A                 	db	58
   163  0031F4  30                 	db	48
   164  0031F5  30                 	db	48
   165  0031F6  00                 	db	0
   166                           
   167                           ;initializer for _date
   168  0031F7  30                 	db	48
   169  0031F8  30                 	db	48
   170  0031F9  2F                 	db	47
   171  0031FA  30                 	db	48
   172  0031FB  30                 	db	48
   173  0031FC  2F                 	db	47
   174  0031FD  30                 	db	48
   175  0031FE  30                 	db	48
   176  0031FF  00                 	db	0
   177                           
   178                           ;initializer for _setup_alarm_time
   179  003200  30                 	db	48
   180  003201  30                 	db	48
   181  003202  3A                 	db	58
   182  003203  30                 	db	48
   183  003204  30                 	db	48
   184  003205  3A                 	db	58
   185  003206  30                 	db	48
   186  003207  30                 	db	48
   187  003208  00                 	db	0
   188                           
   189                           ;initializer for _setup_date
   190  003209  30                 	db	48
   191  00320A  31                 	db	49
   192  00320B  2F                 	db	47
   193  00320C  30                 	db	48
   194  00320D  31                 	db	49
   195  00320E  2F                 	db	47
   196  00320F  30                 	db	48
   197  003210  30                 	db	48
   198  003211  00                 	db	0
   199                           
   200                           ;initializer for _setup_time
   201  003212  30                 	db	48
   202  003213  30                 	db	48
   203  003214  3A                 	db	58
   204  003215  30                 	db	48
   205  003216  30                 	db	48
   206  003217  3A                 	db	58
   207  003218  30                 	db	48
   208  003219  30                 	db	48
   209  00321A  00                 	db	0
   210                           
   211                           ;initializer for _Volt_Txt
   212  00321B  30                 	db	48
   213  00321C  2E                 	db	46
   214  00321D  30                 	db	48
   215  00321E  30                 	db	48
   216  00321F  56                 	db	86
   217  003220  00                 	db	0
   218                           
   219                           ;initializer for _Heater_Set_Temp_Txt
   220  003221  30                 	db	48
   221  003222  37                 	db	55
   222  003223  35                 	db	53
   223  003224  46                 	db	70
   224  003225  00                 	db	0
   225                           
   226                           ;initializer for _RPM_Txt
   227  003226  30                 	db	48
   228  003227  30                 	db	48
   229  003228  30                 	db	48
   230  003229  30                 	db	48
   231  00322A  00                 	db	0
   232                           
   233                           ;initializer for _setup_heater_set_text
   234  00322B  30                 	db	48
   235  00322C  37                 	db	55
   236  00322D  35                 	db	53
   237  00322E  46                 	db	70
   238  00322F  00                 	db	0
   239                           
   240                           ;initializer for _Alarm_SW_Txt
   241  003230  4F                 	db	79
   242  003231  46                 	db	70
   243  003232  46                 	db	70
   244  003233  00                 	db	0
   245                           
   246                           ;initializer for _DC_Txt
   247  003234  30                 	db	48
   248  003235  30                 	db	48
   249  003236  30                 	db	48
   250  003237  00                 	db	0
   251                           
   252                           ;initializer for _Heater_SW_Txt
   253  003238  4F                 	db	79
   254  003239  46                 	db	70
   255  00323A  46                 	db	70
   256  00323B  00                 	db	0
   257                           
   258                           ;initializer for _tempC
   259  00323C  2B                 	db	43
   260  00323D  32                 	db	50
   261  00323E  35                 	db	53
   262  00323F  00                 	db	0
   263                           
   264                           ;initializer for _tempF
   265  003240  2B                 	db	43
   266  003241  37                 	db	55
   267  003242  37                 	db	55
   268  003243  00                 	db	0
   269                           
   270                           ;initializer for _RTC_ALARM_Txt
   271  003244  30                 	db	48
   272  003245  00                 	db	0
   273                           
   274                           	psect	idataBANK1
   275  00365A                     __pidataBANK1:
   276                           	opt stack 0
   277                           
   278                           ;initializer for _buffer
   279  00365A  20                 	db	32
   280  00365B  45                 	db	69
   281  00365C  43                 	db	67
   282  00365D  45                 	db	69
   283  00365E  33                 	db	51
   284  00365F  33                 	db	51
   285  003660  30                 	db	48
   286  003661  31                 	db	49
   287  003662  4C                 	db	76
   288  003663  20                 	db	32
   289  003664  53                 	db	83
   290  003665  70                 	db	112
   291  003666  27                 	db	39
   292  003667  32                 	db	50
   293  003668  32                 	db	50
   294  003669  20                 	db	32
   295  00366A  53                 	db	83
   296  00366B  34                 	db	52
   297  00366C  20                 	db	32
   298  00366D  00                 	db	0
   299  00366E  00                 	db	0
   300  00366F  00                 	db	0
   301  003670  00                 	db	0
   302  003671  00                 	db	0
   303  003672  00                 	db	0
   304  003673  00                 	db	0
   305  003674  00                 	db	0
   306  003675  00                 	db	0
   307  003676  00                 	db	0
   308  003677  00                 	db	0
   309  003678  00                 	db	0
   310                           
   311                           ;initializer for _array1
   312  003679  A2                 	db	162
   313  00367A  62                 	db	98
   314  00367B  E2                 	db	226
   315  00367C  22                 	db	34
   316  00367D  02                 	db	2
   317  00367E  C2                 	db	194
   318  00367F  E0                 	db	224
   319  003680  A8                 	db	168
   320  003681  90                 	db	144
   321  003682  68                 	db	104
   322  003683  98                 	db	152
   323  003684  B0                 	db	176
   324  003685  30                 	db	48
   325  003686  18                 	db	24
   326  003687  7A                 	db	122
   327  003688  10                 	db	16
   328  003689  38                 	db	56
   329  00368A  5A                 	db	90
   330  00368B  42                 	db	66
   331  00368C  4A                 	db	74
   332  00368D  52                 	db	82
   333                           
   334                           ;initializer for _time
   335  00368E  30                 	db	48
   336  00368F  30                 	db	48
   337  003690  3A                 	db	58
   338  003691  30                 	db	48
   339  003692  30                 	db	48
   340  003693  3A                 	db	58
   341  003694  30                 	db	48
   342  003695  30                 	db	48
   343  003696  00                 	db	0
   344                           
   345                           	psect	mediumconst
   346  00FC96                     __pmediumconst:
   347                           	opt stack 0
   348  00FC96  00                 	db	0
   349  00FC97                     _font:
   350                           	opt stack 0
   351  00FC97  00                 	db	0
   352  00FC98  00                 	db	0
   353  00FC99  00                 	db	0
   354  00FC9A  00                 	db	0
   355  00FC9B  00                 	db	0
   356  00FC9C  00                 	db	0
   357  00FC9D  00                 	db	0
   358  00FC9E  5F                 	db	95
   359  00FC9F  00                 	db	0
   360  00FCA0  00                 	db	0
   361  00FCA1  00                 	db	0
   362  00FCA2  07                 	db	7
   363  00FCA3  00                 	db	0
   364  00FCA4  07                 	db	7
   365  00FCA5  00                 	db	0
   366  00FCA6  14                 	db	20
   367  00FCA7  7F                 	db	127
   368  00FCA8  14                 	db	20
   369  00FCA9  7F                 	db	127
   370  00FCAA  14                 	db	20
   371  00FCAB  24                 	db	36
   372  00FCAC  2A                 	db	42
   373  00FCAD  7F                 	db	127
   374  00FCAE  2A                 	db	42
   375  00FCAF  12                 	db	18
   376  00FCB0  23                 	db	35
   377  00FCB1  13                 	db	19
   378  00FCB2  08                 	db	8
   379  00FCB3  64                 	db	100
   380  00FCB4  62                 	db	98
   381  00FCB5  36                 	db	54
   382  00FCB6  49                 	db	73
   383  00FCB7  56                 	db	86
   384  00FCB8  20                 	db	32
   385  00FCB9  50                 	db	80
   386  00FCBA  00                 	db	0
   387  00FCBB  08                 	db	8
   388  00FCBC  07                 	db	7
   389  00FCBD  03                 	db	3
   390  00FCBE  00                 	db	0
   391  00FCBF  00                 	db	0
   392  00FCC0  1C                 	db	28
   393  00FCC1  22                 	db	34
   394  00FCC2  41                 	db	65
   395  00FCC3  00                 	db	0
   396  00FCC4  00                 	db	0
   397  00FCC5  41                 	db	65
   398  00FCC6  22                 	db	34
   399  00FCC7  1C                 	db	28
   400  00FCC8  00                 	db	0
   401  00FCC9  2A                 	db	42
   402  00FCCA  1C                 	db	28
   403  00FCCB  7F                 	db	127
   404  00FCCC  1C                 	db	28
   405  00FCCD  2A                 	db	42
   406  00FCCE  08                 	db	8
   407  00FCCF  08                 	db	8
   408  00FCD0  3E                 	db	62
   409  00FCD1  08                 	db	8
   410  00FCD2  08                 	db	8
   411  00FCD3  00                 	db	0
   412  00FCD4  80                 	db	128
   413  00FCD5  70                 	db	112
   414  00FCD6  30                 	db	48
   415  00FCD7  00                 	db	0
   416  00FCD8  08                 	db	8
   417  00FCD9  08                 	db	8
   418  00FCDA  08                 	db	8
   419  00FCDB  08                 	db	8
   420  00FCDC  08                 	db	8
   421  00FCDD  00                 	db	0
   422  00FCDE  00                 	db	0
   423  00FCDF  60                 	db	96
   424  00FCE0  60                 	db	96
   425  00FCE1  00                 	db	0
   426  00FCE2  20                 	db	32
   427  00FCE3  10                 	db	16
   428  00FCE4  08                 	db	8
   429  00FCE5  04                 	db	4
   430  00FCE6  02                 	db	2
   431  00FCE7  3E                 	db	62
   432  00FCE8  51                 	db	81
   433  00FCE9  49                 	db	73
   434  00FCEA  45                 	db	69
   435  00FCEB  3E                 	db	62
   436  00FCEC  00                 	db	0
   437  00FCED  42                 	db	66
   438  00FCEE  7F                 	db	127
   439  00FCEF  40                 	db	64
   440  00FCF0  00                 	db	0
   441  00FCF1  72                 	db	114
   442  00FCF2  49                 	db	73
   443  00FCF3  49                 	db	73
   444  00FCF4  49                 	db	73
   445  00FCF5  46                 	db	70
   446  00FCF6  21                 	db	33
   447  00FCF7  41                 	db	65
   448  00FCF8  49                 	db	73
   449  00FCF9  4D                 	db	77
   450  00FCFA  33                 	db	51
   451  00FCFB  18                 	db	24
   452  00FCFC  14                 	db	20
   453  00FCFD  12                 	db	18
   454  00FCFE  7F                 	db	127
   455  00FCFF  10                 	db	16
   456  00FD00  27                 	db	39
   457  00FD01  45                 	db	69
   458  00FD02  45                 	db	69
   459  00FD03  45                 	db	69
   460  00FD04  39                 	db	57
   461  00FD05  3C                 	db	60
   462  00FD06  4A                 	db	74
   463  00FD07  49                 	db	73
   464  00FD08  49                 	db	73
   465  00FD09  31                 	db	49
   466  00FD0A  41                 	db	65
   467  00FD0B  21                 	db	33
   468  00FD0C  11                 	db	17
   469  00FD0D  09                 	db	9
   470  00FD0E  07                 	db	7
   471  00FD0F  36                 	db	54
   472  00FD10  49                 	db	73
   473  00FD11  49                 	db	73
   474  00FD12  49                 	db	73
   475  00FD13  36                 	db	54
   476  00FD14  46                 	db	70
   477  00FD15  49                 	db	73
   478  00FD16  49                 	db	73
   479  00FD17  29                 	db	41
   480  00FD18  1E                 	db	30
   481  00FD19  00                 	db	0
   482  00FD1A  00                 	db	0
   483  00FD1B  14                 	db	20
   484  00FD1C  00                 	db	0
   485  00FD1D  00                 	db	0
   486  00FD1E  00                 	db	0
   487  00FD1F  40                 	db	64
   488  00FD20  34                 	db	52
   489  00FD21  00                 	db	0
   490  00FD22  00                 	db	0
   491  00FD23  00                 	db	0
   492  00FD24  08                 	db	8
   493  00FD25  14                 	db	20
   494  00FD26  22                 	db	34
   495  00FD27  41                 	db	65
   496  00FD28  14                 	db	20
   497  00FD29  14                 	db	20
   498  00FD2A  14                 	db	20
   499  00FD2B  14                 	db	20
   500  00FD2C  14                 	db	20
   501  00FD2D  00                 	db	0
   502  00FD2E  41                 	db	65
   503  00FD2F  22                 	db	34
   504  00FD30  14                 	db	20
   505  00FD31  08                 	db	8
   506  00FD32  02                 	db	2
   507  00FD33  01                 	db	1
   508  00FD34  59                 	db	89
   509  00FD35  09                 	db	9
   510  00FD36  06                 	db	6
   511  00FD37  3E                 	db	62
   512  00FD38  41                 	db	65
   513  00FD39  5D                 	db	93
   514  00FD3A  59                 	db	89
   515  00FD3B  4E                 	db	78
   516  00FD3C  7C                 	db	124
   517  00FD3D  12                 	db	18
   518  00FD3E  11                 	db	17
   519  00FD3F  12                 	db	18
   520  00FD40  7C                 	db	124
   521  00FD41  7F                 	db	127
   522  00FD42  49                 	db	73
   523  00FD43  49                 	db	73
   524  00FD44  49                 	db	73
   525  00FD45  36                 	db	54
   526  00FD46  3E                 	db	62
   527  00FD47  41                 	db	65
   528  00FD48  41                 	db	65
   529  00FD49  41                 	db	65
   530  00FD4A  22                 	db	34
   531  00FD4B  7F                 	db	127
   532  00FD4C  41                 	db	65
   533  00FD4D  41                 	db	65
   534  00FD4E  41                 	db	65
   535  00FD4F  3E                 	db	62
   536  00FD50  7F                 	db	127
   537  00FD51  49                 	db	73
   538  00FD52  49                 	db	73
   539  00FD53  49                 	db	73
   540  00FD54  41                 	db	65
   541  00FD55  7F                 	db	127
   542  00FD56  09                 	db	9
   543  00FD57  09                 	db	9
   544  00FD58  09                 	db	9
   545  00FD59  01                 	db	1
   546  00FD5A  3E                 	db	62
   547  00FD5B  41                 	db	65
   548  00FD5C  41                 	db	65
   549  00FD5D  51                 	db	81
   550  00FD5E  73                 	db	115
   551  00FD5F  7F                 	db	127
   552  00FD60  08                 	db	8
   553  00FD61  08                 	db	8
   554  00FD62  08                 	db	8
   555  00FD63  7F                 	db	127
   556  00FD64  00                 	db	0
   557  00FD65  41                 	db	65
   558  00FD66  7F                 	db	127
   559  00FD67  41                 	db	65
   560  00FD68  00                 	db	0
   561  00FD69  20                 	db	32
   562  00FD6A  40                 	db	64
   563  00FD6B  41                 	db	65
   564  00FD6C  3F                 	db	63
   565  00FD6D  01                 	db	1
   566  00FD6E  7F                 	db	127
   567  00FD6F  08                 	db	8
   568  00FD70  14                 	db	20
   569  00FD71  22                 	db	34
   570  00FD72  41                 	db	65
   571  00FD73  7F                 	db	127
   572  00FD74  40                 	db	64
   573  00FD75  40                 	db	64
   574  00FD76  40                 	db	64
   575  00FD77  40                 	db	64
   576  00FD78  7F                 	db	127
   577  00FD79  02                 	db	2
   578  00FD7A  1C                 	db	28
   579  00FD7B  02                 	db	2
   580  00FD7C  7F                 	db	127
   581  00FD7D  7F                 	db	127
   582  00FD7E  04                 	db	4
   583  00FD7F  08                 	db	8
   584  00FD80  10                 	db	16
   585  00FD81  7F                 	db	127
   586  00FD82  3E                 	db	62
   587  00FD83  41                 	db	65
   588  00FD84  41                 	db	65
   589  00FD85  41                 	db	65
   590  00FD86  3E                 	db	62
   591  00FD87  7F                 	db	127
   592  00FD88  09                 	db	9
   593  00FD89  09                 	db	9
   594  00FD8A  09                 	db	9
   595  00FD8B  06                 	db	6
   596  00FD8C  3E                 	db	62
   597  00FD8D  41                 	db	65
   598  00FD8E  51                 	db	81
   599  00FD8F  21                 	db	33
   600  00FD90  5E                 	db	94
   601  00FD91  7F                 	db	127
   602  00FD92  09                 	db	9
   603  00FD93  19                 	db	25
   604  00FD94  29                 	db	41
   605  00FD95  46                 	db	70
   606  00FD96                     __end_of_font:
   607                           	opt stack 0
   608  00FD96                     _font2:
   609                           	opt stack 0
   610  00FD96  26                 	db	38
   611  00FD97  49                 	db	73
   612  00FD98  49                 	db	73
   613  00FD99  49                 	db	73
   614  00FD9A  32                 	db	50
   615  00FD9B  03                 	db	3
   616  00FD9C  01                 	db	1
   617  00FD9D  7F                 	db	127
   618  00FD9E  01                 	db	1
   619  00FD9F  03                 	db	3
   620  00FDA0  3F                 	db	63
   621  00FDA1  40                 	db	64
   622  00FDA2  40                 	db	64
   623  00FDA3  40                 	db	64
   624  00FDA4  3F                 	db	63
   625  00FDA5  1F                 	db	31
   626  00FDA6  20                 	db	32
   627  00FDA7  40                 	db	64
   628  00FDA8  20                 	db	32
   629  00FDA9  1F                 	db	31
   630  00FDAA  3F                 	db	63
   631  00FDAB  40                 	db	64
   632  00FDAC  38                 	db	56
   633  00FDAD  40                 	db	64
   634  00FDAE  3F                 	db	63
   635  00FDAF  63                 	db	99
   636  00FDB0  14                 	db	20
   637  00FDB1  08                 	db	8
   638  00FDB2  14                 	db	20
   639  00FDB3  63                 	db	99
   640  00FDB4  03                 	db	3
   641  00FDB5  04                 	db	4
   642  00FDB6  78                 	db	120
   643  00FDB7  04                 	db	4
   644  00FDB8  03                 	db	3
   645  00FDB9  61                 	db	97
   646  00FDBA  59                 	db	89
   647  00FDBB  49                 	db	73
   648  00FDBC  4D                 	db	77
   649  00FDBD  43                 	db	67
   650  00FDBE  00                 	db	0
   651  00FDBF  7F                 	db	127
   652  00FDC0  41                 	db	65
   653  00FDC1  41                 	db	65
   654  00FDC2  41                 	db	65
   655  00FDC3  02                 	db	2
   656  00FDC4  04                 	db	4
   657  00FDC5  08                 	db	8
   658  00FDC6  10                 	db	16
   659  00FDC7  20                 	db	32
   660  00FDC8  00                 	db	0
   661  00FDC9  41                 	db	65
   662  00FDCA  41                 	db	65
   663  00FDCB  41                 	db	65
   664  00FDCC  7F                 	db	127
   665  00FDCD  04                 	db	4
   666  00FDCE  02                 	db	2
   667  00FDCF  01                 	db	1
   668  00FDD0  02                 	db	2
   669  00FDD1  04                 	db	4
   670  00FDD2  40                 	db	64
   671  00FDD3  40                 	db	64
   672  00FDD4  40                 	db	64
   673  00FDD5  40                 	db	64
   674  00FDD6  40                 	db	64
   675  00FDD7  00                 	db	0
   676  00FDD8  03                 	db	3
   677  00FDD9  07                 	db	7
   678  00FDDA  08                 	db	8
   679  00FDDB  00                 	db	0
   680  00FDDC  20                 	db	32
   681  00FDDD  54                 	db	84
   682  00FDDE  54                 	db	84
   683  00FDDF  78                 	db	120
   684  00FDE0  40                 	db	64
   685  00FDE1  7F                 	db	127
   686  00FDE2  28                 	db	40
   687  00FDE3  44                 	db	68
   688  00FDE4  44                 	db	68
   689  00FDE5  38                 	db	56
   690  00FDE6  38                 	db	56
   691  00FDE7  44                 	db	68
   692  00FDE8  44                 	db	68
   693  00FDE9  44                 	db	68
   694  00FDEA  28                 	db	40
   695  00FDEB  38                 	db	56
   696  00FDEC  44                 	db	68
   697  00FDED  44                 	db	68
   698  00FDEE  28                 	db	40
   699  00FDEF  7F                 	db	127
   700  00FDF0  38                 	db	56
   701  00FDF1  54                 	db	84
   702  00FDF2  54                 	db	84
   703  00FDF3  54                 	db	84
   704  00FDF4  18                 	db	24
   705  00FDF5  00                 	db	0
   706  00FDF6  08                 	db	8
   707  00FDF7  7E                 	db	126
   708  00FDF8  09                 	db	9
   709  00FDF9  02                 	db	2
   710  00FDFA  18                 	db	24
   711  00FDFB  A4                 	db	164
   712  00FDFC  A4                 	db	164
   713  00FDFD  9C                 	db	156
   714  00FDFE  78                 	db	120
   715  00FDFF  7F                 	db	127
   716  00FE00  08                 	db	8
   717  00FE01  04                 	db	4
   718  00FE02  04                 	db	4
   719  00FE03  78                 	db	120
   720  00FE04  00                 	db	0
   721  00FE05  44                 	db	68
   722  00FE06  7D                 	db	125
   723  00FE07  40                 	db	64
   724  00FE08  00                 	db	0
   725  00FE09  20                 	db	32
   726  00FE0A  40                 	db	64
   727  00FE0B  40                 	db	64
   728  00FE0C  3D                 	db	61
   729  00FE0D  00                 	db	0
   730  00FE0E  7F                 	db	127
   731  00FE0F  10                 	db	16
   732  00FE10  28                 	db	40
   733  00FE11  44                 	db	68
   734  00FE12  00                 	db	0
   735  00FE13  00                 	db	0
   736  00FE14  41                 	db	65
   737  00FE15  7F                 	db	127
   738  00FE16  40                 	db	64
   739  00FE17  00                 	db	0
   740  00FE18  7C                 	db	124
   741  00FE19  04                 	db	4
   742  00FE1A  78                 	db	120
   743  00FE1B  04                 	db	4
   744  00FE1C  78                 	db	120
   745  00FE1D  7C                 	db	124
   746  00FE1E  08                 	db	8
   747  00FE1F  04                 	db	4
   748  00FE20  04                 	db	4
   749  00FE21  78                 	db	120
   750  00FE22  38                 	db	56
   751  00FE23  44                 	db	68
   752  00FE24  44                 	db	68
   753  00FE25  44                 	db	68
   754  00FE26  38                 	db	56
   755  00FE27  FC                 	db	252
   756  00FE28  18                 	db	24
   757  00FE29  24                 	db	36
   758  00FE2A  24                 	db	36
   759  00FE2B  18                 	db	24
   760  00FE2C  18                 	db	24
   761  00FE2D  24                 	db	36
   762  00FE2E  24                 	db	36
   763  00FE2F  18                 	db	24
   764  00FE30  FC                 	db	252
   765  00FE31  7C                 	db	124
   766  00FE32  08                 	db	8
   767  00FE33  04                 	db	4
   768  00FE34  04                 	db	4
   769  00FE35  08                 	db	8
   770  00FE36  48                 	db	72
   771  00FE37  54                 	db	84
   772  00FE38  54                 	db	84
   773  00FE39  54                 	db	84
   774  00FE3A  24                 	db	36
   775  00FE3B  04                 	db	4
   776  00FE3C  04                 	db	4
   777  00FE3D  3F                 	db	63
   778  00FE3E  44                 	db	68
   779  00FE3F  24                 	db	36
   780  00FE40  3C                 	db	60
   781  00FE41  40                 	db	64
   782  00FE42  40                 	db	64
   783  00FE43  20                 	db	32
   784  00FE44  7C                 	db	124
   785  00FE45  1C                 	db	28
   786  00FE46  20                 	db	32
   787  00FE47  40                 	db	64
   788  00FE48  20                 	db	32
   789  00FE49  1C                 	db	28
   790  00FE4A  3C                 	db	60
   791  00FE4B  40                 	db	64
   792  00FE4C  30                 	db	48
   793  00FE4D  40                 	db	64
   794  00FE4E  3C                 	db	60
   795  00FE4F  44                 	db	68
   796  00FE50  28                 	db	40
   797  00FE51  10                 	db	16
   798  00FE52  28                 	db	40
   799  00FE53  44                 	db	68
   800  00FE54  4C                 	db	76
   801  00FE55  90                 	db	144
   802  00FE56  90                 	db	144
   803  00FE57  90                 	db	144
   804  00FE58  7C                 	db	124
   805  00FE59  44                 	db	68
   806  00FE5A  64                 	db	100
   807  00FE5B  54                 	db	84
   808  00FE5C  4C                 	db	76
   809  00FE5D  44                 	db	68
   810  00FE5E  00                 	db	0
   811  00FE5F  08                 	db	8
   812  00FE60  36                 	db	54
   813  00FE61  41                 	db	65
   814  00FE62  00                 	db	0
   815  00FE63  00                 	db	0
   816  00FE64  00                 	db	0
   817  00FE65  77                 	db	119
   818  00FE66  00                 	db	0
   819  00FE67  00                 	db	0
   820  00FE68  00                 	db	0
   821  00FE69  41                 	db	65
   822  00FE6A  36                 	db	54
   823  00FE6B  08                 	db	8
   824  00FE6C  00                 	db	0
   825  00FE6D  02                 	db	2
   826  00FE6E  01                 	db	1
   827  00FE6F  02                 	db	2
   828  00FE70  04                 	db	4
   829  00FE71  02                 	db	2
   830  00FE72                     __end_of_font2:
   831                           	opt stack 0
   832  00FE72                     _dpowers:
   833                           	opt stack 0
   834  00FE72  0001               	dw	1
   835  00FE74  000A               	dw	10
   836  00FE76  0064               	dw	100
   837  00FE78  03E8               	dw	1000
   838  00FE7A  2710               	dw	10000
   839  00FE7C                     __end_of_dpowers:
   840                           	opt stack 0
   841  00FE7C                     _hexpowers:
   842                           	opt stack 0
   843  00FE7C  0001               	dw	1
   844  00FE7E  0010               	dw	16
   845  00FE80  0100               	dw	256
   846  00FE82  1000               	dw	4096
   847  00FE84                     __end_of_hexpowers:
   848                           	opt stack 0
   849  0000                     _ADCON0	set	4034
   850  0000                     _ADCON0bits	set	4034
   851  0000                     _ADCON1	set	4033
   852  0000                     _ADCON2	set	4032
   853  0000                     _ADRESH	set	4036
   854  0000                     _ADRESL	set	4035
   855  0000                     _CCP1CON	set	4029
   856  0000                     _CCP2CON	set	4026
   857  0000                     _CCPR1L	set	4030
   858  0000                     _CCPR2L	set	4027
   859  0000                     _INTCON2bits	set	4081
   860  0000                     _INTCON3bits	set	4080
   861  0000                     _INTCONbits	set	4082
   862  0000                     _OSCCON	set	4051
   863  0000                     _PIE1bits	set	3997
   864  0000                     _PIR1bits	set	3998
   865  0000                     _PORTAbits	set	3968
   866  0000                     _PORTBbits	set	3969
   867  0000                     _PORTCbits	set	3970
   868  0000                     _PORTDbits	set	3971
   869  0000                     _PORTE	set	3972
   870  0000                     _PR2	set	4043
   871  0000                     _RCSTA	set	4011
   872  0000                     _RCSTAbits	set	4011
   873  0000                     _SPBRG	set	4015
   874  0000                     _SPBRGH	set	4016
   875  0000                     _SSPBUF	set	4041
   876  0000                     _SSPCON1	set	4038
   877  0000                     _SSPSTAT	set	4039
   878  0000                     _SSPSTATbits	set	4039
   879  0000                     _T0CON	set	4053
   880  0000                     _T0CONbits	set	4053
   881  0000                     _T1CON	set	4045
   882  0000                     _T1CONbits	set	4045
   883  0000                     _T2CON	set	4042
   884  0000                     _T3CON	set	4017
   885  0000                     _TMR0H	set	4055
   886  0000                     _TMR0L	set	4054
   887  0000                     _TMR1H	set	4047
   888  0000                     _TMR1L	set	4046
   889  0000                     _TMR3L	set	4018
   890  0000                     _TRISA	set	3986
   891  0000                     _TRISB	set	3987
   892  0000                     _TRISC	set	3988
   893  0000                     _TRISCbits	set	3988
   894  0000                     _TRISD	set	3989
   895  0000                     _TRISE	set	3990
   896  0000                     _TXREG	set	4013
   897  0000                     _TXSTA	set	4012
   898  0000                     _TXSTAbits	set	4012
   899  0000                     _RBPU	set	32655
   900  0000                     _TRMT	set	32097
   901  00FE84                     STR_4:
   902                           
   903                           ; BSR set to: 0
   904  00FE84  25                 	db	37
   905  00FE85  30                 	db	48	;'0'
   906  00FE86  32                 	db	50	;'2'
   907  00FE87  78                 	db	120	;'x'
   908  00FE88  3A                 	db	58	;':'
   909  00FE89  25                 	db	37
   910  00FE8A  30                 	db	48	;'0'
   911  00FE8B  32                 	db	50	;'2'
   912  00FE8C  78                 	db	120	;'x'
   913  00FE8D  3A                 	db	58	;':'
   914  00FE8E  25                 	db	37
   915  00FE8F  30                 	db	48	;'0'
   916  00FE90  32                 	db	50	;'2'
   917  00FE91  78                 	db	120	;'x'
   918  00FE92  20                 	db	32
   919  00FE93  25                 	db	37
   920  00FE94  30                 	db	48	;'0'
   921  00FE95  32                 	db	50	;'2'
   922  00FE96  78                 	db	120	;'x'
   923  00FE97  2F                 	db	47
   924  00FE98  25                 	db	37
   925  00FE99  30                 	db	48	;'0'
   926  00FE9A  32                 	db	50	;'2'
   927  00FE9B  78                 	db	120	;'x'
   928  00FE9C  2F                 	db	47
   929  00FE9D  25                 	db	37
   930  00FE9E  30                 	db	48	;'0'
   931  00FE9F  32                 	db	50	;'2'
   932  00FEA0  78                 	db	120	;'x'
   933  00FEA1  00                 	db	0
   934  00FEA2                     STR_6:
   935                           
   936                           ; BSR set to: 0
   937  00FEA2  61                 	db	97	;'a'
   938  00FEA3  6C                 	db	108	;'l'
   939  00FEA4  61                 	db	97	;'a'
   940  00FEA5  72                 	db	114	;'r'
   941  00FEA6  6D                 	db	109	;'m'
   942  00FEA7  20                 	db	32
   943  00FEA8  3D                 	db	61	;'='
   944  00FEA9  20                 	db	32
   945  00FEAA  25                 	db	37
   946  00FEAB  64                 	db	100	;'d'
   947  00FEAC  20                 	db	32
   948  00FEAD  48                 	db	72	;'H'
   949  00FEAE  65                 	db	101	;'e'
   950  00FEAF  61                 	db	97	;'a'
   951  00FEB0  74                 	db	116	;'t'
   952  00FEB1  65                 	db	101	;'e'
   953  00FEB2  72                 	db	114	;'r'
   954  00FEB3  20                 	db	32
   955  00FEB4  3D                 	db	61	;'='
   956  00FEB5  20                 	db	32
   957  00FEB6  25                 	db	37
   958  00FEB7  64                 	db	100	;'d'
   959  00FEB8  20                 	db	32
   960  00FEB9  00                 	db	0
   961  00FEBA                     STR_39:
   962                           
   963                           ; BSR set to: 0
   964  00FEBA  43                 	db	67	;'C'
   965  00FEBB  61                 	db	97	;'a'
   966  00FEBC  6E                 	db	110	;'n'
   967  00FEBD  6E                 	db	110	;'n'
   968  00FEBE  6F                 	db	111	;'o'
   969  00FEBF  74                 	db	116	;'t'
   970  00FEC0  20                 	db	32
   971  00FEC1  66                 	db	102	;'f'
   972  00FEC2  69                 	db	105	;'i'
   973  00FEC3  6E                 	db	110	;'n'
   974  00FEC4  64                 	db	100	;'d'
   975  00FEC5  20                 	db	32
   976  00FEC6  62                 	db	98	;'b'
   977  00FEC7  75                 	db	117	;'u'
   978  00FEC8  74                 	db	116	;'t'
   979  00FEC9  74                 	db	116	;'t'
   980  00FECA  6F                 	db	111	;'o'
   981  00FECB  6E                 	db	110	;'n'
   982  00FECC  20                 	db	32
   983  00FECD  0D                 	db	13
   984  00FECE  0A                 	db	10
   985  00FECF  00                 	db	0
   986  00FED0                     STR_5:
   987                           
   988                           ; BSR set to: 0
   989  00FED0  20                 	db	32
   990  00FED1  54                 	db	84	;'T'
   991  00FED2  65                 	db	101	;'e'
   992  00FED3  6D                 	db	109	;'m'
   993  00FED4  70                 	db	112	;'p'
   994  00FED5  20                 	db	32
   995  00FED6  3D                 	db	61	;'='
   996  00FED7  20                 	db	32
   997  00FED8  25                 	db	37
   998  00FED9  64                 	db	100	;'d'
   999  00FEDA  20                 	db	32
  1000  00FEDB  43                 	db	67	;'C'
  1001  00FEDC  20                 	db	32
  1002  00FEDD  3D                 	db	61	;'='
  1003  00FEDE  20                 	db	32
  1004  00FEDF  25                 	db	37
  1005  00FEE0  64                 	db	100	;'d'
  1006  00FEE1  20                 	db	32
  1007  00FEE2  46                 	db	70	;'F'
  1008  00FEE3  20                 	db	32
  1009  00FEE4  00                 	db	0
  1010  00FEE5                     STR_8:
  1011                           
  1012                           ; BSR set to: 0
  1013  00FEE5  20                 	db	32
  1014  00FEE6  45                 	db	69	;'E'
  1015  00FEE7  43                 	db	67	;'C'
  1016  00FEE8  45                 	db	69	;'E'
  1017  00FEE9  33                 	db	51	;'3'
  1018  00FEEA  33                 	db	51	;'3'
  1019  00FEEB  30                 	db	48	;'0'
  1020  00FEEC  31                 	db	49	;'1'
  1021  00FEED  4C                 	db	76	;'L'
  1022  00FEEE  20                 	db	32
  1023  00FEEF  53                 	db	83	;'S'
  1024  00FEF0  70                 	db	112	;'p'
  1025  00FEF1  27                 	db	39
  1026  00FEF2  32                 	db	50	;'2'
  1027  00FEF3  32                 	db	50	;'2'
  1028  00FEF4  20                 	db	32
  1029  00FEF5  53                 	db	83	;'S'
  1030  00FEF6  78                 	db	120	;'x'
  1031  00FEF7  00                 	db	0
  1032  00FEF8  00                 	db	0
  1033  00FEF9                     STR_7:
  1034                           
  1035                           ; BSR set to: 0
  1036  00FEF9  52                 	db	82	;'R'
  1037  00FEFA  50                 	db	80	;'P'
  1038  00FEFB  4D                 	db	77	;'M'
  1039  00FEFC  20                 	db	32
  1040  00FEFD  3D                 	db	61	;'='
  1041  00FEFE  20                 	db	32
  1042  00FEFF  25                 	db	37
  1043  00FF00  64                 	db	100	;'d'
  1044  00FF01  20                 	db	32
  1045  00FF02  20                 	db	32
  1046  00FF03  64                 	db	100	;'d'
  1047  00FF04  63                 	db	99	;'c'
  1048  00FF05  20                 	db	32
  1049  00FF06  3D                 	db	61	;'='
  1050  00FF07  20                 	db	32
  1051  00FF08  25                 	db	37
  1052  00FF09  64                 	db	100	;'d'
  1053  00FF0A  0D                 	db	13
  1054  00FF0B  0A                 	db	10
  1055  00FF0C  00                 	db	0
  1056  00FF0D                     STR_26:
  1057                           
  1058                           ; BSR set to: 0
  1059  00FF0D  45                 	db	69	;'E'
  1060  00FF0E  43                 	db	67	;'C'
  1061  00FF0F  45                 	db	69	;'E'
  1062  00FF10  33                 	db	51	;'3'
  1063  00FF11  33                 	db	51	;'3'
  1064  00FF12  30                 	db	48	;'0'
  1065  00FF13  31                 	db	49	;'1'
  1066  00FF14  4C                 	db	76	;'L'
  1067  00FF15  20                 	db	32
  1068  00FF16  53                 	db	83	;'S'
  1069  00FF17  70                 	db	112	;'p'
  1070  00FF18  27                 	db	39
  1071  00FF19  32                 	db	50	;'2'
  1072  00FF1A  32                 	db	50	;'2'
  1073  00FF1B  20                 	db	32
  1074  00FF1C  53                 	db	83	;'S'
  1075  00FF1D  78                 	db	120	;'x'
  1076  00FF1E  00                 	db	0
  1077  00FF1F                     STR_40:
  1078                           
  1079                           ; BSR set to: 0
  1080  00FF1F  30                 	db	48	;'0'
  1081  00FF20  31                 	db	49	;'1'
  1082  00FF21  32                 	db	50	;'2'
  1083  00FF22  33                 	db	51	;'3'
  1084  00FF23  34                 	db	52	;'4'
  1085  00FF24  35                 	db	53	;'5'
  1086  00FF25  36                 	db	54	;'6'
  1087  00FF26  37                 	db	55	;'7'
  1088  00FF27  38                 	db	56	;'8'
  1089  00FF28  39                 	db	57	;'9'
  1090  00FF29  61                 	db	97	;'a'
  1091  00FF2A  62                 	db	98	;'b'
  1092  00FF2B  63                 	db	99	;'c'
  1093  00FF2C  64                 	db	100	;'d'
  1094  00FF2D  65                 	db	101	;'e'
  1095  00FF2E  66                 	db	102	;'f'
  1096  00FF2F  00                 	db	0
  1097  00FF30                     STR_34:
  1098                           
  1099                           ; BSR set to: 0
  1100  00FF30  53                 	db	83	;'S'
  1101  00FF31  65                 	db	101	;'e'
  1102  00FF32  74                 	db	116	;'t'
  1103  00FF33  20                 	db	32
  1104  00FF34  48                 	db	72	;'H'
  1105  00FF35  65                 	db	101	;'e'
  1106  00FF36  61                 	db	97	;'a'
  1107  00FF37  74                 	db	116	;'t'
  1108  00FF38  65                 	db	101	;'e'
  1109  00FF39  72                 	db	114	;'r'
  1110  00FF3A  20                 	db	32
  1111  00FF3B  54                 	db	84	;'T'
  1112  00FF3C  65                 	db	101	;'e'
  1113  00FF3D  6D                 	db	109	;'m'
  1114  00FF3E  70                 	db	112	;'p'
  1115  00FF3F  00                 	db	0
  1116  00FF40                     STR_1:
  1117                           
  1118                           ; BSR set to: 0
  1119  00FF40  48                 	db	72	;'H'
  1120  00FF41  65                 	db	101	;'e'
  1121  00FF42  61                 	db	97	;'a'
  1122  00FF43  74                 	db	116	;'t'
  1123  00FF44  65                 	db	101	;'e'
  1124  00FF45  72                 	db	114	;'r'
  1125  00FF46  20                 	db	32
  1126  00FF47  54                 	db	84	;'T'
  1127  00FF48  6F                 	db	111	;'o'
  1128  00FF49  67                 	db	103	;'g'
  1129  00FF4A  67                 	db	103	;'g'
  1130  00FF4B  6C                 	db	108	;'l'
  1131  00FF4C  65                 	db	101	;'e'
  1132  00FF4D  64                 	db	100	;'d'
  1133  00FF4E  0A                 	db	10
  1134  00FF4F  00                 	db	0
  1135  00FF50                     STR_2:
  1136                           
  1137                           ; BSR set to: 0
  1138  00FF50  46                 	db	70	;'F'
  1139  00FF51  61                 	db	97	;'a'
  1140  00FF52  6E                 	db	110	;'n'
  1141  00FF53  20                 	db	32
  1142  00FF54  54                 	db	84	;'T'
  1143  00FF55  75                 	db	117	;'u'
  1144  00FF56  72                 	db	114	;'r'
  1145  00FF57  6E                 	db	110	;'n'
  1146  00FF58  65                 	db	101	;'e'
  1147  00FF59  64                 	db	100	;'d'
  1148  00FF5A  20                 	db	32
  1149  00FF5B  4F                 	db	79	;'O'
  1150  00FF5C  66                 	db	102	;'f'
  1151  00FF5D  66                 	db	102	;'f'
  1152  00FF5E  0A                 	db	10
  1153  00FF5F  00                 	db	0
  1154  00FF60                     STR_3:
  1155                           
  1156                           ; BSR set to: 0
  1157  00FF60  46                 	db	70	;'F'
  1158  00FF61  61                 	db	97	;'a'
  1159  00FF62  6E                 	db	110	;'n'
  1160  00FF63  20                 	db	32
  1161  00FF64  54                 	db	84	;'T'
  1162  00FF65  75                 	db	117	;'u'
  1163  00FF66  72                 	db	114	;'r'
  1164  00FF67  6E                 	db	110	;'n'
  1165  00FF68  65                 	db	101	;'e'
  1166  00FF69  64                 	db	100	;'d'
  1167  00FF6A  20                 	db	32
  1168  00FF6B  4F                 	db	79	;'O'
  1169  00FF6C  6E                 	db	110	;'n'
  1170  00FF6D  0A                 	db	10
  1171  00FF6E  00                 	db	0
  1172  00FF6F                     STR_9:
  1173                           
  1174                           ; BSR set to: 0
  1175  00FF6F  54                 	db	84	;'T'
  1176  00FF70  65                 	db	101	;'e'
  1177  00FF71  6D                 	db	109	;'m'
  1178  00FF72  70                 	db	112	;'p'
  1179  00FF73  65                 	db	101	;'e'
  1180  00FF74  72                 	db	114	;'r'
  1181  00FF75  61                 	db	97	;'a'
  1182  00FF76  74                 	db	116	;'t'
  1183  00FF77  75                 	db	117	;'u'
  1184  00FF78  72                 	db	114	;'r'
  1185  00FF79  65                 	db	101	;'e'
  1186  00FF7A  3A                 	db	58	;':'
  1187  00FF7B  00                 	db	0
  1188  00FF7C                     STR_16:
  1189                           
  1190                           ; BSR set to: 0
  1191  00FF7C  48                 	db	72	;'H'
  1192  00FF7D  54                 	db	84	;'T'
  1193  00FF7E  52                 	db	82	;'R'
  1194  00FF7F  20                 	db	32
  1195  00FF80  53                 	db	83	;'S'
  1196  00FF81  65                 	db	101	;'e'
  1197  00FF82  74                 	db	116	;'t'
  1198  00FF83  20                 	db	32
  1199  00FF84  54                 	db	84	;'T'
  1200  00FF85  65                 	db	101	;'e'
  1201  00FF86  6D                 	db	109	;'m'
  1202  00FF87  70                 	db	112	;'p'
  1203  00FF88  00                 	db	0
  1204  00FF89                     STR_36:
  1205                           
  1206                           ; BSR set to: 0
  1207  00FF89  54                 	db	84	;'T'
  1208  00FF8A  69                 	db	105	;'i'
  1209  00FF8B  6D                 	db	109	;'m'
  1210  00FF8C  65                 	db	101	;'e'
  1211  00FF8D  20                 	db	32
  1212  00FF8E  53                 	db	83	;'S'
  1213  00FF8F  65                 	db	101	;'e'
  1214  00FF90  74                 	db	116	;'t'
  1215  00FF91  75                 	db	117	;'u'
  1216  00FF92  70                 	db	112	;'p'
  1217  00FF93  00                 	db	0
  1218  00FF94  00                 	db	0
  1219  00FF95                     STR_32:
  1220                           
  1221                           ; BSR set to: 0
  1222  00FF95  20                 	db	32
  1223  00FF96  20                 	db	32
  1224  00FF97  48                 	db	72	;'H'
  1225  00FF98  65                 	db	101	;'e'
  1226  00FF99  61                 	db	97	;'a'
  1227  00FF9A  74                 	db	116	;'t'
  1228  00FF9B  65                 	db	101	;'e'
  1229  00FF9C  72                 	db	114	;'r'
  1230  00FF9D  00                 	db	0
  1231  00FF9E  20                 	db	32
  1232  00FF9F  00                 	db	0
  1233  00FFA0                     STR_30:
  1234                           
  1235                           ; BSR set to: 0
  1236  00FFA0  25                 	db	37
  1237  00FFA1  78                 	db	120	;'x'
  1238  00FFA2  3A                 	db	58	;':'
  1239  00FFA3  25                 	db	37
  1240  00FFA4  78                 	db	120	;'x'
  1241  00FFA5  3A                 	db	58	;':'
  1242  00FFA6  25                 	db	37
  1243  00FFA7  78                 	db	120	;'x'
  1244  00FFA8  0D                 	db	13
  1245  00FFA9  0A                 	db	10
  1246  00FFAA  00                 	db	0
  1247  00FFAB                     STR_14:
  1248                           
  1249                           ; BSR set to: 0
  1250  00FFAB  41                 	db	65	;'A'
  1251  00FFAC  6C                 	db	108	;'l'
  1252  00FFAD  61                 	db	97	;'a'
  1253  00FFAE  72                 	db	114	;'r'
  1254  00FFAF  6D                 	db	109	;'m'
  1255  00FFB0  20                 	db	32
  1256  00FFB1  54                 	db	84	;'T'
  1257  00FFB2  69                 	db	105	;'i'
  1258  00FFB3  6D                 	db	109	;'m'
  1259  00FFB4  65                 	db	101	;'e'
  1260  00FFB5  00                 	db	0
  1261  00FFB6                     STR_33:
  1262                           
  1263                           ; BSR set to: 0
  1264  00FFB6  20                 	db	32
  1265  00FFB7  20                 	db	32
  1266  00FFB8  53                 	db	83	;'S'
  1267  00FFB9  65                 	db	101	;'e'
  1268  00FFBA  74                 	db	116	;'t'
  1269  00FFBB  75                 	db	117	;'u'
  1270  00FFBC  70                 	db	112	;'p'
  1271  00FFBD  00                 	db	0
  1272  00FFBE  20                 	db	32
  1273  00FFBF  00                 	db	0
  1274  00FFC0                     STR_15:
  1275                           
  1276                           ; BSR set to: 0
  1277  00FFC0  41                 	db	65	;'A'
  1278  00FFC1  6C                 	db	108	;'l'
  1279  00FFC2  61                 	db	97	;'a'
  1280  00FFC3  72                 	db	114	;'r'
  1281  00FFC4  6D                 	db	109	;'m'
  1282  00FFC5  20                 	db	32
  1283  00FFC6  53                 	db	83	;'S'
  1284  00FFC7  57                 	db	87	;'W'
  1285  00FFC8  00                 	db	0
  1286  00FFC9                     STR_27:
  1287                           
  1288                           ; BSR set to: 0
  1289  00FFC9  20                 	db	32
  1290  00FFCA  20                 	db	32
  1291  00FFCB  41                 	db	65	;'A'
  1292  00FFCC  6C                 	db	108	;'l'
  1293  00FFCD  61                 	db	97	;'a'
  1294  00FFCE  72                 	db	114	;'r'
  1295  00FFCF  6D                 	db	109	;'m'
  1296  00FFD0  00                 	db	0
  1297  00FFD1                     STR_28:
  1298                           
  1299                           ; BSR set to: 0
  1300  00FFD1  20                 	db	32
  1301  00FFD2  20                 	db	32
  1302  00FFD3  53                 	db	83	;'S'
  1303  00FFD4  65                 	db	101	;'e'
  1304  00FFD5  74                 	db	116	;'t'
  1305  00FFD6  75                 	db	117	;'u'
  1306  00FFD7  70                 	db	112	;'p'
  1307  00FFD8  00                 	db	0
  1308  00FFD9                     STR_17:
  1309                           
  1310                           ; BSR set to: 0
  1311  00FFD9  48                 	db	72	;'H'
  1312  00FFDA  54                 	db	84	;'T'
  1313  00FFDB  52                 	db	82	;'R'
  1314  00FFDC  20                 	db	32
  1315  00FFDD  53                 	db	83	;'S'
  1316  00FFDE  57                 	db	87	;'W'
  1317  00FFDF  00                 	db	0
  1318  00FFE0                     STR_13:
  1319                           
  1320                           ; BSR set to: 0
  1321  00FFE0  44                 	db	68	;'D'
  1322  00FFE1  61                 	db	97	;'a'
  1323  00FFE2  74                 	db	116	;'t'
  1324  00FFE3  65                 	db	101	;'e'
  1325  00FFE4  00                 	db	0
  1326  00FFE5                     STR_20:
  1327                           
  1328                           ; BSR set to: 0
  1329  00FFE5  56                 	db	86	;'V'
  1330  00FFE6  6F                 	db	111	;'o'
  1331  00FFE7  6C                 	db	108	;'l'
  1332  00FFE8  74                 	db	116	;'t'
  1333  00FFE9  00                 	db	0
  1334  00FFEA                     STR_22:
  1335                           
  1336                           ; BSR set to: 0
  1337  00FFEA  4F                 	db	79	;'O'
  1338  00FFEB  4E                 	db	78	;'N'
  1339  00FFEC  20                 	db	32
  1340  00FFED  00                 	db	0
  1341  00FFEE                     STR_23:
  1342                           
  1343                           ; BSR set to: 0
  1344  00FFEE  4F                 	db	79	;'O'
  1345  00FFEF  46                 	db	70	;'F'
  1346  00FFF0  46                 	db	70	;'F'
  1347  00FFF1  00                 	db	0
  1348  00FFF2                     STR_21:
  1349                           
  1350                           ; BSR set to: 0
  1351  00FFF2  52                 	db	82	;'R'
  1352  00FFF3  50                 	db	80	;'P'
  1353  00FFF4  4D                 	db	77	;'M'
  1354  00FFF5  00                 	db	0
  1355  00FFF6                     STR_10:
  1356                           
  1357                           ; BSR set to: 0
  1358  00FFF6  43                 	db	67	;'C'
  1359  00FFF7  2F                 	db	47
  1360  00FFF8  00                 	db	0
  1361  00FFF9                     STR_18:
  1362                           
  1363                           ; BSR set to: 0
  1364  00FFF9  44                 	db	68	;'D'
  1365  00FFFA  43                 	db	67	;'C'
  1366  00FFFB  00                 	db	0
  1367  00FFFC                     STR_19:
  1368                           
  1369                           ; BSR set to: 0
  1370  00FFFC  52                 	db	82	;'R'
  1371  00FFFD  4D                 	db	77	;'M'
  1372  00FFFE  00                 	db	0
  1373  0000                     
  1374                           ; #config settings
  1375  00FFFF  00                 	db	0	; dummy byte at the end
  1376  0000                     
  1377                           	psect	cinit
  1378  002EA2                     __pcinit:
  1379                           	opt stack 0
  1380  002EA2                     start_initialization:
  1381                           	opt stack 0
  1382  002EA2                     __initialization:
  1383                           	opt stack 0
  1384                           
  1385                           ; Clear objects allocated to BANK0 (33 bytes)
  1386  002EA2  EE00  F0DA         	lfsr	0,__pbssBANK0
  1387  002EA6  0E21               	movlw	33
  1388  002EA8                     clear_0:
  1389  002EA8  6AEE               	clrf	postinc0,c
  1390  002EAA  06E8               	decf	wreg,f,c
  1391  002EAC  E1FD               	bnz	clear_0
  1392                           
  1393                           ; Clear objects allocated to COMRAM (36 bytes)
  1394  002EAE  EE00  F04A         	lfsr	0,__pbssCOMRAM
  1395  002EB2  0E24               	movlw	36
  1396  002EB4                     clear_1:
  1397  002EB4  6AEE               	clrf	postinc0,c
  1398  002EB6  06E8               	decf	wreg,f,c
  1399  002EB8  E1FD               	bnz	clear_1
  1400                           
  1401                           ; Initialize objects allocated to BANK1 (61 bytes)
  1402                           ; load TBLPTR registers with __pidataBANK1
  1403  002EBA  0E5A               	movlw	low __pidataBANK1
  1404  002EBC  6EF6               	movwf	tblptrl,c
  1405  002EBE  0E36               	movlw	high __pidataBANK1
  1406  002EC0  6EF7               	movwf	tblptrh,c
  1407  002EC2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1408  002EC4  6EF8               	movwf	tblptru,c
  1409  002EC6  EE01  F000         	lfsr	0,__pdataBANK1
  1410  002ECA  EE10 F03D          	lfsr	1,61
  1411  002ECE                     copy_data0:
  1412  002ECE  0009               	tblrd		*+
  1413  002ED0  CFF5 FFEE          	movff	tablat,postinc0
  1414  002ED4  50E5               	movf	postdec1,w,c
  1415  002ED6  50E1               	movf	fsr1l,w,c
  1416  002ED8  E1FA               	bnz	copy_data0
  1417                           
  1418                           ; Initialize objects allocated to BANK0 (90 bytes)
  1419                           ; load TBLPTR registers with __pidataBANK0
  1420  002EDA  0EEC               	movlw	low __pidataBANK0
  1421  002EDC  6EF6               	movwf	tblptrl,c
  1422  002EDE  0E31               	movlw	high __pidataBANK0
  1423  002EE0  6EF7               	movwf	tblptrh,c
  1424  002EE2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1425  002EE4  6EF8               	movwf	tblptru,c
  1426  002EE6  EE00  F080         	lfsr	0,__pdataBANK0
  1427  002EEA  EE10 F05A          	lfsr	1,90
  1428  002EEE                     copy_data1:
  1429  002EEE  0009               	tblrd		*+
  1430  002EF0  CFF5 FFEE          	movff	tablat,postinc0
  1431  002EF4  50E5               	movf	postdec1,w,c
  1432  002EF6  50E1               	movf	fsr1l,w,c
  1433  002EF8  E1FA               	bnz	copy_data1
  1434                           
  1435                           ; Initialize objects allocated to COMRAM (1 bytes)
  1436                           ; load TBLPTR registers with __pidataCOMRAM
  1437  002EFA  0E2E               	movlw	low __pidataCOMRAM
  1438  002EFC  6EF6               	movwf	tblptrl,c
  1439  002EFE  0E3C               	movlw	high __pidataCOMRAM
  1440  002F00  6EF7               	movwf	tblptrh,c
  1441  002F02  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1442  002F04  6EF8               	movwf	tblptru,c
  1443  002F06  0009               	tblrd		*+	;fetch initializer
  1444  002F08  CFF5 F06E          	movff	tablat,__pdataCOMRAM
  1445  002F0C                     end_of_initialization:
  1446                           	opt stack 0
  1447  002F0C                     __end_of__initialization:
  1448                           	opt stack 0
  1449  002F0C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1450  002F0E  6EF8               	movwf	tblptru,c
  1451  002F10  0100               	movlb	0
  1452  002F12  EF94  F006         	goto	_main	;jump to C main() function
  1453                           tblptru	equ	0xFF8
  1454                           tblptrh	equ	0xFF7
  1455                           tblptrl	equ	0xFF6
  1456                           tablat	equ	0xFF5
  1457                           postinc0	equ	0xFEE
  1458                           wreg	equ	0xFE8
  1459                           postdec1	equ	0xFE5
  1460                           fsr1l	equ	0xFE1
  1461                           
  1462                           	psect	bssCOMRAM
  1463  00004A                     __pbssCOMRAM:
  1464                           	opt stack 0
  1465  00004A                     _DS1621_tempC:
  1466                           	opt stack 0
  1467  00004A                     	ds	2
  1468  00004C                     _DS1621_tempF:
  1469                           	opt stack 0
  1470  00004C                     	ds	2
  1471  00004E                     _Time_Elapsed:
  1472                           	opt stack 0
  1473  00004E                     	ds	2
  1474  000050                     _rpm:
  1475                           	opt stack 0
  1476  000050                     	ds	2
  1477  000052                     _txt:
  1478                           	opt stack 0
  1479  000052                     	ds	2
  1480  000054                     _HEATER:
  1481                           	opt stack 0
  1482  000054                     	ds	1
  1483  000055                     _In_Heater_Temp_Setup:
  1484                           	opt stack 0
  1485  000055                     	ds	1
  1486  000056                     _Select_Alarm_Field:
  1487                           	opt stack 0
  1488  000056                     	ds	1
  1489  000057                     _Select_Field:
  1490                           	opt stack 0
  1491  000057                     	ds	1
  1492  000058                     __tft_type:
  1493                           	opt stack 0
  1494  000058                     	ds	1
  1495  000059                     _alarm_date:
  1496                           	opt stack 0
  1497  000059                     	ds	1
  1498  00005A                     _alarm_hour:
  1499                           	opt stack 0
  1500  00005A                     	ds	1
  1501  00005B                     _alarm_minute:
  1502                           	opt stack 0
  1503  00005B                     	ds	1
  1504  00005C                     _alarm_second:
  1505                           	opt stack 0
  1506  00005C                     	ds	1
  1507  00005D                     _day:
  1508                           	opt stack 0
  1509  00005D                     	ds	1
  1510  00005E                     _duty_cycle:
  1511                           	opt stack 0
  1512  00005E                     	ds	1
  1513  00005F                     _found:
  1514                           	opt stack 0
  1515  00005F                     	ds	1
  1516  000060                     _hour:
  1517                           	opt stack 0
  1518  000060                     	ds	1
  1519  000061                     _minute:
  1520                           	opt stack 0
  1521  000061                     	ds	1
  1522  000062                     _month:
  1523                           	opt stack 0
  1524  000062                     	ds	1
  1525  000063                     _second:
  1526                           	opt stack 0
  1527  000063                     	ds	1
  1528  000064                     _setup_alarm_hour:
  1529                           	opt stack 0
  1530  000064                     	ds	1
  1531  000065                     _setup_alarm_minute:
  1532                           	opt stack 0
  1533  000065                     	ds	1
  1534  000066                     _setup_alarm_second:
  1535                           	opt stack 0
  1536  000066                     	ds	1
  1537  000067                     _setup_day:
  1538                           	opt stack 0
  1539  000067                     	ds	1
  1540  000068                     _setup_hour:
  1541                           	opt stack 0
  1542  000068                     	ds	1
  1543  000069                     _setup_minute:
  1544                           	opt stack 0
  1545  000069                     	ds	1
  1546  00006A                     _setup_month:
  1547                           	opt stack 0
  1548  00006A                     	ds	1
  1549  00006B                     _setup_second:
  1550                           	opt stack 0
  1551  00006B                     	ds	1
  1552  00006C                     _setup_year:
  1553                           	opt stack 0
  1554  00006C                     	ds	1
  1555  00006D                     _year:
  1556                           	opt stack 0
  1557  00006D                     	ds	1
  1558                           tblptru	equ	0xFF8
  1559                           tblptrh	equ	0xFF7
  1560                           tblptrl	equ	0xFF6
  1561                           tablat	equ	0xFF5
  1562                           postinc0	equ	0xFEE
  1563                           wreg	equ	0xFE8
  1564                           postdec1	equ	0xFE5
  1565                           fsr1l	equ	0xFE1
  1566                           
  1567                           	psect	dataCOMRAM
  1568  00006E                     __pdataCOMRAM:
  1569                           	opt stack 0
  1570  00006E                     _heater_set_temp:
  1571                           	opt stack 0
  1572  00006E                     	ds	1
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           postinc0	equ	0xFEE
  1578                           wreg	equ	0xFE8
  1579                           postdec1	equ	0xFE5
  1580                           fsr1l	equ	0xFE1
  1581                           
  1582                           	psect	bssBANK0
  1583  0000DA                     __pbssBANK0:
  1584                           	opt stack 0
  1585  0000DA                     _Nec_code:
  1586                           	opt stack 0
  1587  0000DA                     	ds	4
  1588  0000DE                     _volt:
  1589                           	opt stack 0
  1590  0000DE                     	ds	3
  1591  0000E1                     _ALARMEN:
  1592                           	opt stack 0
  1593  0000E1                     	ds	2
  1594  0000E3                     _MATCHED:
  1595                           	opt stack 0
  1596  0000E3                     	ds	2
  1597  0000E5                     _alarm_mode:
  1598                           	opt stack 0
  1599  0000E5                     	ds	2
  1600  0000E7                     _color:
  1601                           	opt stack 0
  1602  0000E7                     	ds	2
  1603  0000E9                     _nbr:
  1604                           	opt stack 0
  1605  0000E9                     	ds	2
  1606  0000EB                     _nec_ok:
  1607                           	opt stack 0
  1608  0000EB                     	ds	2
  1609  0000ED                     _rps:
  1610                           	opt stack 0
  1611  0000ED                     	ds	2
  1612  0000EF                     _INT1_flag:
  1613                           	opt stack 0
  1614  0000EF                     	ds	1
  1615  0000F0                     _INT2_flag:
  1616                           	opt stack 0
  1617  0000F0                     	ds	1
  1618  0000F1                     _In_Alarm_Time_Setup:
  1619                           	opt stack 0
  1620  0000F1                     	ds	1
  1621  0000F2                     _In_Time_Setup:
  1622                           	opt stack 0
  1623  0000F2                     	ds	1
  1624  0000F3                     _Nec_code1:
  1625                           	opt stack 0
  1626  0000F3                     	ds	1
  1627  0000F4                     _Nec_state:
  1628                           	opt stack 0
  1629  0000F4                     	ds	1
  1630  0000F5                     _Select_Heater_Temp_Field:
  1631                           	opt stack 0
  1632  0000F5                     	ds	1
  1633  0000F6                     _bit_count:
  1634                           	opt stack 0
  1635  0000F6                     	ds	1
  1636  0000F7                     _colstart:
  1637                           	opt stack 0
  1638  0000F7                     	ds	1
  1639  0000F8                     _dow:
  1640                           	opt stack 0
  1641  0000F8                     	ds	1
  1642  0000F9                     _rowstart:
  1643                           	opt stack 0
  1644  0000F9                     	ds	1
  1645  0000FA                     _setup_heater_set_temp:
  1646                           	opt stack 0
  1647  0000FA                     	ds	1
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           postinc0	equ	0xFEE
  1653                           wreg	equ	0xFE8
  1654                           postdec1	equ	0xFE5
  1655                           fsr1l	equ	0xFE1
  1656                           
  1657                           	psect	dataBANK0
  1658  000080                     __pdataBANK0:
  1659                           	opt stack 0
  1660  000080                     _tempSecond:
  1661                           	opt stack 0
  1662  000080                     	ds	1
  1663  000081                     _wrap:
  1664                           	opt stack 0
  1665  000081                     	ds	1
  1666  000082                     _alarm_time:
  1667                           	opt stack 0
  1668  000082                     	ds	9
  1669  00008B                     _date:
  1670                           	opt stack 0
  1671  00008B                     	ds	9
  1672  000094                     _setup_alarm_time:
  1673                           	opt stack 0
  1674  000094                     	ds	9
  1675  00009D                     _setup_date:
  1676                           	opt stack 0
  1677  00009D                     	ds	9
  1678  0000A6                     _setup_time:
  1679                           	opt stack 0
  1680  0000A6                     	ds	9
  1681  0000AF                     _Volt_Txt:
  1682                           	opt stack 0
  1683  0000AF                     	ds	6
  1684  0000B5                     _Heater_Set_Temp_Txt:
  1685                           	opt stack 0
  1686  0000B5                     	ds	5
  1687  0000BA                     _RPM_Txt:
  1688                           	opt stack 0
  1689  0000BA                     	ds	5
  1690  0000BF                     _setup_heater_set_text:
  1691                           	opt stack 0
  1692  0000BF                     	ds	5
  1693  0000C4                     _Alarm_SW_Txt:
  1694                           	opt stack 0
  1695  0000C4                     	ds	4
  1696  0000C8                     _DC_Txt:
  1697                           	opt stack 0
  1698  0000C8                     	ds	4
  1699  0000CC                     _Heater_SW_Txt:
  1700                           	opt stack 0
  1701  0000CC                     	ds	4
  1702  0000D0                     _tempC:
  1703                           	opt stack 0
  1704  0000D0                     	ds	4
  1705  0000D4                     _tempF:
  1706                           	opt stack 0
  1707  0000D4                     	ds	4
  1708  0000D8                     _RTC_ALARM_Txt:
  1709                           	opt stack 0
  1710  0000D8                     	ds	2
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           postinc0	equ	0xFEE
  1716                           wreg	equ	0xFE8
  1717                           postdec1	equ	0xFE5
  1718                           fsr1l	equ	0xFE1
  1719                           
  1720                           	psect	dataBANK1
  1721  000100                     __pdataBANK1:
  1722                           	opt stack 0
  1723  000100                     _buffer:
  1724                           	opt stack 0
  1725  000100                     	ds	31
  1726  00011F                     _array1:
  1727                           	opt stack 0
  1728  00011F                     	ds	21
  1729  000134                     _time:
  1730                           	opt stack 0
  1731  000134                     	ds	9
  1732                           tblptru	equ	0xFF8
  1733                           tblptrh	equ	0xFF7
  1734                           tblptrl	equ	0xFF6
  1735                           tablat	equ	0xFF5
  1736                           postinc0	equ	0xFEE
  1737                           wreg	equ	0xFE8
  1738                           postdec1	equ	0xFE5
  1739                           fsr1l	equ	0xFE1
  1740                           
  1741                           	psect	cstackBANK1
  1742  00013D                     __pcstackBANK1:
  1743                           	opt stack 0
  1744  00013D                     ___awmod@counter:
  1745                           	opt stack 0
  1746  00013D                     read_volt@nStep:
  1747                           	opt stack 0
  1748  00013D                     do_update_pwm@dc_f:
  1749                           	opt stack 0
  1750                           
  1751                           ; 3 bytes @ 0x0
  1752  00013D                     	ds	1
  1753  00013E                     ___awmod@sign:
  1754                           	opt stack 0
  1755                           
  1756                           ; 1 bytes @ 0x1
  1757  00013E                     	ds	1
  1758  00013F                     ??_Update_Screen:
  1759  00013F                     ?_dec_2_bcd:
  1760                           	opt stack 0
  1761  00013F                     read_volt@volt:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x2
  1765  00013F                     	ds	1
  1766  000140                     do_update_pwm@duty_cycle:
  1767                           	opt stack 0
  1768                           
  1769                           ; 1 bytes @ 0x3
  1770  000140                     	ds	1
  1771  000141                     ??_dec_2_bcd:
  1772  000141                     Update_Screen@neg_tempF:
  1773                           	opt stack 0
  1774  000141                     do_update_pwm@dc_I:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0x4
  1778  000141                     	ds	2
  1779  000143                     Update_Screen@neg_DS1621_tempC:
  1780                           	opt stack 0
  1781  000143                     get_RPM@RPS:
  1782                           	opt stack 0
  1783  000143                     dec_2_bcd@bcd:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x6
  1787  000143                     	ds	2
  1788  000145                     dec_2_bcd@dec:
  1789                           	opt stack 0
  1790                           
  1791                           ; 1 bytes @ 0x8
  1792  000145                     	ds	1
  1793  000146                     DS3231_Write_Time@Device:
  1794                           	opt stack 0
  1795  000146                     DS3231_Write_Alarm_Time@Device:
  1796                           	opt stack 0
  1797                           
  1798                           ; 1 bytes @ 0x9
  1799  000146                     	ds	1
  1800  000147                     DS3231_Write_Time@Address:
  1801                           	opt stack 0
  1802  000147                     DS3231_Write_Alarm_Time@Address:
  1803                           	opt stack 0
  1804                           
  1805                           ; 1 bytes @ 0xA
  1806  000147                     	ds	1
  1807  000148                     ??_main:
  1808                           
  1809                           ; 0 bytes @ 0xB
  1810  000148                     	ds	2
  1811                           tblptru	equ	0xFF8
  1812                           tblptrh	equ	0xFF7
  1813                           tblptrl	equ	0xFF6
  1814                           tablat	equ	0xFF5
  1815                           postinc0	equ	0xFEE
  1816                           wreg	equ	0xFE8
  1817                           postdec1	equ	0xFE5
  1818                           fsr1l	equ	0xFE1
  1819                           
  1820                           	psect	cstackBANK0
  1821  0000FB                     __pcstackBANK0:
  1822                           	opt stack 0
  1823  0000FB                     ??_do_update_pwm:
  1824  0000FB                     ?___awmod:
  1825                           	opt stack 0
  1826  0000FB                     ?_read_volt:
  1827                           	opt stack 0
  1828  0000FB                     Update_Setup_Heater_Screen@dc_char1:
  1829                           	opt stack 0
  1830  0000FB                     ___awmod@dividend:
  1831                           	opt stack 0
  1832                           
  1833                           ; 2 bytes @ 0x0
  1834  0000FB                     	ds	1
  1835  0000FC                     Update_Setup_Heater_Screen@dc_char2:
  1836                           	opt stack 0
  1837                           
  1838                           ; 1 bytes @ 0x1
  1839  0000FC                     	ds	1
  1840  0000FD                     Update_Setup_Heater_Screen@dc_char3:
  1841                           	opt stack 0
  1842  0000FD                     ___awmod@divisor:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0x2
  1846  0000FD                     	ds	1
  1847  0000FE                     ?_get_RPM:
  1848                           	opt stack 0
  1849                           
  1850                           ; 2 bytes @ 0x3
  1851  0000FE                     	ds	2
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           fsr1l	equ	0xFE1
  1860                           
  1861                           	psect	cstackCOMRAM
  1862  000001                     __pcstackCOMRAM:
  1863                           	opt stack 0
  1864  000001                     ??_INT0_isr:
  1865  000001                     
  1866                           ; 2 bytes @ 0x0
  1867  000001                     	ds	2
  1868  000003                     ??_chkisr:
  1869                           
  1870                           ; 0 bytes @ 0x2
  1871  000003                     	ds	14
  1872  000011                     ??_bcd_2_dec:
  1873  000011                     ??_isdigit:
  1874  000011                     ?_get_full_ADC:
  1875                           	opt stack 0
  1876  000011                     ?_strlen:
  1877                           	opt stack 0
  1878  000011                     ?_get_duty_cycle:
  1879                           	opt stack 0
  1880  000011                     ?___wmul:
  1881                           	opt stack 0
  1882  000011                     ?___lwdiv:
  1883                           	opt stack 0
  1884  000011                     ?___ftpack:
  1885                           	opt stack 0
  1886  000011                     putch@c:
  1887                           	opt stack 0
  1888  000011                     I2C_Read@ack:
  1889                           	opt stack 0
  1890  000011                     I2C_Write@outByte:
  1891                           	opt stack 0
  1892  000011                     Set_RGB_Color@color:
  1893                           	opt stack 0
  1894  000011                     spiwrite@x:
  1895                           	opt stack 0
  1896  000011                     get_duty_cycle@temp:
  1897                           	opt stack 0
  1898  000011                     OpenUSART@spbrg:
  1899                           	opt stack 0
  1900  000011                     ___wmul@multiplier:
  1901                           	opt stack 0
  1902  000011                     ___lwdiv@dividend:
  1903                           	opt stack 0
  1904  000011                     strcpy@to:
  1905                           	opt stack 0
  1906  000011                     strlen@s:
  1907                           	opt stack 0
  1908  000011                     ___ftpack@arg:
  1909                           	opt stack 0
  1910  000011                     ___ftge@ff1:
  1911                           	opt stack 0
  1912  000011                     I2C_Init@c:
  1913                           	opt stack 0
  1914                           
  1915                           ; 4 bytes @ 0x10
  1916  000011                     	ds	1
  1917  000012                     I2C_Read@n:
  1918                           	opt stack 0
  1919  000012                     I2C_Write@n:
  1920                           	opt stack 0
  1921  000012                     spiwrite@spidata:
  1922                           	opt stack 0
  1923  000012                     _isdigit$2860:
  1924                           	opt stack 0
  1925                           
  1926                           ; 1 bytes @ 0x11
  1927  000012                     	ds	1
  1928  000013                     ??_get_full_ADC:
  1929  000013                     ??_strlen:
  1930  000013                     I2C_Read@inByte:
  1931                           	opt stack 0
  1932  000013                     I2C_Write_Address_Write_One_Byte@Address:
  1933                           	opt stack 0
  1934  000013                     I2C_Write_Cmd_Only@Cmd:
  1935                           	opt stack 0
  1936  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1937                           	opt stack 0
  1938  000013                     write_command@cmd_:
  1939                           	opt stack 0
  1940  000013                     write_data@data_:
  1941                           	opt stack 0
  1942  000013                     OpenUSART@config:
  1943                           	opt stack 0
  1944  000013                     isdigit@c:
  1945                           	opt stack 0
  1946  000013                     get_duty_cycle@set_temp:
  1947                           	opt stack 0
  1948  000013                     bcd_2_dec@dec:
  1949                           	opt stack 0
  1950  000013                     ___wmul@multiplicand:
  1951                           	opt stack 0
  1952  000013                     ___lwdiv@divisor:
  1953                           	opt stack 0
  1954  000013                     strcpy@from:
  1955                           	opt stack 0
  1956                           
  1957                           ; 2 bytes @ 0x12
  1958  000013                     	ds	1
  1959  000014                     ?_DS1621_Read_Temp:
  1960                           	opt stack 0
  1961  000014                     DS3231_Read_Time@Address:
  1962                           	opt stack 0
  1963  000014                     DS3231_Read_Alarm_Time@Address:
  1964                           	opt stack 0
  1965  000014                     I2C_Write_Address_Read_One_Byte@Address:
  1966                           	opt stack 0
  1967  000014                     I2C_Write_Address_Write_One_Byte@Data_Out:
  1968                           	opt stack 0
  1969  000014                     I2C_Write_Cmd_Only@Device:
  1970                           	opt stack 0
  1971  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1972                           	opt stack 0
  1973  000014                     setAddrWindow@y0:
  1974                           	opt stack 0
  1975  000014                     ___ftpack@exp:
  1976                           	opt stack 0
  1977  000014                     ___ftge@ff2:
  1978                           	opt stack 0
  1979                           
  1980                           ; 3 bytes @ 0x13
  1981  000014                     	ds	1
  1982  000015                     ??_get_duty_cycle:
  1983  000015                     DS3231_Read_Time@Device:
  1984                           	opt stack 0
  1985  000015                     DS3231_Read_Alarm_Time@Device:
  1986                           	opt stack 0
  1987  000015                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  1988                           	opt stack 0
  1989  000015                     I2C_Write_Address_Write_One_Byte@Device:
  1990                           	opt stack 0
  1991  000015                     I2C_Write_Cmd_Write_Data@Device:
  1992                           	opt stack 0
  1993  000015                     bcd_2_dec@bcd:
  1994                           	opt stack 0
  1995  000015                     setAddrWindow@x1:
  1996                           	opt stack 0
  1997  000015                     ___ftpack@sign:
  1998                           	opt stack 0
  1999  000015                     get_full_ADC@result:
  2000                           	opt stack 0
  2001  000015                     ___wmul@product:
  2002                           	opt stack 0
  2003  000015                     ___lwdiv@quotient:
  2004                           	opt stack 0
  2005  000015                     strcpy@cp:
  2006                           	opt stack 0
  2007  000015                     strlen@cp:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x14
  2011  000015                     	ds	1
  2012  000016                     ??___ftpack:
  2013  000016                     DS1621_Init@Device:
  2014                           	opt stack 0
  2015  000016                     DS1621_Read_Temp@Cmd:
  2016                           	opt stack 0
  2017  000016                     I2C_Write_Address_Read_One_Byte@Device:
  2018                           	opt stack 0
  2019  000016                     setAddrWindow@y1:
  2020                           	opt stack 0
  2021                           
  2022                           ; 1 bytes @ 0x15
  2023  000016                     	ds	1
  2024  000017                     ??___ftge:
  2025  000017                     ?___awdiv:
  2026                           	opt stack 0
  2027  000017                     DS1621_Read_Temp@Data_Ret:
  2028                           	opt stack 0
  2029  000017                     DS3231_Init@Address_7:
  2030                           	opt stack 0
  2031  000017                     setAddrWindow@x0:
  2032                           	opt stack 0
  2033  000017                     ___lwdiv@counter:
  2034                           	opt stack 0
  2035  000017                     delay_ms@ms:
  2036                           	opt stack 0
  2037  000017                     ___awdiv@dividend:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0x16
  2041  000017                     	ds	1
  2042  000018                     ?___lwmod:
  2043                           	opt stack 0
  2044  000018                     DS1621_Read_Temp@Device:
  2045                           	opt stack 0
  2046  000018                     DS3231_Init@Address_E:
  2047                           	opt stack 0
  2048  000018                     drawPixel@y:
  2049                           	opt stack 0
  2050  000018                     drawFastVLine@y:
  2051                           	opt stack 0
  2052  000018                     fillRectangle@y:
  2053                           	opt stack 0
  2054  000018                     ___lwmod@dividend:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0x17
  2058  000018                     	ds	1
  2059  000019                     ??_delay_ms:
  2060  000019                     ?___awtoft:
  2061                           	opt stack 0
  2062  000019                     ?___lbtoft:
  2063                           	opt stack 0
  2064  000019                     DS3231_Init@control_E:
  2065                           	opt stack 0
  2066  000019                     drawFastVLine@h:
  2067                           	opt stack 0
  2068  000019                     fillRectangle@w:
  2069                           	opt stack 0
  2070  000019                     drawPixel@color:
  2071                           	opt stack 0
  2072  000019                     ___awdiv@divisor:
  2073                           	opt stack 0
  2074  000019                     ___awtoft@c:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x18
  2078  000019                     	ds	1
  2079  00001A                     DS3231_Init@Device:
  2080                           	opt stack 0
  2081  00001A                     fillRectangle@h:
  2082                           	opt stack 0
  2083  00001A                     drawFastVLine@color:
  2084                           	opt stack 0
  2085  00001A                     ___lwmod@divisor:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x19
  2089  00001A                     	ds	1
  2090  00001B                     DS3231_Turn_Off_Alarm@Address_E:
  2091                           	opt stack 0
  2092  00001B                     DS3231_Turn_On_Alarm@Address_E:
  2093                           	opt stack 0
  2094  00001B                     drawPixel@x:
  2095                           	opt stack 0
  2096  00001B                     ___awdiv@counter:
  2097                           	opt stack 0
  2098  00001B                     delay_ms@count:
  2099                           	opt stack 0
  2100  00001B                     fillRectangle@color:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x1A
  2104  00001B                     	ds	1
  2105  00001C                     ??_drawFastVLine:
  2106  00001C                     DS3231_Turn_Off_Alarm@Address_F:
  2107                           	opt stack 0
  2108  00001C                     DS3231_Turn_On_Alarm@Address_F:
  2109                           	opt stack 0
  2110  00001C                     ___awdiv@sign:
  2111                           	opt stack 0
  2112  00001C                     ___awtoft@sign:
  2113                           	opt stack 0
  2114  00001C                     ___lbtoft@c:
  2115                           	opt stack 0
  2116  00001C                     ___lwmod@counter:
  2117                           	opt stack 0
  2118  00001C                     drawCircle@x0:
  2119                           	opt stack 0
  2120                           
  2121                           ; 2 bytes @ 0x1B
  2122  00001C                     	ds	1
  2123  00001D                     ??_fillRectangle:
  2124  00001D                     ?_printf:
  2125                           	opt stack 0
  2126  00001D                     ?___ftmul:
  2127                           	opt stack 0
  2128  00001D                     DS3231_Turn_Off_Alarm@control_E:
  2129                           	opt stack 0
  2130  00001D                     DS3231_Turn_On_Alarm@control_E:
  2131                           	opt stack 0
  2132  00001D                     printf@f:
  2133                           	opt stack 0
  2134  00001D                     ___awdiv@quotient:
  2135                           	opt stack 0
  2136  00001D                     ___ftmul@f1:
  2137                           	opt stack 0
  2138                           
  2139                           ; 3 bytes @ 0x1C
  2140  00001D                     	ds	1
  2141  00001E                     DS3231_Turn_Off_Alarm@control_F:
  2142                           	opt stack 0
  2143  00001E                     DS3231_Turn_On_Alarm@control_F:
  2144                           	opt stack 0
  2145  00001E                     drawCircle@y0:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x1D
  2149  00001E                     	ds	1
  2150  00001F                     DS3231_Turn_Off_Alarm@Device:
  2151                           	opt stack 0
  2152  00001F                     DS3231_Turn_On_Alarm@Device:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x1E
  2156  00001F                     	ds	1
  2157  000020                     ??_Test_Alarm:
  2158  000020                     drawFastVLine@hi:
  2159                           	opt stack 0
  2160  000020                     drawCircle@r:
  2161                           	opt stack 0
  2162  000020                     ___ftmul@f2:
  2163                           	opt stack 0
  2164                           
  2165                           ; 3 bytes @ 0x1F
  2166  000020                     	ds	1
  2167  000021                     drawFastVLine@lo:
  2168                           	opt stack 0
  2169  000021                     fillRectangle@hi:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x20
  2173  000021                     	ds	1
  2174  000022                     drawFastVLine@x:
  2175                           	opt stack 0
  2176  000022                     fillRectangle@lo:
  2177                           	opt stack 0
  2178  000022                     Test_Alarm@alarm_case:
  2179                           	opt stack 0
  2180  000022                     drawCircle@color:
  2181                           	opt stack 0
  2182                           
  2183                           ; 2 bytes @ 0x21
  2184  000022                     	ds	1
  2185  000023                     ??___ftmul:
  2186  000023                     fillRect@y:
  2187                           	opt stack 0
  2188  000023                     fillRectangle@x:
  2189                           	opt stack 0
  2190                           
  2191                           ; 1 bytes @ 0x22
  2192  000023                     	ds	1
  2193  000024                     ??_drawCircle:
  2194  000024                     fillRect@w:
  2195                           	opt stack 0
  2196  000024                     fillScreen@color:
  2197                           	opt stack 0
  2198                           
  2199                           ; 2 bytes @ 0x23
  2200  000024                     	ds	1
  2201  000025                     fillRect@h:
  2202                           	opt stack 0
  2203                           
  2204                           ; 1 bytes @ 0x24
  2205  000025                     	ds	1
  2206  000026                     ___ftmul@exp:
  2207                           	opt stack 0
  2208  000026                     fillRect@color:
  2209                           	opt stack 0
  2210  000026                     drawCircle@ddF_x:
  2211                           	opt stack 0
  2212                           
  2213                           ; 2 bytes @ 0x25
  2214  000026                     	ds	1
  2215  000027                     ___ftmul@f3_as_product:
  2216                           	opt stack 0
  2217                           
  2218                           ; 3 bytes @ 0x26
  2219  000027                     	ds	1
  2220  000028                     ??_fillRect:
  2221  000028                     drawCircle@ddF_y:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0x27
  2225  000028                     	ds	2
  2226  00002A                     ___ftmul@cntr:
  2227                           	opt stack 0
  2228  00002A                     drawCircle@f:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x29
  2232  00002A                     	ds	1
  2233  00002B                     ??_printf:
  2234  00002B                     fillRect@x:
  2235                           	opt stack 0
  2236  00002B                     ___ftmul@sign:
  2237                           	opt stack 0
  2238                           
  2239                           ; 1 bytes @ 0x2A
  2240  00002B                     	ds	1
  2241  00002C                     ?___ftdiv:
  2242                           	opt stack 0
  2243  00002C                     fillRect@i:
  2244                           	opt stack 0
  2245  00002C                     drawCircle@x:
  2246                           	opt stack 0
  2247  00002C                     ___ftdiv@f1:
  2248                           	opt stack 0
  2249                           
  2250                           ; 3 bytes @ 0x2B
  2251  00002C                     	ds	2
  2252  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2253                           	opt stack 0
  2254  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2255                           	opt stack 0
  2256  00002E                     drawChar@y:
  2257                           	opt stack 0
  2258  00002E                     drawCircle@y:
  2259                           	opt stack 0
  2260                           
  2261                           ; 2 bytes @ 0x2D
  2262  00002E                     	ds	1
  2263  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2264                           	opt stack 0
  2265  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2266                           	opt stack 0
  2267  00002F                     drawChar@c:
  2268                           	opt stack 0
  2269  00002F                     printf@idx:
  2270                           	opt stack 0
  2271  00002F                     ___ftdiv@f2:
  2272                           	opt stack 0
  2273                           
  2274                           ; 3 bytes @ 0x2E
  2275  00002F                     	ds	1
  2276  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2277                           	opt stack 0
  2278  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2279                           	opt stack 0
  2280  000030                     drawChar@color:
  2281                           	opt stack 0
  2282  000030                     printf@ap:
  2283                           	opt stack 0
  2284                           
  2285                           ; 2 bytes @ 0x2F
  2286  000030                     	ds	1
  2287  000031                     
  2288                           ; 0 bytes @ 0x30
  2289  000031                     	ds	1
  2290  000032                     ??___ftdiv:
  2291  000032                     printf@prec:
  2292                           	opt stack 0
  2293  000032                     drawChar@bg:
  2294                           	opt stack 0
  2295                           
  2296                           ; 2 bytes @ 0x31
  2297  000032                     	ds	1
  2298  000033                     printf@val:
  2299                           	opt stack 0
  2300                           
  2301                           ; 2 bytes @ 0x32
  2302  000033                     	ds	1
  2303  000034                     drawChar@size:
  2304                           	opt stack 0
  2305                           
  2306                           ; 1 bytes @ 0x33
  2307  000034                     	ds	1
  2308  000035                     drawChar@line:
  2309                           	opt stack 0
  2310  000035                     printf@flag:
  2311                           	opt stack 0
  2312  000035                     ___ftdiv@cntr:
  2313                           	opt stack 0
  2314                           
  2315                           ; 1 bytes @ 0x34
  2316  000035                     	ds	1
  2317  000036                     drawChar@x:
  2318                           	opt stack 0
  2319  000036                     printf@width:
  2320                           	opt stack 0
  2321  000036                     ___ftdiv@f3:
  2322                           	opt stack 0
  2323                           
  2324                           ; 3 bytes @ 0x35
  2325  000036                     	ds	1
  2326  000037                     drawChar@j:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x36
  2330  000037                     	ds	1
  2331  000038                     drawChar@i:
  2332                           	opt stack 0
  2333  000038                     printf@c:
  2334                           	opt stack 0
  2335                           
  2336                           ; 1 bytes @ 0x37
  2337  000038                     	ds	1
  2338  000039                     drawtext@y:
  2339                           	opt stack 0
  2340  000039                     ___ftdiv@exp:
  2341                           	opt stack 0
  2342                           
  2343                           ; 1 bytes @ 0x38
  2344  000039                     	ds	1
  2345  00003A                     ___ftdiv@sign:
  2346                           	opt stack 0
  2347  00003A                     check_for_button_input@j:
  2348                           	opt stack 0
  2349  00003A                     drawtext@_text:
  2350                           	opt stack 0
  2351                           
  2352                           ; 2 bytes @ 0x39
  2353  00003A                     	ds	1
  2354  00003B                     ?___fttol:
  2355                           	opt stack 0
  2356  00003B                     ___fttol@f1:
  2357                           	opt stack 0
  2358                           
  2359                           ; 3 bytes @ 0x3A
  2360  00003B                     	ds	1
  2361  00003C                     drawtext@color:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0x3B
  2365  00003C                     	ds	2
  2366  00003E                     drawtext@bg:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x3D
  2370  00003E                     	ds	1
  2371  00003F                     ??___fttol:
  2372                           
  2373                           ; 0 bytes @ 0x3E
  2374  00003F                     	ds	1
  2375  000040                     drawtext@size:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x3F
  2379  000040                     	ds	1
  2380  000041                     ??_drawtext:
  2381                           
  2382                           ; 0 bytes @ 0x40
  2383  000041                     	ds	2
  2384  000043                     drawtext@x:
  2385                           	opt stack 0
  2386                           
  2387                           ; 1 bytes @ 0x42
  2388  000043                     	ds	1
  2389  000044                     ___fttol@sign1:
  2390                           	opt stack 0
  2391  000044                     drawtext@textsize:
  2392                           	opt stack 0
  2393                           
  2394                           ; 2 bytes @ 0x43
  2395  000044                     	ds	1
  2396  000045                     ___fttol@lval:
  2397                           	opt stack 0
  2398                           
  2399                           ; 4 bytes @ 0x44
  2400  000045                     	ds	1
  2401  000046                     drawtext@i:
  2402                           	opt stack 0
  2403                           
  2404                           ; 2 bytes @ 0x45
  2405  000046                     	ds	2
  2406  000048                     drawtext@cursor_y:
  2407                           	opt stack 0
  2408                           
  2409                           ; 1 bytes @ 0x47
  2410  000048                     	ds	1
  2411  000049                     drawtext@cursor_x:
  2412                           	opt stack 0
  2413  000049                     ___fttol@exp1:
  2414                           	opt stack 0
  2415                           
  2416                           ; 1 bytes @ 0x48
  2417  000049                     	ds	1
  2418  00004A                     tblptru	equ	0xFF8
  2419                           tblptrh	equ	0xFF7
  2420                           tblptrl	equ	0xFF6
  2421                           tablat	equ	0xFF5
  2422                           postinc0	equ	0xFEE
  2423                           wreg	equ	0xFE8
  2424                           postdec1	equ	0xFE5
  2425                           fsr1l	equ	0xFE1
  2426                           
  2427                           ; 0 bytes @ 0x49
  2428 ;;
  2429 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2430 ;;
  2431 ;; *************** function _main *****************
  2432 ;; Defined at:
  2433 ;;		line 124 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Main.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;		None
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;		None
  2438 ;; Return value:  Size  Location     Type
  2439 ;;		None               void
  2440 ;; Registers used:
  2441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2450 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2451 ;;Total ram usage:        2 bytes
  2452 ;; Hardware stack levels required when called:   13
  2453 ;; This function calls:
  2454 ;;		_DS1621_Read_Temp
  2455 ;;		_DS3231_Read_Alarm_Time
  2456 ;;		_DS3231_Read_Time
  2457 ;;		_DS3231_Turn_Off_Alarm
  2458 ;;		_Do_Beep_Bad
  2459 ;;		_Do_Beep_Good
  2460 ;;		_Do_Init
  2461 ;;		_Do_Setup_Alarm_Time
  2462 ;;		_Do_Setup_Heater_Temp
  2463 ;;		_Do_Setup_Time
  2464 ;;		_Initialize_Screen
  2465 ;;		_Monitor_Heater
  2466 ;;		_Test_Alarm
  2467 ;;		_Toggle_Heater
  2468 ;;		_Update_Screen
  2469 ;;		___awdiv
  2470 ;;		___wmul
  2471 ;;		_check_for_button_input
  2472 ;;		_get_RPM
  2473 ;;		_printf
  2474 ;;		_read_volt
  2475 ;; This function is called by:
  2476 ;;		Startup code after reset
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           	psect	text0
  2481  000D28                     __ptext0:
  2482                           	opt stack 0
  2483  000D28                     _main:
  2484                           	opt stack 18
  2485                           
  2486                           ;Main.c: 126: Do_Init();
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;incstack = 0
  2490  000D28  EC9A  F018         	call	_Do_Init	;wreg free
  2491                           
  2492                           ;Main.c: 127: Initialize_Screen();
  2493  000D2C  EC27  F003         	call	_Initialize_Screen	;wreg free
  2494                           
  2495                           ;Main.c: 128: DS3231_Turn_Off_Alarm();
  2496  000D30  EC77  F019         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2497                           
  2498                           ;Main.c: 129: DS3231_Read_Alarm_Time();
  2499  000D34  EC17  F01A         	call	_DS3231_Read_Alarm_Time	;wreg free
  2500                           
  2501                           ;Main.c: 131: tempSecond = 0xff;
  2502  000D38  0100               	movlb	0	; () banked
  2503  000D3A  6980               	setf	_tempSecond& (0+255),b
  2504  000D3C  D000               	goto	l9868
  2505  000D3E                     l9868:
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;Main.c: 133: {
  2509                           ;Main.c: 134: DS3231_Read_Time();
  2510  000D3E  EC67  F018         	call	_DS3231_Read_Time	;wreg free
  2511                           
  2512                           ;Main.c: 136: if(tempSecond != second)
  2513  000D42  5063               	movf	_second,w,c
  2514  000D44  0100               	movlb	0	; () banked
  2515  000D46  1980               	xorwf	_tempSecond& (0+255),w,b
  2516  000D48  B4D8               	btfsc	status,2,c
  2517  000D4A  D09E               	goto	l9898
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;Main.c: 137: {
  2521                           ;Main.c: 138: tempSecond = second;
  2522  000D4C  C063  F080         	movff	_second,_tempSecond
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;Main.c: 139: rpm = get_RPM();
  2526  000D50  EC88  F01A         	call	_get_RPM	;wreg free
  2527  000D54  C0FE  F050         	movff	?_get_RPM,_rpm
  2528  000D58  C0FF  F051         	movff	?_get_RPM+1,_rpm+1
  2529                           
  2530                           ;Main.c: 140: volt = read_volt();
  2531  000D5C  EC13  F017         	call	_read_volt	;wreg free
  2532  000D60  C0FB  F0DE         	movff	?_read_volt,_volt
  2533  000D64  C0FC  F0DF         	movff	?_read_volt+1,_volt+1
  2534  000D68  C0FD  F0E0         	movff	?_read_volt+2,_volt+2
  2535                           
  2536                           ;Main.c: 141: DS1621_tempC = DS1621_Read_Temp();
  2537  000D6C  EC6A  F01B         	call	_DS1621_Read_Temp	;wreg free
  2538  000D70  C014  F04A         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2539  000D74  C015  F04B         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2540                           
  2541                           ;Main.c: 142: if ((DS1621_tempC & 0x80) == 0x80) DS1621_tempC = - (0x80 - DS1621_tempC &
      +                           0x7f);
  2542  000D78  AE4A               	btfss	_DS1621_tempC,7,c
  2543  000D7A  D01D               	goto	l9882
  2544  000D7C  C04A  F148         	movff	_DS1621_tempC,??_main
  2545  000D80  C04B  F149         	movff	_DS1621_tempC+1,??_main+1
  2546  000D84  0101               	movlb	1	; () banked
  2547  000D86  1F48               	comf	??_main& (0+255),f,b
  2548  000D88  1F49               	comf	(??_main+1)& (0+255),f,b
  2549  000D8A  4B48               	infsnz	??_main& (0+255),f,b
  2550  000D8C  2B49               	incf	(??_main+1)& (0+255),f,b
  2551  000D8E  0E80               	movlw	128
  2552  000D90  0101               	movlb	1	; () banked
  2553  000D92  2748               	addwf	??_main& (0+255),f,b
  2554  000D94  0E00               	movlw	0
  2555  000D96  2349               	addwfc	(??_main+1)& (0+255),f,b
  2556  000D98  0E7F               	movlw	127
  2557  000D9A  0101               	movlb	1	; () banked
  2558  000D9C  1748               	andwf	??_main& (0+255),f,b
  2559  000D9E  0E00               	movlw	0
  2560  000DA0  1749               	andwf	(??_main+1)& (0+255),f,b
  2561  000DA2  0101               	movlb	1	; () banked
  2562  000DA4  1F48               	comf	??_main& (0+255),f,b
  2563  000DA6  1F49               	comf	(??_main+1)& (0+255),f,b
  2564  000DA8  4B48               	infsnz	??_main& (0+255),f,b
  2565  000DAA  2B49               	incf	(??_main+1)& (0+255),f,b
  2566  000DAC  C148  F04A         	movff	??_main,_DS1621_tempC
  2567  000DB0  C149  F04B         	movff	??_main+1,_DS1621_tempC+1
  2568  000DB4  D000               	goto	l9882
  2569  000DB6                     l9882:
  2570                           
  2571                           ;Main.c: 143: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2572  000DB6  C04A  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2573  000DBA  C04B  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2574  000DBE  0E00               	movlw	0
  2575  000DC0  6E14               	movwf	___wmul@multiplicand+1,c
  2576  000DC2  0E09               	movlw	9
  2577  000DC4  6E13               	movwf	___wmul@multiplicand,c
  2578  000DC6  EC27  F01C         	call	___wmul	;wreg free
  2579  000DCA  C011  F017         	movff	?___wmul,___awdiv@dividend
  2580  000DCE  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2581  000DD2  0E00               	movlw	0
  2582  000DD4  6E1A               	movwf	___awdiv@divisor+1,c
  2583  000DD6  0E05               	movlw	5
  2584  000DD8  6E19               	movwf	___awdiv@divisor,c
  2585  000DDA  EC27  F015         	call	___awdiv	;wreg free
  2586  000DDE  0E20               	movlw	32
  2587  000DE0  2417               	addwf	?___awdiv,w,c
  2588  000DE2  6E4C               	movwf	_DS1621_tempF,c
  2589  000DE4  0E00               	movlw	0
  2590  000DE6  2018               	addwfc	?___awdiv+1,w,c
  2591  000DE8  6E4D               	movwf	_DS1621_tempF+1,c
  2592                           
  2593                           ;Main.c: 145: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2594  000DEA  0E84               	movlw	low STR_4
  2595  000DEC  6E1D               	movwf	printf@f,c
  2596  000DEE  0EFE               	movlw	high STR_4
  2597  000DF0  6E1E               	movwf	printf@f+1,c
  2598  000DF2  C060  F01F         	movff	_hour,?_printf+2
  2599  000DF6  6A20               	clrf	?_printf+3,c
  2600  000DF8  C061  F021         	movff	_minute,?_printf+4
  2601  000DFC  6A22               	clrf	?_printf+5,c
  2602  000DFE  C063  F023         	movff	_second,?_printf+6
  2603  000E02  6A24               	clrf	?_printf+7,c
  2604  000E04  C062  F025         	movff	_month,?_printf+8
  2605  000E08  6A26               	clrf	?_printf+9,c
  2606  000E0A  C05D  F027         	movff	_day,?_printf+10
  2607  000E0E  6A28               	clrf	?_printf+11,c
  2608  000E10  C06D  F029         	movff	_year,?_printf+12
  2609  000E14  6A2A               	clrf	?_printf+13,c
  2610  000E16  ECE7  F004         	call	_printf	;wreg free
  2611                           
  2612                           ;Main.c: 146: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2613  000E1A  0ED0               	movlw	low STR_5
  2614  000E1C  6E1D               	movwf	printf@f,c
  2615  000E1E  0EFE               	movlw	high STR_5
  2616  000E20  6E1E               	movwf	printf@f+1,c
  2617  000E22  C04A  F01F         	movff	_DS1621_tempC,?_printf+2
  2618  000E26  C04B  F020         	movff	_DS1621_tempC+1,?_printf+3
  2619  000E2A  C04C  F021         	movff	_DS1621_tempF,?_printf+4
  2620  000E2E  C04D  F022         	movff	_DS1621_tempF+1,?_printf+5
  2621  000E32  ECE7  F004         	call	_printf	;wreg free
  2622                           
  2623                           ;Main.c: 147: printf ("alarm = %d Heater = %d ", PORTAbits.RA5, HEATER);
  2624  000E36  0EA2               	movlw	low STR_6
  2625  000E38  6E1D               	movwf	printf@f,c
  2626  000E3A  0EFE               	movlw	high STR_6
  2627  000E3C  6E1E               	movwf	printf@f+1,c
  2628  000E3E  AA80               	btfss	3968,5,c	;volatile
  2629  000E40  D004               	goto	u7060
  2630  000E42  0101               	movlb	1	; () banked
  2631  000E44  6B48               	clrf	??_main& (0+255),b
  2632  000E46  2B48               	incf	??_main& (0+255),f,b
  2633  000E48  D002               	goto	u7068
  2634  000E4A                     u7060:
  2635  000E4A  0101               	movlb	1	; () banked
  2636  000E4C  6B48               	clrf	??_main& (0+255),b
  2637  000E4E                     u7068:
  2638  000E4E  0101               	movlb	1	; () banked
  2639  000E50  5148               	movf	??_main& (0+255),w,b
  2640  000E52  6E1F               	movwf	?_printf+2,c
  2641  000E54  6A20               	clrf	?_printf+3,c
  2642  000E56  C054  F021         	movff	_HEATER,?_printf+4
  2643  000E5A  6A22               	clrf	?_printf+5,c
  2644  000E5C  ECE7  F004         	call	_printf	;wreg free
  2645                           
  2646                           ;Main.c: 148: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2647  000E60  0EF9               	movlw	low STR_7
  2648  000E62  6E1D               	movwf	printf@f,c
  2649  000E64  0EFE               	movlw	high STR_7
  2650  000E66  6E1E               	movwf	printf@f+1,c
  2651  000E68  C050  F01F         	movff	_rpm,?_printf+2
  2652  000E6C  C051  F020         	movff	_rpm+1,?_printf+3
  2653  000E70  C05E  F021         	movff	_duty_cycle,?_printf+4
  2654  000E74  6A22               	clrf	?_printf+5,c
  2655  000E76  ECE7  F004         	call	_printf	;wreg free
  2656                           
  2657                           ;Main.c: 150: Monitor_Heater();
  2658  000E7A  ECD2  F01B         	call	_Monitor_Heater	;wreg free
  2659                           
  2660                           ;Main.c: 151: Test_Alarm();
  2661  000E7E  ECA7  F00B         	call	_Test_Alarm	;wreg free
  2662                           
  2663                           ;Main.c: 152: Update_Screen();
  2664  000E82  EC0E  F000         	call	_Update_Screen	;wreg free
  2665  000E86  D000               	goto	l9898
  2666  000E88                     l9898:
  2667                           
  2668                           ;Main.c: 153: }
  2669                           ;Main.c: 155: if (check_for_button_input() == 1)
  2670  000E88  EC49  F016         	call	_check_for_button_input	;wreg free
  2671  000E8C  06E8               	decf	wreg,f,c
  2672  000E8E  A4D8               	btfss	status,2,c
  2673  000E90  D02C               	goto	l9924
  2674                           
  2675                           ;Main.c: 156: {
  2676                           ;Main.c: 158: nec_ok = 0;
  2677  000E92  0E00               	movlw	0
  2678  000E94  0100               	movlb	0	; () banked
  2679  000E96  6FEC               	movwf	(_nec_ok+1)& (0+255),b
  2680  000E98  0E00               	movlw	0
  2681  000E9A  6FEB               	movwf	_nec_ok& (0+255),b
  2682                           
  2683                           ;Main.c: 159: switch (found)
  2684  000E9C  D017               	goto	l9922
  2685  000E9E                     l9902:
  2686                           
  2687                           ;Main.c: 162: Do_Beep_Good();
  2688  000E9E  EC11  F01E         	call	_Do_Beep_Good	;wreg free
  2689                           
  2690                           ;Main.c: 163: Do_Setup_Time();
  2691  000EA2  ECAE  F012         	call	_Do_Setup_Time	;wreg free
  2692                           
  2693                           ;Main.c: 164: break;
  2694  000EA6  D021               	goto	l9924
  2695  000EA8                     l9906:
  2696                           
  2697                           ;Main.c: 167: Do_Beep_Good();
  2698  000EA8  EC11  F01E         	call	_Do_Beep_Good	;wreg free
  2699                           
  2700                           ;Main.c: 168: Do_Setup_Alarm_Time();
  2701  000EAC  EC76  F013         	call	_Do_Setup_Alarm_Time	;wreg free
  2702                           
  2703                           ;Main.c: 169: break;
  2704  000EB0  D01C               	goto	l9924
  2705  000EB2                     l9910:
  2706                           
  2707                           ;Main.c: 172: Do_Beep_Good();
  2708  000EB2  EC11  F01E         	call	_Do_Beep_Good	;wreg free
  2709                           
  2710                           ;Main.c: 173: Do_Setup_Heater_Temp();
  2711  000EB6  EC02  F016         	call	_Do_Setup_Heater_Temp	;wreg free
  2712                           
  2713                           ;Main.c: 174: break;
  2714  000EBA  D017               	goto	l9924
  2715  000EBC                     l9914:
  2716                           
  2717                           ;Main.c: 177: Do_Beep_Good();
  2718  000EBC  EC11  F01E         	call	_Do_Beep_Good	;wreg free
  2719                           
  2720                           ;Main.c: 178: Toggle_Heater();
  2721  000EC0  EC95  F01C         	call	_Toggle_Heater	;wreg free
  2722                           
  2723                           ;Main.c: 179: break;
  2724  000EC4  D012               	goto	l9924
  2725  000EC6                     l9918:
  2726                           
  2727                           ;Main.c: 182: Do_Beep_Bad();
  2728  000EC6  EC14  F01E         	call	_Do_Beep_Bad	;wreg free
  2729                           
  2730                           ;Main.c: 184: }
  2731                           
  2732                           ;Main.c: 183: break;
  2733  000ECA  D00F               	goto	l9924
  2734  000ECC                     l9922:
  2735  000ECC  505F               	movf	_found,w,c
  2736                           
  2737                           ; Switch size 1, requested type "space"
  2738                           ; Number of cases is 4, Range of values is 0 to 5
  2739                           ; switch strategies available:
  2740                           ; Name         Instructions Cycles
  2741                           ; simple_byte           13     7 (average)
  2742                           ;	Chosen strategy is simple_byte
  2743  000ECE  0A00               	xorlw	0	; case 0
  2744  000ED0  B4D8               	btfsc	status,2,c
  2745  000ED2  D7E5               	goto	l9902
  2746  000ED4  0A01               	xorlw	1	; case 1
  2747  000ED6  B4D8               	btfsc	status,2,c
  2748  000ED8  D7E7               	goto	l9906
  2749  000EDA  0A03               	xorlw	3	; case 2
  2750  000EDC  B4D8               	btfsc	status,2,c
  2751  000EDE  D7E9               	goto	l9910
  2752  000EE0  0A07               	xorlw	7	; case 5
  2753  000EE2  B4D8               	btfsc	status,2,c
  2754  000EE4  D7EB               	goto	l9914
  2755  000EE6  D7EF               	goto	l9918
  2756  000EE8  D000               	goto	l9924
  2757  000EEA                     l9924:
  2758                           
  2759                           ;Main.c: 185: }
  2760                           ;Main.c: 189: if (INT1_flag == 1)
  2761  000EEA  0100               	movlb	0	; () banked
  2762  000EEC  05EF               	decf	_INT1_flag& (0+255),w,b
  2763  000EEE  A4D8               	btfss	status,2,c
  2764  000EF0  D004               	goto	l9928
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;Main.c: 190: {
  2768                           ;Main.c: 191: INT1_flag = 0;
  2769  000EF2  0E00               	movlw	0
  2770  000EF4  0100               	movlb	0	; () banked
  2771  000EF6  6FEF               	movwf	_INT1_flag& (0+255),b
  2772  000EF8  D000               	goto	l9928
  2773  000EFA                     l9928:
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;Main.c: 192: }
  2777                           ;Main.c: 194: if (INT2_flag == 1)
  2778  000EFA  0100               	movlb	0	; () banked
  2779  000EFC  05F0               	decf	_INT2_flag& (0+255),w,b
  2780  000EFE  A4D8               	btfss	status,2,c
  2781  000F00  D71E               	goto	l9868
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;Main.c: 195: {
  2785                           ;Main.c: 196: INT2_flag = 0;
  2786  000F02  0E00               	movlw	0
  2787  000F04  0100               	movlb	0	; () banked
  2788  000F06  6FF0               	movwf	_INT2_flag& (0+255),b
  2789                           
  2790                           ; BSR set to: 0
  2791                           
  2792                           ; BSR set to: 0
  2793  000F08  D71A               	goto	l9868
  2794                           
  2795                           ; BSR set to: 0
  2796                           
  2797                           ; BSR set to: 0
  2798  000F0A  EF0C  F000         	goto	start
  2799  000F0E                     __end_of_main:
  2800                           	opt stack 0
  2801                           tblptru	equ	0xFF8
  2802                           tblptrh	equ	0xFF7
  2803                           tblptrl	equ	0xFF6
  2804                           tablat	equ	0xFF5
  2805                           postinc0	equ	0xFEE
  2806                           wreg	equ	0xFE8
  2807                           postdec1	equ	0xFE5
  2808                           fsr1l	equ	0xFE1
  2809                           status	equ	0xFD8
  2810                           
  2811 ;; *************** function _read_volt *****************
  2812 ;; Defined at:
  2813 ;;		line 196 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;		None
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;  volt            2    2[BANK1 ] int 
  2818 ;;  nStep           2    0[BANK1 ] int 
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  3    0[BANK0 ] float 
  2821 ;; Registers used:
  2822 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2828 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;      Totals:         0       3       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;Total ram usage:        7 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; Hardware stack levels required when called:    5
  2835 ;; This function calls:
  2836 ;;		___awtoft
  2837 ;;		___ftdiv
  2838 ;;		___fttol
  2839 ;;		___wmul
  2840 ;;		_get_full_ADC
  2841 ;; This function is called by:
  2842 ;;		_main
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text1
  2847  002E26                     __ptext1:
  2848                           	opt stack 0
  2849  002E26                     _read_volt:
  2850                           	opt stack 25
  2851                           
  2852                           ;utils.c: 199: int nStep = get_full_ADC();
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;incstack = 0
  2856  002E26  EC3B  F01C         	call	_get_full_ADC	;wreg free
  2857  002E2A  C011  F13D         	movff	?_get_full_ADC,read_volt@nStep
  2858  002E2E  C012  F13E         	movff	?_get_full_ADC+1,read_volt@nStep+1
  2859                           
  2860                           ;utils.c: 200: int volt = nStep * 5 /1024.0;
  2861  002E32  0E00               	movlw	0
  2862  002E34  6E2F               	movwf	___ftdiv@f2,c
  2863  002E36  0E80               	movlw	128
  2864  002E38  6E30               	movwf	___ftdiv@f2+1,c
  2865  002E3A  0E44               	movlw	68
  2866  002E3C  6E31               	movwf	___ftdiv@f2+2,c
  2867  002E3E  C13D  F011         	movff	read_volt@nStep,___wmul@multiplier
  2868  002E42  C13E  F012         	movff	read_volt@nStep+1,___wmul@multiplier+1
  2869  002E46  0E00               	movlw	0
  2870  002E48  6E14               	movwf	___wmul@multiplicand+1,c
  2871  002E4A  0E05               	movlw	5
  2872  002E4C  6E13               	movwf	___wmul@multiplicand,c
  2873  002E4E  EC27  F01C         	call	___wmul	;wreg free
  2874  002E52  C011  F019         	movff	?___wmul,___awtoft@c
  2875  002E56  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  2876  002E5A  EC4C  F01B         	call	___awtoft	;wreg free
  2877  002E5E  C019  F02C         	movff	?___awtoft,___ftdiv@f1
  2878  002E62  C01A  F02D         	movff	?___awtoft+1,___ftdiv@f1+1
  2879  002E66  C01B  F02E         	movff	?___awtoft+2,___ftdiv@f1+2
  2880  002E6A  ECF3  F010         	call	___ftdiv	;wreg free
  2881  002E6E  C02C  F03B         	movff	?___ftdiv,___fttol@f1
  2882  002E72  C02D  F03C         	movff	?___ftdiv+1,___fttol@f1+1
  2883  002E76  C02E  F03D         	movff	?___ftdiv+2,___fttol@f1+2
  2884  002E7A  EC80  F010         	call	___fttol	;wreg free
  2885  002E7E  C03B  F13F         	movff	?___fttol,read_volt@volt
  2886  002E82  C03C  F140         	movff	?___fttol+1,read_volt@volt+1
  2887                           
  2888                           ;utils.c: 202: return (volt);
  2889  002E86  C13F  F019         	movff	read_volt@volt,___awtoft@c
  2890  002E8A  C140  F01A         	movff	read_volt@volt+1,___awtoft@c+1
  2891  002E8E  EC4C  F01B         	call	___awtoft	;wreg free
  2892  002E92  C019  F0FB         	movff	?___awtoft,?_read_volt
  2893  002E96  C01A  F0FC         	movff	?___awtoft+1,?_read_volt+1
  2894  002E9A  C01B  F0FD         	movff	?___awtoft+2,?_read_volt+2
  2895  002E9E  D000               	goto	l1145
  2896  002EA0                     l1145:
  2897  002EA0  0012               	return		;funcret
  2898  002EA2                     __end_of_read_volt:
  2899                           	opt stack 0
  2900                           tblptru	equ	0xFF8
  2901                           tblptrh	equ	0xFF7
  2902                           tblptrl	equ	0xFF6
  2903                           tablat	equ	0xFF5
  2904                           postinc0	equ	0xFEE
  2905                           wreg	equ	0xFE8
  2906                           postdec1	equ	0xFE5
  2907                           fsr1l	equ	0xFE1
  2908                           status	equ	0xFD8
  2909                           
  2910 ;; *************** function _get_full_ADC *****************
  2911 ;; Defined at:
  2912 ;;		line 205 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;  result          2   20[COMRAM] unsigned int 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  2   16[COMRAM] unsigned int 
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, status,0
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2926 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;Total ram usage:        6 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    3
  2933 ;; This function calls:
  2934 ;;		Nothing
  2935 ;; This function is called by:
  2936 ;;		_read_volt
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text2
  2941  003876                     __ptext2:
  2942                           	opt stack 0
  2943  003876                     _get_full_ADC:
  2944                           	opt stack 26
  2945                           
  2946                           ;utils.c: 208: unsigned int result;
  2947                           ;utils.c: 209: ADCON0bits.GO=1;
  2948                           
  2949                           ;incstack = 0
  2950  003876  82C2               	bsf	4034,1,c	;volatile
  2951                           
  2952                           ;utils.c: 210: while(ADCON0bits.DONE==1);
  2953  003878  D000               	goto	l1148
  2954  00387A                     l1148:
  2955  00387A  B2C2               	btfsc	4034,1,c	;volatile
  2956  00387C  D7FE               	goto	l1148
  2957                           
  2958                           ;utils.c: 211: result = (ADRESH * 0x100) + ADRESL;
  2959  00387E  50C4               	movf	4036,w,c	;volatile
  2960  003880  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  2961  003882  6A13               	clrf	??_get_full_ADC& (0+255),c
  2962  003884  50C3               	movf	4035,w,c	;volatile
  2963  003886  2413               	addwf	??_get_full_ADC,w,c
  2964  003888  6E15               	movwf	get_full_ADC@result,c
  2965  00388A  0E00               	movlw	0
  2966  00388C  2014               	addwfc	??_get_full_ADC+1,w,c
  2967  00388E  6E16               	movwf	get_full_ADC@result+1,c
  2968                           
  2969                           ;utils.c: 213: return result;
  2970  003890  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  2971  003894  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  2972  003898  D000               	goto	l1151
  2973  00389A                     l1151:
  2974  00389A  0012               	return		;funcret
  2975  00389C                     __end_of_get_full_ADC:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           postinc0	equ	0xFEE
  2982                           wreg	equ	0xFE8
  2983                           postdec1	equ	0xFE5
  2984                           fsr1l	equ	0xFE1
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function ___awtoft *****************
  2988 ;; Defined at:
  2989 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;  c               2   24[COMRAM] int 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  sign            1   27[COMRAM] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  3   24[COMRAM] float 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2, status,0, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3003 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;Total ram usage:        4 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    4
  3010 ;; This function calls:
  3011 ;;		___ftpack
  3012 ;; This function is called by:
  3013 ;;		_read_volt
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text3
  3018  003698                     __ptext3:
  3019                           	opt stack 0
  3020  003698                     ___awtoft:
  3021                           	opt stack 25
  3022                           
  3023                           ;incstack = 0
  3024  003698  0E00               	movlw	0
  3025  00369A  6E1C               	movwf	___awtoft@sign,c
  3026  00369C  AE1A               	btfss	___awtoft@c+1,7,c
  3027  00369E  D007               	goto	l9344
  3028  0036A0  6C19               	negf	___awtoft@c,c
  3029  0036A2  1E1A               	comf	___awtoft@c+1,f,c
  3030  0036A4  B0D8               	btfsc	status,0,c
  3031  0036A6  2A1A               	incf	___awtoft@c+1,f,c
  3032  0036A8  0E01               	movlw	1
  3033  0036AA  6E1C               	movwf	___awtoft@sign,c
  3034  0036AC  D000               	goto	l9344
  3035  0036AE                     l9344:
  3036  0036AE  C019  F011         	movff	___awtoft@c,___ftpack@arg
  3037  0036B2  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  3038  0036B6  6A13               	clrf	___ftpack@arg+2,c
  3039  0036B8  0E8E               	movlw	142
  3040  0036BA  6E14               	movwf	___ftpack@exp,c
  3041  0036BC  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  3042  0036C0  EC13  F013         	call	___ftpack	;wreg free
  3043  0036C4  C011  F019         	movff	?___ftpack,?___awtoft
  3044  0036C8  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  3045  0036CC  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  3046  0036D0  D000               	goto	l1688
  3047  0036D2                     l1688:
  3048  0036D2  0012               	return		;funcret
  3049  0036D4                     __end_of___awtoft:
  3050                           	opt stack 0
  3051                           tblptru	equ	0xFF8
  3052                           tblptrh	equ	0xFF7
  3053                           tblptrl	equ	0xFF6
  3054                           tablat	equ	0xFF5
  3055                           postinc0	equ	0xFEE
  3056                           wreg	equ	0xFE8
  3057                           postdec1	equ	0xFE5
  3058                           fsr1l	equ	0xFE1
  3059                           status	equ	0xFD8
  3060                           
  3061 ;; *************** function _get_RPM *****************
  3062 ;; Defined at:
  3063 ;;		line 74 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Fan_Support.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;		None
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  RPS             2    6[BANK1 ] int 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  2    3[BANK0 ] int 
  3070 ;; Registers used:
  3071 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3077 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;Total ram usage:        4 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:    6
  3084 ;; This function calls:
  3085 ;;		___awdiv
  3086 ;;		___wmul
  3087 ;;		_do_update_pwm
  3088 ;; This function is called by:
  3089 ;;		_main
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text4
  3094  003510                     __ptext4:
  3095                           	opt stack 0
  3096  003510                     _get_RPM:
  3097                           	opt stack 24
  3098                           
  3099                           ;Fan_Support.c: 77: int RPS = TMR3L / 2;
  3100                           
  3101                           ;incstack = 0
  3102  003510  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  3103  003514  6A18               	clrf	___awdiv@dividend+1,c
  3104  003516  0E00               	movlw	0
  3105  003518  6E1A               	movwf	___awdiv@divisor+1,c
  3106  00351A  0E02               	movlw	2
  3107  00351C  6E19               	movwf	___awdiv@divisor,c
  3108  00351E  EC27  F015         	call	___awdiv	;wreg free
  3109  003522  C017  F143         	movff	?___awdiv,get_RPM@RPS
  3110  003526  C018  F144         	movff	?___awdiv+1,get_RPM@RPS+1
  3111                           
  3112                           ;Fan_Support.c: 79: TMR3L = 0;
  3113  00352A  0E00               	movlw	0
  3114  00352C  6EB2               	movwf	4018,c	;volatile
  3115                           
  3116                           ;Fan_Support.c: 80: return (RPS * 60);
  3117  00352E  C143  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3118  003532  C144  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3119  003536  0E00               	movlw	0
  3120  003538  6E14               	movwf	___wmul@multiplicand+1,c
  3121  00353A  0E3C               	movlw	60
  3122  00353C  6E13               	movwf	___wmul@multiplicand,c
  3123  00353E  EC27  F01C         	call	___wmul	;wreg free
  3124  003542  C011  F0FE         	movff	?___wmul,?_get_RPM
  3125  003546  C012  F0FF         	movff	?___wmul+1,?_get_RPM+1
  3126  00354A  D005               	goto	l40
  3127                           
  3128                           ;Fan_Support.c: 81: duty_cycle = 50;
  3129  00354C  0E32               	movlw	50
  3130  00354E  6E5E               	movwf	_duty_cycle,c
  3131                           
  3132                           ;Fan_Support.c: 82: do_update_pwm(duty_cycle) ;
  3133  003550  505E               	movf	_duty_cycle,w,c
  3134  003552  EC43  F012         	call	_do_update_pwm
  3135  003556                     l40:
  3136  003556  0012               	return		;funcret
  3137  003558                     __end_of_get_RPM:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           postinc0	equ	0xFEE
  3144                           wreg	equ	0xFE8
  3145                           postdec1	equ	0xFE5
  3146                           fsr1l	equ	0xFE1
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _Update_Screen *****************
  3150 ;; Defined at:
  3151 ;;		line 77 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Main_Screen.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  neg_tempF       2    4[BANK1 ] int 
  3156 ;;  neg_DS1621_t    1    6[BANK1 ] unsigned char 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;		None               void
  3159 ;; Registers used:
  3160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;Total ram usage:        5 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:   10
  3173 ;; This function calls:
  3174 ;;		___awdiv
  3175 ;;		___awmod
  3176 ;;		___ftmul
  3177 ;;		___fttol
  3178 ;;		_drawtext
  3179 ;;		_strcpy
  3180 ;; This function is called by:
  3181 ;;		_main
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text5
  3186  00001C                     __ptext5:
  3187                           	opt stack 0
  3188  00001C                     _Update_Screen:
  3189                           	opt stack 20
  3190                           
  3191                           ;Main_Screen.c: 79: if ((DS1621_tempC & 0x80) == 0x80)
  3192                           
  3193                           ;incstack = 0
  3194  00001C  AE4A               	btfss	_DS1621_tempC,7,c
  3195  00001E  D022               	goto	l9518
  3196                           
  3197                           ;Main_Screen.c: 80: {
  3198                           ;Main_Screen.c: 81: tempC[0] = '-';
  3199  000020  0E2D               	movlw	45
  3200  000022  0100               	movlb	0	; () banked
  3201  000024  6FD0               	movwf	_tempC& (0+255),b
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;Main_Screen.c: 82: char neg_DS1621_tempC = 0x80 - (DS1621_tempC & 0x7f);
  3205  000026  504A               	movf	_DS1621_tempC,w,c
  3206  000028  0B7F               	andlw	127
  3207  00002A  0800               	sublw	0
  3208  00002C  0F80               	addlw	128
  3209  00002E  0101               	movlb	1	; () banked
  3210  000030  6F43               	movwf	Update_Screen@neg_DS1621_tempC& (0+255),b
  3211                           
  3212                           ; BSR set to: 1
  3213                           ;Main_Screen.c: 83: tempC[1] = (neg_DS1621_tempC)/10 + '0';
  3214  000032  C143  F017         	movff	Update_Screen@neg_DS1621_tempC,___awdiv@dividend
  3215  000036  6A18               	clrf	___awdiv@dividend+1,c
  3216  000038  0E00               	movlw	0
  3217  00003A  6E1A               	movwf	___awdiv@divisor+1,c
  3218  00003C  0E0A               	movlw	10
  3219  00003E  6E19               	movwf	___awdiv@divisor,c
  3220  000040  EC27  F015         	call	___awdiv	;wreg free
  3221  000044  5017               	movf	?___awdiv,w,c
  3222  000046  0F30               	addlw	48
  3223  000048  0100               	movlb	0	; () banked
  3224  00004A  6FD1               	movwf	(_tempC+1)& (0+255),b
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;Main_Screen.c: 84: tempC[2] = (neg_DS1621_tempC)%10 + '0';
  3228  00004C  C143  F0FB         	movff	Update_Screen@neg_DS1621_tempC,___awmod@dividend
  3229  000050  0100               	movlb	0	; () banked
  3230  000052  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
  3231  000054  0E00               	movlw	0
  3232  000056  0100               	movlb	0	; () banked
  3233  000058  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  3234  00005A  0E0A               	movlw	10
  3235  00005C  6FFD               	movwf	___awmod@divisor& (0+255),b
  3236  00005E  EC31  F014         	call	___awmod	;wreg free
  3237  000062  D01C               	goto	L1
  3238  000064                     l9518:
  3239                           
  3240                           ;Main_Screen.c: 86: else
  3241                           ;Main_Screen.c: 87: {
  3242                           ;Main_Screen.c: 88: tempC[0] = '+';
  3243  000064  0E2B               	movlw	43
  3244  000066  0100               	movlb	0	; () banked
  3245  000068  6FD0               	movwf	_tempC& (0+255),b
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;Main_Screen.c: 89: tempC[1] = DS1621_tempC/10 + '0';
  3249  00006A  C04A  F017         	movff	_DS1621_tempC,___awdiv@dividend
  3250  00006E  C04B  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3251  000072  0E00               	movlw	0
  3252  000074  6E1A               	movwf	___awdiv@divisor+1,c
  3253  000076  0E0A               	movlw	10
  3254  000078  6E19               	movwf	___awdiv@divisor,c
  3255  00007A  EC27  F015         	call	___awdiv	;wreg free
  3256  00007E  5017               	movf	?___awdiv,w,c
  3257  000080  0F30               	addlw	48
  3258  000082  0100               	movlb	0	; () banked
  3259  000084  6FD1               	movwf	(_tempC+1)& (0+255),b
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;Main_Screen.c: 90: tempC[2] = DS1621_tempC%10 + '0';
  3263  000086  C04A  F0FB         	movff	_DS1621_tempC,___awmod@dividend
  3264  00008A  C04B  F0FC         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3265  00008E  0E00               	movlw	0
  3266  000090  0100               	movlb	0	; () banked
  3267  000092  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  3268  000094  0E0A               	movlw	10
  3269  000096  6FFD               	movwf	___awmod@divisor& (0+255),b
  3270  000098  EC31  F014         	call	___awmod	;wreg free
  3271  00009C                     L1:
  3272  00009C  0100               	movlb	0	; () banked
  3273  00009E  51FB               	movf	?___awmod& (0+255),w,b
  3274  0000A0  0F30               	addlw	48
  3275  0000A2  0100               	movlb	0	; () banked
  3276  0000A4  6FD2               	movwf	(_tempC+2)& (0+255),b
  3277  0000A6  D000               	goto	l9524
  3278  0000A8                     l9524:
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;Main_Screen.c: 91: }
  3282                           ;Main_Screen.c: 93: if (DS1621_tempF < 0)
  3283  0000A8  AE4D               	btfss	_DS1621_tempF+1,7,c
  3284  0000AA  D034               	goto	l9534
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;Main_Screen.c: 94: {
  3288                           ;Main_Screen.c: 95: tempF[0] = '-';
  3289  0000AC  0E2D               	movlw	45
  3290  0000AE  0100               	movlb	0	; () banked
  3291  0000B0  6FD4               	movwf	_tempF& (0+255),b
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;Main_Screen.c: 96: int neg_tempF = 0x80 - (DS1621_tempF & 0x7f);
  3295  0000B2  0E7F               	movlw	127
  3296  0000B4  144C               	andwf	_DS1621_tempF,w,c
  3297  0000B6  0101               	movlb	1	; () banked
  3298  0000B8  6F3F               	movwf	??_Update_Screen& (0+255),b
  3299  0000BA  0E00               	movlw	0
  3300  0000BC  144D               	andwf	_DS1621_tempF+1,w,c
  3301  0000BE  0101               	movlb	1	; () banked
  3302  0000C0  6F40               	movwf	(??_Update_Screen+1)& (0+255),b
  3303  0000C2  0101               	movlb	1	; () banked
  3304  0000C4  1F3F               	comf	??_Update_Screen& (0+255),f,b
  3305  0000C6  1F40               	comf	(??_Update_Screen+1)& (0+255),f,b
  3306  0000C8  4B3F               	infsnz	??_Update_Screen& (0+255),f,b
  3307  0000CA  2B40               	incf	(??_Update_Screen+1)& (0+255),f,b
  3308  0000CC  0E80               	movlw	128
  3309  0000CE  0101               	movlb	1	; () banked
  3310  0000D0  253F               	addwf	??_Update_Screen& (0+255),w,b
  3311  0000D2  0101               	movlb	1	; () banked
  3312  0000D4  6F41               	movwf	Update_Screen@neg_tempF& (0+255),b
  3313  0000D6  0E00               	movlw	0
  3314  0000D8  0101               	movlb	1	; () banked
  3315  0000DA  2140               	addwfc	(??_Update_Screen+1)& (0+255),w,b
  3316  0000DC  0101               	movlb	1	; () banked
  3317  0000DE  6F42               	movwf	(Update_Screen@neg_tempF+1)& (0+255),b
  3318                           
  3319                           ; BSR set to: 1
  3320                           ;Main_Screen.c: 97: tempF[1] = neg_tempF/10 + '0';
  3321  0000E0  C141  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3322  0000E4  C142  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3323  0000E8  0E00               	movlw	0
  3324  0000EA  6E1A               	movwf	___awdiv@divisor+1,c
  3325  0000EC  0E0A               	movlw	10
  3326  0000EE  6E19               	movwf	___awdiv@divisor,c
  3327  0000F0  EC27  F015         	call	___awdiv	;wreg free
  3328  0000F4  5017               	movf	?___awdiv,w,c
  3329  0000F6  0F30               	addlw	48
  3330  0000F8  0100               	movlb	0	; () banked
  3331  0000FA  6FD5               	movwf	(_tempF+1)& (0+255),b
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;Main_Screen.c: 98: tempF[2] = neg_tempF%10 + '0';
  3335  0000FC  C141  F0FB         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3336  000100  C142  F0FC         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3337  000104  0E00               	movlw	0
  3338  000106  0100               	movlb	0	; () banked
  3339  000108  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  3340  00010A  0E0A               	movlw	10
  3341  00010C  6FFD               	movwf	___awmod@divisor& (0+255),b
  3342  00010E  EC31  F014         	call	___awmod	;wreg free
  3343  000112  D01C               	goto	L2
  3344  000114                     l9534:
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;Main_Screen.c: 100: else
  3348                           ;Main_Screen.c: 101: {
  3349                           ;Main_Screen.c: 102: tempF[0] = '+';
  3350  000114  0E2B               	movlw	43
  3351  000116  0100               	movlb	0	; () banked
  3352  000118  6FD4               	movwf	_tempF& (0+255),b
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;Main_Screen.c: 103: tempF[1] = DS1621_tempF/10 + '0';
  3356  00011A  C04C  F017         	movff	_DS1621_tempF,___awdiv@dividend
  3357  00011E  C04D  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3358  000122  0E00               	movlw	0
  3359  000124  6E1A               	movwf	___awdiv@divisor+1,c
  3360  000126  0E0A               	movlw	10
  3361  000128  6E19               	movwf	___awdiv@divisor,c
  3362  00012A  EC27  F015         	call	___awdiv	;wreg free
  3363  00012E  5017               	movf	?___awdiv,w,c
  3364  000130  0F30               	addlw	48
  3365  000132  0100               	movlb	0	; () banked
  3366  000134  6FD5               	movwf	(_tempF+1)& (0+255),b
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;Main_Screen.c: 104: tempF[2] = DS1621_tempF%10 + '0';
  3370  000136  C04C  F0FB         	movff	_DS1621_tempF,___awmod@dividend
  3371  00013A  C04D  F0FC         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3372  00013E  0E00               	movlw	0
  3373  000140  0100               	movlb	0	; () banked
  3374  000142  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  3375  000144  0E0A               	movlw	10
  3376  000146  6FFD               	movwf	___awmod@divisor& (0+255),b
  3377  000148  EC31  F014         	call	___awmod	;wreg free
  3378  00014C                     L2:
  3379  00014C  0100               	movlb	0	; () banked
  3380  00014E  51FB               	movf	?___awmod& (0+255),w,b
  3381  000150  0F30               	addlw	48
  3382  000152  0100               	movlb	0	; () banked
  3383  000154  6FD6               	movwf	(_tempF+2)& (0+255),b
  3384  000156  D000               	goto	l9540
  3385  000158                     l9540:
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;Main_Screen.c: 105: }
  3389                           ;Main_Screen.c: 107: time[0] = (hour>>4) + '0';
  3390  000158  3860               	swapf	_hour,w,c
  3391  00015A  0B0F               	andlw	15
  3392  00015C  0F30               	addlw	48
  3393  00015E  0101               	movlb	1	; () banked
  3394  000160  6F34               	movwf	_time& (0+255),b
  3395                           
  3396                           ; BSR set to: 1
  3397                           ;Main_Screen.c: 108: time[3] = (minute >> 4) + '0';
  3398  000162  3861               	swapf	_minute,w,c
  3399  000164  0B0F               	andlw	15
  3400  000166  0F30               	addlw	48
  3401  000168  0101               	movlb	1	; () banked
  3402  00016A  6F37               	movwf	(_time+3)& (0+255),b
  3403                           
  3404                           ; BSR set to: 1
  3405                           ;Main_Screen.c: 109: time[4] = (minute & 0x0F) + '0';
  3406  00016C  5061               	movf	_minute,w,c
  3407  00016E  0B0F               	andlw	15
  3408  000170  0F30               	addlw	48
  3409  000172  0101               	movlb	1	; () banked
  3410  000174  6F38               	movwf	(_time+4)& (0+255),b
  3411                           
  3412                           ; BSR set to: 1
  3413                           ;Main_Screen.c: 110: time[6] = (second >> 4) + '0';
  3414  000176  3863               	swapf	_second,w,c
  3415  000178  0B0F               	andlw	15
  3416  00017A  0F30               	addlw	48
  3417  00017C  0101               	movlb	1	; () banked
  3418  00017E  6F3A               	movwf	(_time+6)& (0+255),b
  3419                           
  3420                           ; BSR set to: 1
  3421                           ;Main_Screen.c: 111: time[7] = (second & 0x0F) + '0';
  3422  000180  5063               	movf	_second,w,c
  3423  000182  0B0F               	andlw	15
  3424  000184  0F30               	addlw	48
  3425  000186  0101               	movlb	1	; () banked
  3426  000188  6F3B               	movwf	(_time+7)& (0+255),b
  3427                           
  3428                           ; BSR set to: 1
  3429                           ;Main_Screen.c: 113: date[0] = (month >> 4) + '0';
  3430  00018A  3862               	swapf	_month,w,c
  3431  00018C  0B0F               	andlw	15
  3432  00018E  0F30               	addlw	48
  3433  000190  0100               	movlb	0	; () banked
  3434  000192  6F8B               	movwf	_date& (0+255),b
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;Main_Screen.c: 114: date[1] = (month & 0x0F) + '0';
  3438  000194  5062               	movf	_month,w,c
  3439  000196  0B0F               	andlw	15
  3440  000198  0F30               	addlw	48
  3441  00019A  0100               	movlb	0	; () banked
  3442  00019C  6F8C               	movwf	(_date+1)& (0+255),b
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;Main_Screen.c: 115: date[3] = (day >> 4) + '0';
  3446  00019E  385D               	swapf	_day,w,c
  3447  0001A0  0B0F               	andlw	15
  3448  0001A2  0F30               	addlw	48
  3449  0001A4  0100               	movlb	0	; () banked
  3450  0001A6  6F8E               	movwf	(_date+3)& (0+255),b
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;Main_Screen.c: 116: date[4] = (day & 0x0F) + '0';
  3454  0001A8  505D               	movf	_day,w,c
  3455  0001AA  0B0F               	andlw	15
  3456  0001AC  0F30               	addlw	48
  3457  0001AE  0100               	movlb	0	; () banked
  3458  0001B0  6F8F               	movwf	(_date+4)& (0+255),b
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;Main_Screen.c: 117: date[6] = (year >> 4) + '0';
  3462  0001B2  386D               	swapf	_year,w,c
  3463  0001B4  0B0F               	andlw	15
  3464  0001B6  0F30               	addlw	48
  3465  0001B8  0100               	movlb	0	; () banked
  3466  0001BA  6F91               	movwf	(_date+6)& (0+255),b
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;Main_Screen.c: 118: date[7] = (year & 0x0F) + '0';
  3470  0001BC  506D               	movf	_year,w,c
  3471  0001BE  0B0F               	andlw	15
  3472  0001C0  0F30               	addlw	48
  3473  0001C2  0100               	movlb	0	; () banked
  3474  0001C4  6F92               	movwf	(_date+7)& (0+255),b
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;Main_Screen.c: 120: alarm_time[0] = (alarm_hour >> 4) + '0';
  3478  0001C6  385A               	swapf	_alarm_hour,w,c
  3479  0001C8  0B0F               	andlw	15
  3480  0001CA  0F30               	addlw	48
  3481  0001CC  0100               	movlb	0	; () banked
  3482  0001CE  6F82               	movwf	_alarm_time& (0+255),b
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;Main_Screen.c: 121: alarm_time[1] = (alarm_hour & 0x0F) + '0';
  3486  0001D0  505A               	movf	_alarm_hour,w,c
  3487  0001D2  0B0F               	andlw	15
  3488  0001D4  0F30               	addlw	48
  3489  0001D6  0100               	movlb	0	; () banked
  3490  0001D8  6F83               	movwf	(_alarm_time+1)& (0+255),b
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;Main_Screen.c: 122: alarm_time[3] = (alarm_minute >> 4) + '0';
  3494  0001DA  385B               	swapf	_alarm_minute,w,c
  3495  0001DC  0B0F               	andlw	15
  3496  0001DE  0F30               	addlw	48
  3497  0001E0  0100               	movlb	0	; () banked
  3498  0001E2  6F85               	movwf	(_alarm_time+3)& (0+255),b
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;Main_Screen.c: 123: alarm_time[4] = (alarm_minute & 0x0F) + '0';
  3502  0001E4  505B               	movf	_alarm_minute,w,c
  3503  0001E6  0B0F               	andlw	15
  3504  0001E8  0F30               	addlw	48
  3505  0001EA  0100               	movlb	0	; () banked
  3506  0001EC  6F86               	movwf	(_alarm_time+4)& (0+255),b
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;Main_Screen.c: 124: alarm_time[6] = (alarm_second >> 4) + '0';
  3510  0001EE  385C               	swapf	_alarm_second,w,c
  3511  0001F0  0B0F               	andlw	15
  3512  0001F2  0F30               	addlw	48
  3513  0001F4  0100               	movlb	0	; () banked
  3514  0001F6  6F88               	movwf	(_alarm_time+6)& (0+255),b
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;Main_Screen.c: 125: alarm_time[7] = (alarm_second & 0x0F) + '0';
  3518  0001F8  505C               	movf	_alarm_second,w,c
  3519  0001FA  0B0F               	andlw	15
  3520  0001FC  0F30               	addlw	48
  3521  0001FE  0100               	movlb	0	; () banked
  3522  000200  6F89               	movwf	(_alarm_time+7)& (0+255),b
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;Main_Screen.c: 127: if (ALARMEN == 1)
  3526  000202  0100               	movlb	0	; () banked
  3527  000204  05E1               	decf	_ALARMEN& (0+255),w,b
  3528  000206  0100               	movlb	0	; () banked
  3529  000208  11E2               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3530  00020A  A4D8               	btfss	status,2,c
  3531  00020C  D00B               	goto	l9578
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;Main_Screen.c: 128: {
  3535                           ;Main_Screen.c: 129: strcpy(Alarm_SW_Txt, "ON ");
  3536  00020E  0EC4               	movlw	low _Alarm_SW_Txt
  3537  000210  6E11               	movwf	strcpy@to,c
  3538  000212  0E00               	movlw	high _Alarm_SW_Txt
  3539  000214  6E12               	movwf	strcpy@to+1,c
  3540  000216  0EEA               	movlw	low STR_22
  3541  000218  6E13               	movwf	strcpy@from,c
  3542  00021A  0EFF               	movlw	high STR_22
  3543  00021C  6E14               	movwf	strcpy@from+1,c
  3544  00021E  ECA1  F01B         	call	_strcpy	;wreg free
  3545                           
  3546                           ;Main_Screen.c: 130: }
  3547  000222  D00B               	goto	l9580
  3548  000224                     l9578:
  3549                           
  3550                           ;Main_Screen.c: 131: else
  3551                           ;Main_Screen.c: 132: {
  3552                           ;Main_Screen.c: 133: strcpy(Alarm_SW_Txt, "OFF");
  3553  000224  0EC4               	movlw	low _Alarm_SW_Txt
  3554  000226  6E11               	movwf	strcpy@to,c
  3555  000228  0E00               	movlw	high _Alarm_SW_Txt
  3556  00022A  6E12               	movwf	strcpy@to+1,c
  3557  00022C  0EEE               	movlw	low STR_23
  3558  00022E  6E13               	movwf	strcpy@from,c
  3559  000230  0EFF               	movlw	high STR_23
  3560  000232  6E14               	movwf	strcpy@from+1,c
  3561  000234  ECA1  F01B         	call	_strcpy	;wreg free
  3562  000238  D000               	goto	l9580
  3563  00023A                     l9580:
  3564                           
  3565                           ;Main_Screen.c: 134: }
  3566                           ;Main_Screen.c: 136: Heater_Set_Temp_Txt[0] = heater_set_temp / 100 + '0';
  3567  00023A  C06E  F017         	movff	_heater_set_temp,___awdiv@dividend
  3568  00023E  6A18               	clrf	___awdiv@dividend+1,c
  3569  000240  0E00               	movlw	0
  3570  000242  6E1A               	movwf	___awdiv@divisor+1,c
  3571  000244  0E64               	movlw	100
  3572  000246  6E19               	movwf	___awdiv@divisor,c
  3573  000248  EC27  F015         	call	___awdiv	;wreg free
  3574  00024C  5017               	movf	?___awdiv,w,c
  3575  00024E  0F30               	addlw	48
  3576  000250  0100               	movlb	0	; () banked
  3577  000252  6FB5               	movwf	_Heater_Set_Temp_Txt& (0+255),b
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;Main_Screen.c: 137: Heater_Set_Temp_Txt[1] = heater_set_temp / 100 + '0';
  3581  000254  C06E  F017         	movff	_heater_set_temp,___awdiv@dividend
  3582  000258  6A18               	clrf	___awdiv@dividend+1,c
  3583  00025A  0E00               	movlw	0
  3584  00025C  6E1A               	movwf	___awdiv@divisor+1,c
  3585  00025E  0E64               	movlw	100
  3586  000260  6E19               	movwf	___awdiv@divisor,c
  3587  000262  EC27  F015         	call	___awdiv	;wreg free
  3588  000266  5017               	movf	?___awdiv,w,c
  3589  000268  0F30               	addlw	48
  3590  00026A  0100               	movlb	0	; () banked
  3591  00026C  6FB6               	movwf	(_Heater_Set_Temp_Txt+1)& (0+255),b
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;Main_Screen.c: 138: Heater_Set_Temp_Txt[2] = heater_set_temp / 100 + '0';
  3595  00026E  C06E  F017         	movff	_heater_set_temp,___awdiv@dividend
  3596  000272  6A18               	clrf	___awdiv@dividend+1,c
  3597  000274  0E00               	movlw	0
  3598  000276  6E1A               	movwf	___awdiv@divisor+1,c
  3599  000278  0E64               	movlw	100
  3600  00027A  6E19               	movwf	___awdiv@divisor,c
  3601  00027C  EC27  F015         	call	___awdiv	;wreg free
  3602  000280  5017               	movf	?___awdiv,w,c
  3603  000282  0F30               	addlw	48
  3604  000284  0100               	movlb	0	; () banked
  3605  000286  6FB7               	movwf	(_Heater_Set_Temp_Txt+2)& (0+255),b
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;Main_Screen.c: 140: if (HEATER == 1)
  3609  000288  0454               	decf	_HEATER,w,c
  3610  00028A  A4D8               	btfss	status,2,c
  3611  00028C  D00B               	goto	l9590
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;Main_Screen.c: 141: {
  3615                           ;Main_Screen.c: 142: strcpy(Heater_SW_Txt, "ON ");
  3616  00028E  0ECC               	movlw	low _Heater_SW_Txt
  3617  000290  6E11               	movwf	strcpy@to,c
  3618  000292  0E00               	movlw	high _Heater_SW_Txt
  3619  000294  6E12               	movwf	strcpy@to+1,c
  3620  000296  0EEA               	movlw	low STR_22
  3621  000298  6E13               	movwf	strcpy@from,c
  3622  00029A  0EFF               	movlw	high STR_22
  3623  00029C  6E14               	movwf	strcpy@from+1,c
  3624  00029E  ECA1  F01B         	call	_strcpy	;wreg free
  3625                           
  3626                           ;Main_Screen.c: 143: }
  3627  0002A2  D00B               	goto	l9592
  3628  0002A4                     l9590:
  3629                           
  3630                           ;Main_Screen.c: 144: else
  3631                           ;Main_Screen.c: 145: {
  3632                           ;Main_Screen.c: 146: strcpy(Heater_SW_Txt, "OFF");
  3633  0002A4  0ECC               	movlw	low _Heater_SW_Txt
  3634  0002A6  6E11               	movwf	strcpy@to,c
  3635  0002A8  0E00               	movlw	high _Heater_SW_Txt
  3636  0002AA  6E12               	movwf	strcpy@to+1,c
  3637  0002AC  0EEE               	movlw	low STR_23
  3638  0002AE  6E13               	movwf	strcpy@from,c
  3639  0002B0  0EFF               	movlw	high STR_23
  3640  0002B2  6E14               	movwf	strcpy@from+1,c
  3641  0002B4  ECA1  F01B         	call	_strcpy	;wreg free
  3642  0002B8  D000               	goto	l9592
  3643  0002BA                     l9592:
  3644                           
  3645                           ;Main_Screen.c: 147: }
  3646                           ;Main_Screen.c: 149: if (PORTAbits.RA5 == 0) RTC_ALARM_Txt[0] = '1';
  3647  0002BA  BA80               	btfsc	3968,5,c	;volatile
  3648  0002BC  D002               	goto	l9596
  3649  0002BE  0E31               	movlw	49
  3650  0002C0  D001               	goto	L3
  3651  0002C2                     l9596:
  3652                           
  3653                           ;Main_Screen.c: 150: else RTC_ALARM_Txt[0] = '0';
  3654  0002C2  0E30               	movlw	48
  3655  0002C4                     L3:
  3656  0002C4  0100               	movlb	0	; () banked
  3657  0002C6  6FD8               	movwf	_RTC_ALARM_Txt& (0+255),b
  3658  0002C8  D000               	goto	l9598
  3659  0002CA                     l9598:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;Main_Screen.c: 153: DC_Txt[0] = duty_cycle / 100 + '0';
  3663  0002CA  C05E  F017         	movff	_duty_cycle,___awdiv@dividend
  3664  0002CE  6A18               	clrf	___awdiv@dividend+1,c
  3665  0002D0  0E00               	movlw	0
  3666  0002D2  6E1A               	movwf	___awdiv@divisor+1,c
  3667  0002D4  0E64               	movlw	100
  3668  0002D6  6E19               	movwf	___awdiv@divisor,c
  3669  0002D8  EC27  F015         	call	___awdiv	;wreg free
  3670  0002DC  5017               	movf	?___awdiv,w,c
  3671  0002DE  0F30               	addlw	48
  3672  0002E0  0100               	movlb	0	; () banked
  3673  0002E2  6FC8               	movwf	_DC_Txt& (0+255),b
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;Main_Screen.c: 154: DC_Txt[1] = (duty_cycle / 10) % 10 + '0';
  3677  0002E4  0E00               	movlw	0
  3678  0002E6  6E1A               	movwf	___awdiv@divisor+1,c
  3679  0002E8  0E0A               	movlw	10
  3680  0002EA  6E19               	movwf	___awdiv@divisor,c
  3681  0002EC  C05E  F017         	movff	_duty_cycle,___awdiv@dividend
  3682  0002F0  6A18               	clrf	___awdiv@dividend+1,c
  3683  0002F2  EC27  F015         	call	___awdiv	;wreg free
  3684  0002F6  C017  F0FB         	movff	?___awdiv,___awmod@dividend
  3685  0002FA  C018  F0FC         	movff	?___awdiv+1,___awmod@dividend+1
  3686  0002FE  0E00               	movlw	0
  3687  000300  0100               	movlb	0	; () banked
  3688  000302  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  3689  000304  0E0A               	movlw	10
  3690  000306  6FFD               	movwf	___awmod@divisor& (0+255),b
  3691  000308  EC31  F014         	call	___awmod	;wreg free
  3692  00030C  0100               	movlb	0	; () banked
  3693  00030E  51FB               	movf	?___awmod& (0+255),w,b
  3694  000310  0F30               	addlw	48
  3695  000312  0100               	movlb	0	; () banked
  3696  000314  6FC9               	movwf	(_DC_Txt+1)& (0+255),b
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;Main_Screen.c: 155: DC_Txt[2] = duty_cycle % 10 + '0';
  3700  000316  C05E  F0FB         	movff	_duty_cycle,___awmod@dividend
  3701  00031A  0100               	movlb	0	; () banked
  3702  00031C  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
  3703  00031E  0E00               	movlw	0
  3704  000320  0100               	movlb	0	; () banked
  3705  000322  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  3706  000324  0E0A               	movlw	10
  3707  000326  6FFD               	movwf	___awmod@divisor& (0+255),b
  3708  000328  EC31  F014         	call	___awmod	;wreg free
  3709  00032C  0100               	movlb	0	; () banked
  3710  00032E  51FB               	movf	?___awmod& (0+255),w,b
  3711  000330  0F30               	addlw	48
  3712  000332  0100               	movlb	0	; () banked
  3713  000334  6FCA               	movwf	(_DC_Txt+2)& (0+255),b
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;Main_Screen.c: 157: Volt_Txt[0] = ((int) volt) + '0';
  3717  000336  C0DE  F03B         	movff	_volt,___fttol@f1
  3718  00033A  C0DF  F03C         	movff	_volt+1,___fttol@f1+1
  3719  00033E  C0E0  F03D         	movff	_volt+2,___fttol@f1+2
  3720  000342  EC80  F010         	call	___fttol	;wreg free
  3721  000346  503B               	movf	?___fttol,w,c
  3722  000348  0F30               	addlw	48
  3723  00034A  0100               	movlb	0	; () banked
  3724  00034C  6FAF               	movwf	_Volt_Txt& (0+255),b
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;Main_Screen.c: 158: Volt_Txt[2] = ((int)(volt * 10 )) % 10 + '0';
  3728  00034E  0E00               	movlw	0
  3729  000350  6E20               	movwf	___ftmul@f2,c
  3730  000352  0E20               	movlw	32
  3731  000354  6E21               	movwf	___ftmul@f2+1,c
  3732  000356  0E41               	movlw	65
  3733  000358  6E22               	movwf	___ftmul@f2+2,c
  3734  00035A  C0DE  F01D         	movff	_volt,___ftmul@f1
  3735  00035E  C0DF  F01E         	movff	_volt+1,___ftmul@f1+1
  3736  000362  C0E0  F01F         	movff	_volt+2,___ftmul@f1+2
  3737  000366  EC99  F00E         	call	___ftmul	;wreg free
  3738  00036A  C01D  F03B         	movff	?___ftmul,___fttol@f1
  3739  00036E  C01E  F03C         	movff	?___ftmul+1,___fttol@f1+1
  3740  000372  C01F  F03D         	movff	?___ftmul+2,___fttol@f1+2
  3741  000376  EC80  F010         	call	___fttol	;wreg free
  3742  00037A  C03B  F0FB         	movff	?___fttol,___awmod@dividend
  3743  00037E  C03C  F0FC         	movff	?___fttol+1,___awmod@dividend+1
  3744  000382  0E00               	movlw	0
  3745  000384  0100               	movlb	0	; () banked
  3746  000386  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  3747  000388  0E0A               	movlw	10
  3748  00038A  6FFD               	movwf	___awmod@divisor& (0+255),b
  3749  00038C  EC31  F014         	call	___awmod	;wreg free
  3750  000390  0100               	movlb	0	; () banked
  3751  000392  51FB               	movf	?___awmod& (0+255),w,b
  3752  000394  0F30               	addlw	48
  3753  000396  0100               	movlb	0	; () banked
  3754  000398  6FB1               	movwf	(_Volt_Txt+2)& (0+255),b
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;Main_Screen.c: 159: Volt_Txt[3] = ((int)(volt * 100 )) % 10 + '0';
  3758  00039A  0E00               	movlw	0
  3759  00039C  6E20               	movwf	___ftmul@f2,c
  3760  00039E  0EC8               	movlw	200
  3761  0003A0  6E21               	movwf	___ftmul@f2+1,c
  3762  0003A2  0E42               	movlw	66
  3763  0003A4  6E22               	movwf	___ftmul@f2+2,c
  3764  0003A6  C0DE  F01D         	movff	_volt,___ftmul@f1
  3765  0003AA  C0DF  F01E         	movff	_volt+1,___ftmul@f1+1
  3766  0003AE  C0E0  F01F         	movff	_volt+2,___ftmul@f1+2
  3767  0003B2  EC99  F00E         	call	___ftmul	;wreg free
  3768  0003B6  C01D  F03B         	movff	?___ftmul,___fttol@f1
  3769  0003BA  C01E  F03C         	movff	?___ftmul+1,___fttol@f1+1
  3770  0003BE  C01F  F03D         	movff	?___ftmul+2,___fttol@f1+2
  3771  0003C2  EC80  F010         	call	___fttol	;wreg free
  3772  0003C6  C03B  F0FB         	movff	?___fttol,___awmod@dividend
  3773  0003CA  C03C  F0FC         	movff	?___fttol+1,___awmod@dividend+1
  3774  0003CE  0E00               	movlw	0
  3775  0003D0  0100               	movlb	0	; () banked
  3776  0003D2  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  3777  0003D4  0E0A               	movlw	10
  3778  0003D6  6FFD               	movwf	___awmod@divisor& (0+255),b
  3779  0003D8  EC31  F014         	call	___awmod	;wreg free
  3780  0003DC  0100               	movlb	0	; () banked
  3781  0003DE  51FB               	movf	?___awmod& (0+255),w,b
  3782  0003E0  0F30               	addlw	48
  3783  0003E2  0100               	movlb	0	; () banked
  3784  0003E4  6FB2               	movwf	(_Volt_Txt+3)& (0+255),b
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;Main_Screen.c: 161: RPM_Txt[0] = rpm / 1000 + '0';
  3788  0003E6  C050  F017         	movff	_rpm,___awdiv@dividend
  3789  0003EA  C051  F018         	movff	_rpm+1,___awdiv@dividend+1
  3790  0003EE  0E03               	movlw	3
  3791  0003F0  6E1A               	movwf	___awdiv@divisor+1,c
  3792  0003F2  0EE8               	movlw	232
  3793  0003F4  6E19               	movwf	___awdiv@divisor,c
  3794  0003F6  EC27  F015         	call	___awdiv	;wreg free
  3795  0003FA  5017               	movf	?___awdiv,w,c
  3796  0003FC  0F30               	addlw	48
  3797  0003FE  0100               	movlb	0	; () banked
  3798  000400  6FBA               	movwf	_RPM_Txt& (0+255),b
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;Main_Screen.c: 162: RPM_Txt[1] = (rpm / 100) % 10 + '0';
  3802  000402  0E00               	movlw	0
  3803  000404  6E1A               	movwf	___awdiv@divisor+1,c
  3804  000406  0E64               	movlw	100
  3805  000408  6E19               	movwf	___awdiv@divisor,c
  3806  00040A  C050  F017         	movff	_rpm,___awdiv@dividend
  3807  00040E  C051  F018         	movff	_rpm+1,___awdiv@dividend+1
  3808  000412  EC27  F015         	call	___awdiv	;wreg free
  3809  000416  C017  F0FB         	movff	?___awdiv,___awmod@dividend
  3810  00041A  C018  F0FC         	movff	?___awdiv+1,___awmod@dividend+1
  3811  00041E  0E00               	movlw	0
  3812  000420  0100               	movlb	0	; () banked
  3813  000422  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  3814  000424  0E0A               	movlw	10
  3815  000426  6FFD               	movwf	___awmod@divisor& (0+255),b
  3816  000428  EC31  F014         	call	___awmod	;wreg free
  3817  00042C  0100               	movlb	0	; () banked
  3818  00042E  51FB               	movf	?___awmod& (0+255),w,b
  3819  000430  0F30               	addlw	48
  3820  000432  0100               	movlb	0	; () banked
  3821  000434  6FBB               	movwf	(_RPM_Txt+1)& (0+255),b
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;Main_Screen.c: 163: RPM_Txt[2] = (rpm / 10) % 10 + '0';
  3825  000436  0E00               	movlw	0
  3826  000438  6E1A               	movwf	___awdiv@divisor+1,c
  3827  00043A  0E0A               	movlw	10
  3828  00043C  6E19               	movwf	___awdiv@divisor,c
  3829  00043E  C050  F017         	movff	_rpm,___awdiv@dividend
  3830  000442  C051  F018         	movff	_rpm+1,___awdiv@dividend+1
  3831  000446  EC27  F015         	call	___awdiv	;wreg free
  3832  00044A  C017  F0FB         	movff	?___awdiv,___awmod@dividend
  3833  00044E  C018  F0FC         	movff	?___awdiv+1,___awmod@dividend+1
  3834  000452  0E00               	movlw	0
  3835  000454  0100               	movlb	0	; () banked
  3836  000456  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  3837  000458  0E0A               	movlw	10
  3838  00045A  6FFD               	movwf	___awmod@divisor& (0+255),b
  3839  00045C  EC31  F014         	call	___awmod	;wreg free
  3840  000460  0100               	movlb	0	; () banked
  3841  000462  51FB               	movf	?___awmod& (0+255),w,b
  3842  000464  0F30               	addlw	48
  3843  000466  0100               	movlb	0	; () banked
  3844  000468  6FBC               	movwf	(_RPM_Txt+2)& (0+255),b
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;Main_Screen.c: 164: RPM_Txt[3] = rpm % 10 + '0';
  3848  00046A  C050  F0FB         	movff	_rpm,___awmod@dividend
  3849  00046E  C051  F0FC         	movff	_rpm+1,___awmod@dividend+1
  3850  000472  0E00               	movlw	0
  3851  000474  0100               	movlb	0	; () banked
  3852  000476  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  3853  000478  0E0A               	movlw	10
  3854  00047A  6FFD               	movwf	___awmod@divisor& (0+255),b
  3855  00047C  EC31  F014         	call	___awmod	;wreg free
  3856  000480  0100               	movlb	0	; () banked
  3857  000482  51FB               	movf	?___awmod& (0+255),w,b
  3858  000484  0F30               	addlw	48
  3859  000486  0100               	movlb	0	; () banked
  3860  000488  6FBD               	movwf	(_RPM_Txt+3)& (0+255),b
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;Main_Screen.c: 166: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3864  00048A  0E17               	movlw	23
  3865  00048C  6E39               	movwf	drawtext@y,c
  3866  00048E  0ED0               	movlw	low _tempC
  3867  000490  6E3A               	movwf	drawtext@_text,c
  3868  000492  0E00               	movlw	high _tempC
  3869  000494  6E3B               	movwf	drawtext@_text+1,c
  3870  000496  0EFF               	movlw	255
  3871  000498  6E3D               	movwf	drawtext@color+1,c
  3872  00049A  0EE0               	movlw	224
  3873  00049C  6E3C               	movwf	drawtext@color,c
  3874  00049E  0E00               	movlw	0
  3875  0004A0  6E3F               	movwf	drawtext@bg+1,c
  3876  0004A2  0E00               	movlw	0
  3877  0004A4  6E3E               	movwf	drawtext@bg,c
  3878  0004A6  0E02               	movlw	2
  3879  0004A8  6E40               	movwf	drawtext@size,c
  3880  0004AA  0E01               	movlw	1
  3881  0004AC  EC64  F011         	call	_drawtext
  3882                           
  3883                           ;Main_Screen.c: 167: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3884  0004B0  0E17               	movlw	23
  3885  0004B2  6E39               	movwf	drawtext@y,c
  3886  0004B4  0ED4               	movlw	low _tempF
  3887  0004B6  6E3A               	movwf	drawtext@_text,c
  3888  0004B8  0E00               	movlw	high _tempF
  3889  0004BA  6E3B               	movwf	drawtext@_text+1,c
  3890  0004BC  0EFF               	movlw	255
  3891  0004BE  6E3D               	movwf	drawtext@color+1,c
  3892  0004C0  0EE0               	movlw	224
  3893  0004C2  6E3C               	movwf	drawtext@color,c
  3894  0004C4  0E00               	movlw	0
  3895  0004C6  6E3F               	movwf	drawtext@bg+1,c
  3896  0004C8  0E00               	movlw	0
  3897  0004CA  6E3E               	movwf	drawtext@bg,c
  3898  0004CC  0E02               	movlw	2
  3899  0004CE  6E40               	movwf	drawtext@size,c
  3900  0004D0  0E46               	movlw	70
  3901  0004D2  EC64  F011         	call	_drawtext
  3902                           
  3903                           ;Main_Screen.c: 168: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3904  0004D6  0E34               	movlw	52
  3905  0004D8  6E39               	movwf	drawtext@y,c
  3906  0004DA  0E34               	movlw	low _time
  3907  0004DC  6E3A               	movwf	drawtext@_text,c
  3908  0004DE  0E01               	movlw	high _time
  3909  0004E0  6E3B               	movwf	drawtext@_text+1,c
  3910  0004E2  0E07               	movlw	7
  3911  0004E4  6E3D               	movwf	drawtext@color+1,c
  3912  0004E6  683C               	setf	drawtext@color,c
  3913  0004E8  0E00               	movlw	0
  3914  0004EA  6E3F               	movwf	drawtext@bg+1,c
  3915  0004EC  0E00               	movlw	0
  3916  0004EE  6E3E               	movwf	drawtext@bg,c
  3917  0004F0  0E02               	movlw	2
  3918  0004F2  6E40               	movwf	drawtext@size,c
  3919  0004F4  0E0F               	movlw	15
  3920  0004F6  EC64  F011         	call	_drawtext
  3921                           
  3922                           ;Main_Screen.c: 169: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3923  0004FA  0E52               	movlw	82
  3924  0004FC  6E39               	movwf	drawtext@y,c
  3925  0004FE  0E8B               	movlw	low _date
  3926  000500  6E3A               	movwf	drawtext@_text,c
  3927  000502  0E00               	movlw	high _date
  3928  000504  6E3B               	movwf	drawtext@_text+1,c
  3929  000506  0E07               	movlw	7
  3930  000508  6E3D               	movwf	drawtext@color+1,c
  3931  00050A  0EE0               	movlw	224
  3932  00050C  6E3C               	movwf	drawtext@color,c
  3933  00050E  0E00               	movlw	0
  3934  000510  6E3F               	movwf	drawtext@bg+1,c
  3935  000512  0E00               	movlw	0
  3936  000514  6E3E               	movwf	drawtext@bg,c
  3937  000516  0E02               	movlw	2
  3938  000518  6E40               	movwf	drawtext@size,c
  3939  00051A  0E0F               	movlw	15
  3940  00051C  EC64  F011         	call	_drawtext
  3941                           
  3942                           ;Main_Screen.c: 170: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  3943  000520  0E6E               	movlw	110
  3944  000522  6E39               	movwf	drawtext@y,c
  3945  000524  0E82               	movlw	low _alarm_time
  3946  000526  6E3A               	movwf	drawtext@_text,c
  3947  000528  0E00               	movlw	high _alarm_time
  3948  00052A  6E3B               	movwf	drawtext@_text+1,c
  3949  00052C  0E07               	movlw	7
  3950  00052E  6E3D               	movwf	drawtext@color+1,c
  3951  000530  683C               	setf	drawtext@color,c
  3952  000532  0E00               	movlw	0
  3953  000534  6E3F               	movwf	drawtext@bg+1,c
  3954  000536  0E00               	movlw	0
  3955  000538  6E3E               	movwf	drawtext@bg,c
  3956  00053A  0E01               	movlw	1
  3957  00053C  6E40               	movwf	drawtext@size,c
  3958  00053E  0E0A               	movlw	10
  3959  000540  EC64  F011         	call	_drawtext
  3960                           
  3961                           ;Main_Screen.c: 171: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  3962  000544  0E6E               	movlw	110
  3963  000546  6E39               	movwf	drawtext@y,c
  3964  000548  0EC4               	movlw	low _Alarm_SW_Txt
  3965  00054A  6E3A               	movwf	drawtext@_text,c
  3966  00054C  0E00               	movlw	high _Alarm_SW_Txt
  3967  00054E  6E3B               	movwf	drawtext@_text+1,c
  3968  000550  0E07               	movlw	7
  3969  000552  6E3D               	movwf	drawtext@color+1,c
  3970  000554  683C               	setf	drawtext@color,c
  3971  000556  0E00               	movlw	0
  3972  000558  6E3F               	movwf	drawtext@bg+1,c
  3973  00055A  0E00               	movlw	0
  3974  00055C  6E3E               	movwf	drawtext@bg,c
  3975  00055E  0E01               	movlw	1
  3976  000560  6E40               	movwf	drawtext@size,c
  3977  000562  0E5F               	movlw	95
  3978  000564  EC64  F011         	call	_drawtext
  3979                           
  3980                           ;Main_Screen.c: 172: drawtext(35, 130 ,Heater_Set_Temp_Txt, 0xF800, 0x0000, 1);
  3981  000568  0E82               	movlw	130
  3982  00056A  6E39               	movwf	drawtext@y,c
  3983  00056C  0EB5               	movlw	low _Heater_Set_Temp_Txt
  3984  00056E  6E3A               	movwf	drawtext@_text,c
  3985  000570  0E00               	movlw	high _Heater_Set_Temp_Txt
  3986  000572  6E3B               	movwf	drawtext@_text+1,c
  3987  000574  0EF8               	movlw	248
  3988  000576  6E3D               	movwf	drawtext@color+1,c
  3989  000578  0E00               	movlw	0
  3990  00057A  6E3C               	movwf	drawtext@color,c
  3991  00057C  0E00               	movlw	0
  3992  00057E  6E3F               	movwf	drawtext@bg+1,c
  3993  000580  0E00               	movlw	0
  3994  000582  6E3E               	movwf	drawtext@bg,c
  3995  000584  0E01               	movlw	1
  3996  000586  6E40               	movwf	drawtext@size,c
  3997  000588  0E23               	movlw	35
  3998  00058A  EC64  F011         	call	_drawtext
  3999                           
  4000                           ;Main_Screen.c: 173: drawtext(95, 130, Heater_SW_Txt, 0xF800 , 0x0000 , 1);
  4001  00058E  0E82               	movlw	130
  4002  000590  6E39               	movwf	drawtext@y,c
  4003  000592  0ECC               	movlw	low _Heater_SW_Txt
  4004  000594  6E3A               	movwf	drawtext@_text,c
  4005  000596  0E00               	movlw	high _Heater_SW_Txt
  4006  000598  6E3B               	movwf	drawtext@_text+1,c
  4007  00059A  0EF8               	movlw	248
  4008  00059C  6E3D               	movwf	drawtext@color+1,c
  4009  00059E  0E00               	movlw	0
  4010  0005A0  6E3C               	movwf	drawtext@color,c
  4011  0005A2  0E00               	movlw	0
  4012  0005A4  6E3F               	movwf	drawtext@bg+1,c
  4013  0005A6  0E00               	movlw	0
  4014  0005A8  6E3E               	movwf	drawtext@bg,c
  4015  0005AA  0E01               	movlw	1
  4016  0005AC  6E40               	movwf	drawtext@size,c
  4017  0005AE  0E5F               	movlw	95
  4018  0005B0  EC64  F011         	call	_drawtext
  4019                           
  4020                           ;Main_Screen.c: 174: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4021  0005B4  0E96               	movlw	150
  4022  0005B6  6E39               	movwf	drawtext@y,c
  4023  0005B8  0EC8               	movlw	low _DC_Txt
  4024  0005BA  6E3A               	movwf	drawtext@_text,c
  4025  0005BC  0E00               	movlw	high _DC_Txt
  4026  0005BE  6E3B               	movwf	drawtext@_text+1,c
  4027  0005C0  0E07               	movlw	7
  4028  0005C2  6E3D               	movwf	drawtext@color+1,c
  4029  0005C4  0EE0               	movlw	224
  4030  0005C6  6E3C               	movwf	drawtext@color,c
  4031  0005C8  0E00               	movlw	0
  4032  0005CA  6E3F               	movwf	drawtext@bg+1,c
  4033  0005CC  0E00               	movlw	0
  4034  0005CE  6E3E               	movwf	drawtext@bg,c
  4035  0005D0  0E01               	movlw	1
  4036  0005D2  6E40               	movwf	drawtext@size,c
  4037  0005D4  0E0A               	movlw	10
  4038  0005D6  EC64  F011         	call	_drawtext
  4039                           
  4040                           ;Main_Screen.c: 175: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  4041  0005DA  0E96               	movlw	150
  4042  0005DC  6E39               	movwf	drawtext@y,c
  4043  0005DE  0ED8               	movlw	low _RTC_ALARM_Txt
  4044  0005E0  6E3A               	movwf	drawtext@_text,c
  4045  0005E2  0E00               	movlw	high _RTC_ALARM_Txt
  4046  0005E4  6E3B               	movwf	drawtext@_text+1,c
  4047  0005E6  0E07               	movlw	7
  4048  0005E8  6E3D               	movwf	drawtext@color+1,c
  4049  0005EA  0EE0               	movlw	224
  4050  0005EC  6E3C               	movwf	drawtext@color,c
  4051  0005EE  0E00               	movlw	0
  4052  0005F0  6E3F               	movwf	drawtext@bg+1,c
  4053  0005F2  0E00               	movlw	0
  4054  0005F4  6E3E               	movwf	drawtext@bg,c
  4055  0005F6  0E01               	movlw	1
  4056  0005F8  6E40               	movwf	drawtext@size,c
  4057  0005FA  0E23               	movlw	35
  4058  0005FC  EC64  F011         	call	_drawtext
  4059                           
  4060                           ;Main_Screen.c: 176: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  4061  000600  0E96               	movlw	150
  4062  000602  6E39               	movwf	drawtext@y,c
  4063  000604  0EAF               	movlw	low _Volt_Txt
  4064  000606  6E3A               	movwf	drawtext@_text,c
  4065  000608  0E00               	movlw	high _Volt_Txt
  4066  00060A  6E3B               	movwf	drawtext@_text+1,c
  4067  00060C  0E07               	movlw	7
  4068  00060E  6E3D               	movwf	drawtext@color+1,c
  4069  000610  0EE0               	movlw	224
  4070  000612  6E3C               	movwf	drawtext@color,c
  4071  000614  0E00               	movlw	0
  4072  000616  6E3F               	movwf	drawtext@bg+1,c
  4073  000618  0E00               	movlw	0
  4074  00061A  6E3E               	movwf	drawtext@bg,c
  4075  00061C  0E01               	movlw	1
  4076  00061E  6E40               	movwf	drawtext@size,c
  4077  000620  0E32               	movlw	50
  4078  000622  EC64  F011         	call	_drawtext
  4079                           
  4080                           ;Main_Screen.c: 177: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4081  000626  0E96               	movlw	150
  4082  000628  6E39               	movwf	drawtext@y,c
  4083  00062A  0EBA               	movlw	low _RPM_Txt
  4084  00062C  6E3A               	movwf	drawtext@_text,c
  4085  00062E  0E00               	movlw	high _RPM_Txt
  4086  000630  6E3B               	movwf	drawtext@_text+1,c
  4087  000632  0E07               	movlw	7
  4088  000634  6E3D               	movwf	drawtext@color+1,c
  4089  000636  0EE0               	movlw	224
  4090  000638  6E3C               	movwf	drawtext@color,c
  4091  00063A  0E00               	movlw	0
  4092  00063C  6E3F               	movwf	drawtext@bg+1,c
  4093  00063E  0E00               	movlw	0
  4094  000640  6E3E               	movwf	drawtext@bg,c
  4095  000642  0E01               	movlw	1
  4096  000644  6E40               	movwf	drawtext@size,c
  4097  000646  0E5D               	movlw	93
  4098  000648  EC64  F011         	call	_drawtext
  4099  00064C  0012               	return		;funcret
  4100  00064E                     __end_of_Update_Screen:
  4101                           	opt stack 0
  4102                           tblptru	equ	0xFF8
  4103                           tblptrh	equ	0xFF7
  4104                           tblptrl	equ	0xFF6
  4105                           tablat	equ	0xFF5
  4106                           postinc0	equ	0xFEE
  4107                           wreg	equ	0xFE8
  4108                           postdec1	equ	0xFE5
  4109                           fsr1l	equ	0xFE1
  4110                           status	equ	0xFD8
  4111                           
  4112 ;; *************** function _Toggle_Heater *****************
  4113 ;; Defined at:
  4114 ;;		line 66 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Fan_Support.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;		None
  4117 ;; Auto vars:     Size  Location     Type
  4118 ;;		None
  4119 ;; Return value:  Size  Location     Type
  4120 ;;		None               void
  4121 ;; Registers used:
  4122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4123 ;; Tracked objects:
  4124 ;;		On entry : 0/0
  4125 ;;		On exit  : 0/0
  4126 ;;		Unchanged: 0/0
  4127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;Total ram usage:        0 bytes
  4133 ;; Hardware stack levels used:    1
  4134 ;; Hardware stack levels required when called:    7
  4135 ;; This function calls:
  4136 ;;		_Turn_Off_Fan
  4137 ;;		_Turn_On_Fan
  4138 ;;		_printf
  4139 ;; This function is called by:
  4140 ;;		_main
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text6
  4145  00392A                     __ptext6:
  4146                           	opt stack 0
  4147  00392A                     _Toggle_Heater:
  4148                           	opt stack 23
  4149                           
  4150                           ;Fan_Support.c: 69: printf("Heater Toggled\n");
  4151                           
  4152                           ;incstack = 0
  4153  00392A  0E40               	movlw	low STR_1
  4154  00392C  6E1D               	movwf	printf@f,c
  4155  00392E  0EFF               	movlw	high STR_1
  4156  003930  6E1E               	movwf	printf@f+1,c
  4157  003932  ECE7  F004         	call	_printf	;wreg free
  4158                           
  4159                           ;Fan_Support.c: 70: if (HEATER == 1) Turn_Off_Fan();
  4160  003936  0454               	decf	_HEATER,w,c
  4161  003938  A4D8               	btfss	status,2,c
  4162  00393A  D003               	goto	l9360
  4163  00393C  EC39  F01D         	call	_Turn_Off_Fan	;wreg free
  4164  003940  D003               	goto	l37
  4165  003942                     l9360:
  4166                           
  4167                           ;Fan_Support.c: 71: else Turn_On_Fan();
  4168  003942  ECD4  F01C         	call	_Turn_On_Fan	;wreg free
  4169  003946  D000               	goto	l37
  4170  003948                     l37:
  4171  003948  0012               	return		;funcret
  4172  00394A                     __end_of_Toggle_Heater:
  4173                           	opt stack 0
  4174                           tblptru	equ	0xFF8
  4175                           tblptrh	equ	0xFF7
  4176                           tblptrl	equ	0xFF6
  4177                           tablat	equ	0xFF5
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           postdec1	equ	0xFE5
  4181                           fsr1l	equ	0xFE1
  4182                           status	equ	0xFD8
  4183                           
  4184 ;; *************** function _Turn_On_Fan *****************
  4185 ;; Defined at:
  4186 ;;		line 94 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Fan_Support.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;		None
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;		None
  4191 ;; Return value:  Size  Location     Type
  4192 ;;		None               void
  4193 ;; Registers used:
  4194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4195 ;; Tracked objects:
  4196 ;;		On entry : 0/0
  4197 ;;		On exit  : 0/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;Total ram usage:        0 bytes
  4205 ;; Hardware stack levels used:    1
  4206 ;; Hardware stack levels required when called:    6
  4207 ;; This function calls:
  4208 ;;		_do_update_pwm
  4209 ;;		_printf
  4210 ;; This function is called by:
  4211 ;;		_Toggle_Heater
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text7
  4216  0039A8                     __ptext7:
  4217                           	opt stack 0
  4218  0039A8                     _Turn_On_Fan:
  4219                           	opt stack 23
  4220                           
  4221                           ;Fan_Support.c: 97: printf("Fan Turned On\n");
  4222                           
  4223                           ;incstack = 0
  4224  0039A8  0E60               	movlw	low STR_3
  4225  0039AA  6E1D               	movwf	printf@f,c
  4226  0039AC  0EFF               	movlw	high STR_3
  4227  0039AE  6E1E               	movwf	printf@f+1,c
  4228  0039B0  ECE7  F004         	call	_printf	;wreg free
  4229                           
  4230                           ;Fan_Support.c: 98: HEATER = 1;
  4231  0039B4  0E01               	movlw	1
  4232  0039B6  6E54               	movwf	_HEATER,c
  4233                           
  4234                           ;Fan_Support.c: 99: do_update_pwm(duty_cycle);
  4235  0039B8  505E               	movf	_duty_cycle,w,c
  4236  0039BA  EC43  F012         	call	_do_update_pwm
  4237                           
  4238                           ;Fan_Support.c: 100: PORTAbits.RA4 = 1;
  4239  0039BE  8880               	bsf	3968,4,c	;volatile
  4240                           
  4241                           ;Fan_Support.c: 101: PORTDbits.RD3 = 1;
  4242  0039C0  8683               	bsf	3971,3,c	;volatile
  4243  0039C2  0012               	return		;funcret
  4244  0039C4                     __end_of_Turn_On_Fan:
  4245                           	opt stack 0
  4246                           tblptru	equ	0xFF8
  4247                           tblptrh	equ	0xFF7
  4248                           tblptrl	equ	0xFF6
  4249                           tablat	equ	0xFF5
  4250                           postinc0	equ	0xFEE
  4251                           wreg	equ	0xFE8
  4252                           postdec1	equ	0xFE5
  4253                           fsr1l	equ	0xFE1
  4254                           status	equ	0xFD8
  4255                           
  4256 ;; *************** function _Test_Alarm *****************
  4257 ;; Defined at:
  4258 ;;		line 202 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Main.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;		None
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  alarm_case      2   33[COMRAM] int 
  4263 ;; Return value:  Size  Location     Type
  4264 ;;		None               void
  4265 ;; Registers used:
  4266 ;;		wreg, status,2, status,0, cstack
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4276 ;;Total ram usage:        4 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    9
  4279 ;; This function calls:
  4280 ;;		_Activate_Buzzer
  4281 ;;		_DS3231_Turn_Off_Alarm
  4282 ;;		_DS3231_Turn_On_Alarm
  4283 ;;		_Deactivate_Buzzer
  4284 ;;		_Set_RGB_Color
  4285 ;;		___ftge
  4286 ;; This function is called by:
  4287 ;;		_main
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text8
  4292  00174E                     __ptext8:
  4293                           	opt stack 0
  4294  00174E                     _Test_Alarm:
  4295                           	opt stack 21
  4296                           
  4297                           ;Main.c: 205: int alarm_case;
  4298                           ;Main.c: 207: if (PORTAbits.RA5 == 0)
  4299                           
  4300                           ;incstack = 0
  4301  00174E  BA80               	btfsc	3968,5,c	;volatile
  4302  001750  D006               	goto	l9442
  4303                           
  4304                           ;Main.c: 208: {
  4305                           ;Main.c: 209: MATCHED = 1;
  4306  001752  0E00               	movlw	0
  4307  001754  0100               	movlb	0	; () banked
  4308  001756  6FE4               	movwf	(_MATCHED+1)& (0+255),b
  4309  001758  0E01               	movlw	1
  4310  00175A  6FE3               	movwf	_MATCHED& (0+255),b
  4311  00175C  D000               	goto	l9442
  4312  00175E                     l9442:
  4313                           
  4314                           ;Main.c: 210: }
  4315                           ;Main.c: 213: if (ALARMEN == 1 && alarm_mode == 0)
  4316  00175E  0100               	movlb	0	; () banked
  4317  001760  05E1               	decf	_ALARMEN& (0+255),w,b
  4318  001762  0100               	movlb	0	; () banked
  4319  001764  11E2               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4320  001766  A4D8               	btfss	status,2,c
  4321  001768  D00A               	goto	l9448
  4322                           
  4323                           ; BSR set to: 0
  4324  00176A  0100               	movlb	0	; () banked
  4325  00176C  51E5               	movf	_alarm_mode& (0+255),w,b
  4326  00176E  0100               	movlb	0	; () banked
  4327  001770  11E6               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4328  001772  A4D8               	btfss	status,2,c
  4329  001774  D004               	goto	l9448
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;Main.c: 214: {
  4333                           ;Main.c: 215: alarm_case = 0;
  4334  001776  0E00               	movlw	0
  4335  001778  6E23               	movwf	Test_Alarm@alarm_case+1,c
  4336  00177A  0E00               	movlw	0
  4337  00177C  D01F               	goto	L5
  4338  00177E                     l9448:
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;Main.c: 217: else if (ALARMEN == 0 && alarm_mode == 1)
  4342  00177E  0100               	movlb	0	; () banked
  4343  001780  51E1               	movf	_ALARMEN& (0+255),w,b
  4344  001782  0100               	movlb	0	; () banked
  4345  001784  11E2               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4346  001786  A4D8               	btfss	status,2,c
  4347  001788  D00A               	goto	l9454
  4348                           
  4349                           ; BSR set to: 0
  4350  00178A  0100               	movlb	0	; () banked
  4351  00178C  05E5               	decf	_alarm_mode& (0+255),w,b
  4352  00178E  0100               	movlb	0	; () banked
  4353  001790  11E6               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4354  001792  A4D8               	btfss	status,2,c
  4355  001794  D004               	goto	l9454
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;Main.c: 218: {
  4359                           ;Main.c: 219: alarm_case = 1;
  4360  001796  0E00               	movlw	0
  4361  001798  6E23               	movwf	Test_Alarm@alarm_case+1,c
  4362  00179A  0E01               	movlw	1
  4363  00179C  D00F               	goto	L5
  4364  00179E                     l9454:
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;Main.c: 221: else if (ALARMEN == 1 && alarm_mode == 1)
  4368  00179E  0100               	movlb	0	; () banked
  4369  0017A0  05E1               	decf	_ALARMEN& (0+255),w,b
  4370  0017A2  0100               	movlb	0	; () banked
  4371  0017A4  11E2               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4372  0017A6  A4D8               	btfss	status,2,c
  4373  0017A8  D071               	goto	l9502
  4374                           
  4375                           ; BSR set to: 0
  4376  0017AA  0100               	movlb	0	; () banked
  4377  0017AC  05E5               	decf	_alarm_mode& (0+255),w,b
  4378  0017AE  0100               	movlb	0	; () banked
  4379  0017B0  11E6               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4380  0017B2  A4D8               	btfss	status,2,c
  4381  0017B4  D06B               	goto	l9502
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;Main.c: 222: {
  4385                           ;Main.c: 223: alarm_case = 2;
  4386  0017B6  0E00               	movlw	0
  4387  0017B8  6E23               	movwf	Test_Alarm@alarm_case+1,c
  4388  0017BA  0E02               	movlw	2
  4389  0017BC                     L5:
  4390  0017BC  6E22               	movwf	Test_Alarm@alarm_case,c
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;Main.c: 224: }
  4394                           ;Main.c: 228: switch (alarm_case)
  4395                           
  4396                           ; BSR set to: 0
  4397                           
  4398                           ; BSR set to: 0
  4399  0017BE  D066               	goto	l9502
  4400  0017C0                     l9460:
  4401                           
  4402                           ;Main.c: 231: alarm_mode = 1;
  4403  0017C0  0E00               	movlw	0
  4404  0017C2  0100               	movlb	0	; () banked
  4405  0017C4  6FE6               	movwf	(_alarm_mode+1)& (0+255),b
  4406  0017C6  0E01               	movlw	1
  4407  0017C8  6FE5               	movwf	_alarm_mode& (0+255),b
  4408                           
  4409                           ;Main.c: 232: break;
  4410  0017CA  D073               	goto	l298
  4411  0017CC                     l9462:
  4412                           
  4413                           ;Main.c: 235: alarm_mode = 0;
  4414  0017CC  0E00               	movlw	0
  4415  0017CE  0100               	movlb	0	; () banked
  4416  0017D0  6FE6               	movwf	(_alarm_mode+1)& (0+255),b
  4417  0017D2  0E00               	movlw	0
  4418  0017D4  6FE5               	movwf	_alarm_mode& (0+255),b
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;Main.c: 236: Deactivate_Buzzer();
  4422  0017D6  EC05  F01E         	call	_Deactivate_Buzzer	;wreg free
  4423                           
  4424                           ;Main.c: 237: DS3231_Turn_Off_Alarm();
  4425  0017DA  EC77  F019         	call	_DS3231_Turn_Off_Alarm	;wreg free
  4426                           
  4427                           ;Main.c: 238: MATCHED = 0;
  4428  0017DE  0E00               	movlw	0
  4429  0017E0  0100               	movlb	0	; () banked
  4430  0017E2  6FE4               	movwf	(_MATCHED+1)& (0+255),b
  4431  0017E4  0E00               	movlw	0
  4432  0017E6  6FE3               	movwf	_MATCHED& (0+255),b
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;Main.c: 239: color = 0;
  4436  0017E8  0E00               	movlw	0
  4437  0017EA  0100               	movlb	0	; () banked
  4438  0017EC  6FE8               	movwf	(_color+1)& (0+255),b
  4439  0017EE  0E00               	movlw	0
  4440  0017F0  6FE7               	movwf	_color& (0+255),b
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;Main.c: 240: Set_RGB_Color(color);
  4444  0017F2  0100               	movlb	0	; () banked
  4445  0017F4  51E7               	movf	_color& (0+255),w,b
  4446  0017F6  EC8B  F017         	call	_Set_RGB_Color
  4447                           
  4448                           ;Main.c: 241: break;
  4449  0017FA  D05B               	goto	l298
  4450  0017FC                     l9474:
  4451                           
  4452                           ;Main.c: 244: if (volt > 3.5)
  4453  0017FC  0E00               	movlw	0
  4454  0017FE  6E11               	movwf	___ftge@ff1,c
  4455  001800  0E60               	movlw	96
  4456  001802  6E12               	movwf	___ftge@ff1+1,c
  4457  001804  0E40               	movlw	64
  4458  001806  6E13               	movwf	___ftge@ff1+2,c
  4459  001808  C0DE  F014         	movff	_volt,___ftge@ff2
  4460  00180C  C0DF  F015         	movff	_volt+1,___ftge@ff2+1
  4461  001810  C0E0  F016         	movff	_volt+2,___ftge@ff2+2
  4462  001814  ECDC  F014         	call	___ftge	;wreg free
  4463  001818  B0D8               	btfsc	status,0,c
  4464  00181A  D013               	goto	l9484
  4465                           
  4466                           ;Main.c: 245: {
  4467                           ;Main.c: 246: MATCHED = 0;
  4468  00181C  0E00               	movlw	0
  4469  00181E  0100               	movlb	0	; () banked
  4470  001820  6FE4               	movwf	(_MATCHED+1)& (0+255),b
  4471  001822  0E00               	movlw	0
  4472  001824  6FE3               	movwf	_MATCHED& (0+255),b
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;Main.c: 247: DS3231_Turn_Off_Alarm();
  4476  001826  EC77  F019         	call	_DS3231_Turn_Off_Alarm	;wreg free
  4477                           
  4478                           ;Main.c: 248: color = 0;
  4479  00182A  0E00               	movlw	0
  4480  00182C  0100               	movlb	0	; () banked
  4481  00182E  6FE8               	movwf	(_color+1)& (0+255),b
  4482  001830  0E00               	movlw	0
  4483  001832  6FE7               	movwf	_color& (0+255),b
  4484                           
  4485                           ;Main.c: 249: Set_RGB_Color(color);
  4486  001834  0100               	movlb	0	; () banked
  4487  001836  51E7               	movf	_color& (0+255),w,b
  4488  001838  EC8B  F017         	call	_Set_RGB_Color
  4489                           
  4490                           ;Main.c: 250: Deactivate_Buzzer();
  4491  00183C  EC05  F01E         	call	_Deactivate_Buzzer	;wreg free
  4492                           
  4493                           ;Main.c: 251: }
  4494  001840  D038               	goto	l298
  4495  001842                     l9484:
  4496                           
  4497                           ;Main.c: 252: else if (MATCHED == 1)
  4498  001842  0100               	movlb	0	; () banked
  4499  001844  05E3               	decf	_MATCHED& (0+255),w,b
  4500  001846  0100               	movlb	0	; () banked
  4501  001848  11E4               	iorwf	(_MATCHED+1)& (0+255),w,b
  4502  00184A  A4D8               	btfss	status,2,c
  4503  00184C  D01C               	goto	l9498
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;Main.c: 253: {
  4507                           ;Main.c: 254: DS3231_Turn_On_Alarm();
  4508  00184E  EC4E  F019         	call	_DS3231_Turn_On_Alarm	;wreg free
  4509                           
  4510                           ;Main.c: 255: Activate_Buzzer();
  4511  001852  EC6D  F01D         	call	_Activate_Buzzer	;wreg free
  4512                           
  4513                           ;Main.c: 256: Set_RGB_Color(color);
  4514  001856  0100               	movlb	0	; () banked
  4515  001858  51E7               	movf	_color& (0+255),w,b
  4516  00185A  EC8B  F017         	call	_Set_RGB_Color
  4517                           
  4518                           ;Main.c: 257: color++;
  4519  00185E  0100               	movlb	0	; () banked
  4520  001860  4BE7               	infsnz	_color& (0+255),f,b
  4521  001862  2BE8               	incf	(_color+1)& (0+255),f,b
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;Main.c: 258: if (color > 7)
  4525  001864  0100               	movlb	0	; () banked
  4526  001866  BFE8               	btfsc	(_color+1)& (0+255),7,b
  4527  001868  D024               	goto	l298
  4528  00186A  0100               	movlb	0	; () banked
  4529  00186C  51E8               	movf	(_color+1)& (0+255),w,b
  4530  00186E  E105               	bnz	u6610
  4531  001870  0E08               	movlw	8
  4532  001872  0100               	movlb	0	; () banked
  4533  001874  5DE7               	subwf	_color& (0+255),w,b
  4534  001876  A0D8               	btfss	status,0,c
  4535  001878  D01C               	goto	l298
  4536  00187A                     u6610:
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;Main.c: 259: color = 0;
  4540  00187A  0E00               	movlw	0
  4541  00187C  0100               	movlb	0	; () banked
  4542  00187E  6FE8               	movwf	(_color+1)& (0+255),b
  4543  001880  0E00               	movlw	0
  4544  001882  6FE7               	movwf	_color& (0+255),b
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;Main.c: 260: }
  4548  001884  D016               	goto	l298
  4549  001886                     l9498:
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;Main.c: 261: else DS3231_Turn_Off_Alarm();
  4553  001886  EC77  F019         	call	_DS3231_Turn_Off_Alarm	;wreg free
  4554                           
  4555                           ;Main.c: 266: }
  4556                           
  4557                           ;Main.c: 265: break;
  4558                           
  4559                           ;Main.c: 264: default:
  4560                           
  4561                           ;Main.c: 262: break;
  4562  00188A  D013               	goto	l298
  4563  00188C                     l9502:
  4564  00188C  C022  F020         	movff	Test_Alarm@alarm_case,??_Test_Alarm
  4565  001890  C023  F021         	movff	Test_Alarm@alarm_case+1,??_Test_Alarm+1
  4566                           
  4567                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4568                           ; Switch size 1, requested type "space"
  4569                           ; Number of cases is 1, Range of values is 0 to 0
  4570                           ; switch strategies available:
  4571                           ; Name         Instructions Cycles
  4572                           ; simple_byte            4     3 (average)
  4573                           ;	Chosen strategy is simple_byte
  4574  001894  5021               	movf	??_Test_Alarm+1,w,c
  4575  001896  0A00               	xorlw	0	; case 0
  4576  001898  A4D8               	btfss	status,2,c
  4577  00189A  D00B               	goto	l298
  4578                           
  4579                           ; Switch size 1, requested type "space"
  4580                           ; Number of cases is 3, Range of values is 0 to 2
  4581                           ; switch strategies available:
  4582                           ; Name         Instructions Cycles
  4583                           ; simple_byte           10     6 (average)
  4584                           ;	Chosen strategy is simple_byte
  4585  00189C  5020               	movf	??_Test_Alarm,w,c
  4586  00189E  0A00               	xorlw	0	; case 0
  4587  0018A0  B4D8               	btfsc	status,2,c
  4588  0018A2  D78E               	goto	l9460
  4589  0018A4  0A01               	xorlw	1	; case 1
  4590  0018A6  B4D8               	btfsc	status,2,c
  4591  0018A8  D791               	goto	l9462
  4592  0018AA  0A03               	xorlw	3	; case 2
  4593  0018AC  B4D8               	btfsc	status,2,c
  4594  0018AE  D7A6               	goto	l9474
  4595  0018B0  D000               	goto	l298
  4596  0018B2                     l298:
  4597  0018B2  0012               	return		;funcret
  4598  0018B4                     __end_of_Test_Alarm:
  4599                           	opt stack 0
  4600                           tblptru	equ	0xFF8
  4601                           tblptrh	equ	0xFF7
  4602                           tblptrl	equ	0xFF6
  4603                           tablat	equ	0xFF5
  4604                           postinc0	equ	0xFEE
  4605                           wreg	equ	0xFE8
  4606                           postdec1	equ	0xFE5
  4607                           fsr1l	equ	0xFE1
  4608                           status	equ	0xFD8
  4609                           
  4610 ;; *************** function ___ftge *****************
  4611 ;; Defined at:
  4612 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;  ff1             3   16[COMRAM] float 
  4615 ;;  ff2             3   19[COMRAM] float 
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;		None               void
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4627 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;Total ram usage:        9 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    3
  4634 ;; This function calls:
  4635 ;;		Nothing
  4636 ;; This function is called by:
  4637 ;;		_Test_Alarm
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           	psect	text9
  4642  0029B8                     __ptext9:
  4643                           	opt stack 0
  4644  0029B8                     ___ftge:
  4645                           	opt stack 26
  4646                           
  4647                           ;incstack = 0
  4648  0029B8  AE13               	btfss	___ftge@ff1+2,7,c
  4649  0029BA  D017               	goto	l6708
  4650  0029BC  C011  F017         	movff	___ftge@ff1,??___ftge
  4651  0029C0  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
  4652  0029C4  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
  4653  0029C8  1E17               	comf	??___ftge,f,c
  4654  0029CA  1E18               	comf	??___ftge+1,f,c
  4655  0029CC  1E19               	comf	??___ftge+2,f,c
  4656  0029CE  2A17               	incf	??___ftge,f,c
  4657  0029D0  0E00               	movlw	0
  4658  0029D2  2218               	addwfc	??___ftge+1,f,c
  4659  0029D4  2219               	addwfc	??___ftge+2,f,c
  4660  0029D6  0E00               	movlw	0
  4661  0029D8  2417               	addwf	??___ftge,w,c
  4662  0029DA  6E11               	movwf	___ftge@ff1,c
  4663  0029DC  0E00               	movlw	0
  4664  0029DE  2018               	addwfc	??___ftge+1,w,c
  4665  0029E0  6E12               	movwf	___ftge@ff1+1,c
  4666  0029E2  0E80               	movlw	128
  4667  0029E4  2019               	addwfc	??___ftge+2,w,c
  4668  0029E6  6E13               	movwf	___ftge@ff1+2,c
  4669  0029E8  D000               	goto	l6708
  4670  0029EA                     l6708:
  4671  0029EA  AE16               	btfss	___ftge@ff2+2,7,c
  4672  0029EC  D017               	goto	l6712
  4673  0029EE  C014  F017         	movff	___ftge@ff2,??___ftge
  4674  0029F2  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
  4675  0029F6  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
  4676  0029FA  1E17               	comf	??___ftge,f,c
  4677  0029FC  1E18               	comf	??___ftge+1,f,c
  4678  0029FE  1E19               	comf	??___ftge+2,f,c
  4679  002A00  2A17               	incf	??___ftge,f,c
  4680  002A02  0E00               	movlw	0
  4681  002A04  2218               	addwfc	??___ftge+1,f,c
  4682  002A06  2219               	addwfc	??___ftge+2,f,c
  4683  002A08  0E00               	movlw	0
  4684  002A0A  2417               	addwf	??___ftge,w,c
  4685  002A0C  6E14               	movwf	___ftge@ff2,c
  4686  002A0E  0E00               	movlw	0
  4687  002A10  2018               	addwfc	??___ftge+1,w,c
  4688  002A12  6E15               	movwf	___ftge@ff2+1,c
  4689  002A14  0E80               	movlw	128
  4690  002A16  2019               	addwfc	??___ftge+2,w,c
  4691  002A18  6E16               	movwf	___ftge@ff2+2,c
  4692  002A1A  D000               	goto	l6712
  4693  002A1C                     l6712:
  4694  002A1C  0E00               	movlw	0
  4695  002A1E  1A11               	xorwf	___ftge@ff1,f,c
  4696  002A20  0E00               	movlw	0
  4697  002A22  1A12               	xorwf	___ftge@ff1+1,f,c
  4698  002A24  0E80               	movlw	128
  4699  002A26  1A13               	xorwf	___ftge@ff1+2,f,c
  4700  002A28  0E00               	movlw	0
  4701  002A2A  1A14               	xorwf	___ftge@ff2,f,c
  4702  002A2C  0E00               	movlw	0
  4703  002A2E  1A15               	xorwf	___ftge@ff2+1,f,c
  4704  002A30  0E80               	movlw	128
  4705  002A32  1A16               	xorwf	___ftge@ff2+2,f,c
  4706  002A34  5014               	movf	___ftge@ff2,w,c
  4707  002A36  5C11               	subwf	___ftge@ff1,w,c
  4708  002A38  5015               	movf	___ftge@ff2+1,w,c
  4709  002A3A  5812               	subwfb	___ftge@ff1+1,w,c
  4710  002A3C  5016               	movf	___ftge@ff2+2,w,c
  4711  002A3E  5813               	subwfb	___ftge@ff1+2,w,c
  4712  002A40  B0D8               	btfsc	status,0,c
  4713  002A42  D002               	goto	l6718
  4714  002A44  90D8               	bcf	status,0,c
  4715  002A46  D002               	goto	l1859
  4716  002A48                     l6718:
  4717  002A48  80D8               	bsf	status,0,c
  4718  002A4A  D000               	goto	l1859
  4719  002A4C                     l1859:
  4720  002A4C  0012               	return		;funcret
  4721  002A4E                     __end_of___ftge:
  4722                           	opt stack 0
  4723                           tblptru	equ	0xFF8
  4724                           tblptrh	equ	0xFF7
  4725                           tblptrl	equ	0xFF6
  4726                           tablat	equ	0xFF5
  4727                           postinc0	equ	0xFEE
  4728                           wreg	equ	0xFE8
  4729                           postdec1	equ	0xFE5
  4730                           fsr1l	equ	0xFE1
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _Set_RGB_Color *****************
  4734 ;; Defined at:
  4735 ;;		line 143 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  color           1    wreg     unsigned char 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  color           1   16[COMRAM] unsigned char 
  4740 ;; Return value:  Size  Location     Type
  4741 ;;		None               void
  4742 ;; Registers used:
  4743 ;;		wreg, status,2, status,0
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;Total ram usage:        1 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    3
  4756 ;; This function calls:
  4757 ;;		Nothing
  4758 ;; This function is called by:
  4759 ;;		_Test_Alarm
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text10
  4764  002F16                     __ptext10:
  4765                           	opt stack 0
  4766  002F16                     _Set_RGB_Color:
  4767                           	opt stack 26
  4768                           
  4769                           ;incstack = 0
  4770                           ;Set_RGB_Color@color stored from wreg
  4771  002F16  6E11               	movwf	Set_RGB_Color@color,c
  4772                           
  4773                           ;utils.c: 146: if (color == 0)
  4774  002F18  5011               	movf	Set_RGB_Color@color,w,c
  4775  002F1A  A4D8               	btfss	status,2,c
  4776  002F1C  D002               	goto	l6394
  4777                           
  4778                           ;utils.c: 147: {
  4779                           ;utils.c: 148: PORTDbits.RD4 = 0;
  4780  002F1E  9883               	bcf	3971,4,c	;volatile
  4781  002F20  D004               	goto	L6
  4782  002F22                     l6394:
  4783                           
  4784                           ;utils.c: 152: else if (color == 1)
  4785  002F22  0411               	decf	Set_RGB_Color@color,w,c
  4786  002F24  A4D8               	btfss	status,2,c
  4787  002F26  D003               	goto	l6398
  4788                           
  4789                           ;utils.c: 153: {
  4790                           ;utils.c: 154: PORTDbits.RD4 = 1;
  4791  002F28  8883               	bsf	3971,4,c	;volatile
  4792  002F2A                     L6:
  4793                           
  4794                           ;utils.c: 155: PORTDbits.RD5 = 0;
  4795  002F2A  9A83               	bcf	3971,5,c	;volatile
  4796  002F2C  D006               	goto	L7
  4797  002F2E                     l6398:
  4798                           
  4799                           ;utils.c: 158: else if (color == 2)
  4800  002F2E  0E02               	movlw	2
  4801  002F30  1811               	xorwf	Set_RGB_Color@color,w,c
  4802  002F32  A4D8               	btfss	status,2,c
  4803  002F34  D004               	goto	l6402
  4804                           
  4805                           ;utils.c: 159: {
  4806                           ;utils.c: 160: PORTDbits.RD4 = 0;
  4807  002F36  9883               	bcf	3971,4,c	;volatile
  4808  002F38  D007               	goto	L8
  4809  002F3A                     L7:
  4810                           
  4811                           ;utils.c: 162: PORTDbits.RD6 = 0;
  4812  002F3A  9C83               	bcf	3971,6,c	;volatile
  4813                           
  4814                           ;utils.c: 163: }
  4815  002F3C  D024               	goto	l1142
  4816  002F3E                     l6402:
  4817                           
  4818                           ;utils.c: 164: else if (color == 3)
  4819  002F3E  0E03               	movlw	3
  4820  002F40  1811               	xorwf	Set_RGB_Color@color,w,c
  4821  002F42  A4D8               	btfss	status,2,c
  4822  002F44  D003               	goto	l6406
  4823                           
  4824                           ;utils.c: 165: {
  4825                           ;utils.c: 166: PORTDbits.RD4 = 1;
  4826  002F46  8883               	bsf	3971,4,c	;volatile
  4827  002F48                     L8:
  4828                           
  4829                           ;utils.c: 167: PORTDbits.RD5 = 1;
  4830  002F48  8A83               	bsf	3971,5,c	;volatile
  4831  002F4A  D7F7               	goto	L7
  4832  002F4C                     l6406:
  4833                           
  4834                           ;utils.c: 170: else if (color == 4)
  4835  002F4C  0E04               	movlw	4
  4836  002F4E  1811               	xorwf	Set_RGB_Color@color,w,c
  4837  002F50  A4D8               	btfss	status,2,c
  4838  002F52  D002               	goto	l6410
  4839                           
  4840                           ;utils.c: 171: {
  4841                           ;utils.c: 172: PORTDbits.RD4 = 0;
  4842  002F54  9883               	bcf	3971,4,c	;volatile
  4843  002F56  D005               	goto	L9
  4844  002F58                     l6410:
  4845                           
  4846                           ;utils.c: 176: else if (color == 5)
  4847  002F58  0E05               	movlw	5
  4848  002F5A  1811               	xorwf	Set_RGB_Color@color,w,c
  4849  002F5C  A4D8               	btfss	status,2,c
  4850  002F5E  D003               	goto	l6414
  4851                           
  4852                           ;utils.c: 177: {
  4853                           ;utils.c: 178: PORTDbits.RD4 = 1;
  4854  002F60  8883               	bsf	3971,4,c	;volatile
  4855  002F62                     L9:
  4856                           
  4857                           ;utils.c: 179: PORTDbits.RD5 = 0;
  4858  002F62  9A83               	bcf	3971,5,c	;volatile
  4859  002F64  D006               	goto	L10
  4860  002F66                     l6414:
  4861                           
  4862                           ;utils.c: 182: else if (color == 6)
  4863  002F66  0E06               	movlw	6
  4864  002F68  1811               	xorwf	Set_RGB_Color@color,w,c
  4865  002F6A  A4D8               	btfss	status,2,c
  4866  002F6C  D004               	goto	l6418
  4867                           
  4868                           ;utils.c: 183: {
  4869                           ;utils.c: 184: PORTDbits.RD4 = 0;
  4870  002F6E  9883               	bcf	3971,4,c	;volatile
  4871  002F70  D007               	goto	L11
  4872  002F72                     L10:
  4873                           
  4874                           ;utils.c: 186: PORTDbits.RD6 = 1;
  4875  002F72  8C83               	bsf	3971,6,c	;volatile
  4876                           
  4877                           ;utils.c: 187: }
  4878  002F74  D008               	goto	l1142
  4879  002F76                     l6418:
  4880                           
  4881                           ;utils.c: 188: else if (color == 7)
  4882  002F76  0E07               	movlw	7
  4883  002F78  1811               	xorwf	Set_RGB_Color@color,w,c
  4884  002F7A  A4D8               	btfss	status,2,c
  4885  002F7C  D004               	goto	l1142
  4886                           
  4887                           ;utils.c: 189: {
  4888                           ;utils.c: 190: PORTDbits.RD4 = 1;
  4889  002F7E  8883               	bsf	3971,4,c	;volatile
  4890  002F80                     L11:
  4891                           
  4892                           ;utils.c: 191: PORTDbits.RD5 = 1;
  4893  002F80  8A83               	bsf	3971,5,c	;volatile
  4894  002F82  D7F7               	goto	L10
  4895                           
  4896                           ;utils.c: 192: PORTDbits.RD6 = 1;
  4897  002F84  D000               	goto	l1142
  4898  002F86                     l1142:
  4899  002F86  0012               	return		;funcret
  4900  002F88                     __end_of_Set_RGB_Color:
  4901                           	opt stack 0
  4902                           tblptru	equ	0xFF8
  4903                           tblptrh	equ	0xFF7
  4904                           tblptrl	equ	0xFF6
  4905                           tablat	equ	0xFF5
  4906                           postinc0	equ	0xFEE
  4907                           wreg	equ	0xFE8
  4908                           postdec1	equ	0xFE5
  4909                           fsr1l	equ	0xFE1
  4910                           status	equ	0xFD8
  4911                           
  4912 ;; *************** function _Deactivate_Buzzer *****************
  4913 ;; Defined at:
  4914 ;;		line 124 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;		None
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;		None
  4919 ;; Return value:  Size  Location     Type
  4920 ;;		None               void
  4921 ;; Registers used:
  4922 ;;		wreg, status,2
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;Total ram usage:        0 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    3
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_Test_Alarm
  4939 ;;		_Do_Beep
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text11
  4944  003C0A                     __ptext11:
  4945                           	opt stack 0
  4946  003C0A                     _Deactivate_Buzzer:
  4947                           	opt stack 26
  4948                           
  4949                           ;utils.c: 126: CCP2CON = 0x0;
  4950                           
  4951                           ;incstack = 0
  4952  003C0A  0E00               	movlw	0
  4953  003C0C  6EBA               	movwf	4026,c	;volatile
  4954                           
  4955                           ;utils.c: 127: PORTBbits.RB3 = 0;
  4956  003C0E  9681               	bcf	3969,3,c	;volatile
  4957  003C10  0012               	return		;funcret
  4958  003C12                     __end_of_Deactivate_Buzzer:
  4959                           	opt stack 0
  4960                           tblptru	equ	0xFF8
  4961                           tblptrh	equ	0xFF7
  4962                           tblptrl	equ	0xFF6
  4963                           tablat	equ	0xFF5
  4964                           postinc0	equ	0xFEE
  4965                           wreg	equ	0xFE8
  4966                           postdec1	equ	0xFE5
  4967                           fsr1l	equ	0xFE1
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function _DS3231_Turn_On_Alarm *****************
  4971 ;; Defined at:
  4972 ;;		line 210 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Support.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  Device          1   30[COMRAM] unsigned char 
  4977 ;;  control_F       1   29[COMRAM] unsigned char 
  4978 ;;  control_E       1   28[COMRAM] unsigned char 
  4979 ;;  Address_F       1   27[COMRAM] unsigned char 
  4980 ;;  Address_E       1   26[COMRAM] unsigned char 
  4981 ;; Return value:  Size  Location     Type
  4982 ;;		None               void
  4983 ;; Registers used:
  4984 ;;		wreg, status,2, status,0, cstack
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4991 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;Total ram usage:        5 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    8
  4997 ;; This function calls:
  4998 ;;		_DS3231_Init
  4999 ;;		_I2C_Write_Address_Read_One_Byte
  5000 ;;		_I2C_Write_Address_Write_One_Byte
  5001 ;; This function is called by:
  5002 ;;		_Test_Alarm
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text12
  5007  00329C                     __ptext12:
  5008                           	opt stack 0
  5009  00329C                     _DS3231_Turn_On_Alarm:
  5010                           	opt stack 21
  5011                           
  5012                           ;I2C_Support.c: 212: char Device = 0x68;
  5013                           
  5014                           ;incstack = 0
  5015  00329C  0E68               	movlw	104
  5016  00329E  6E1F               	movwf	DS3231_Turn_On_Alarm@Device,c
  5017                           
  5018                           ;I2C_Support.c: 213: char Address_E = 0x0E;
  5019  0032A0  0E0E               	movlw	14
  5020  0032A2  6E1B               	movwf	DS3231_Turn_On_Alarm@Address_E,c
  5021                           
  5022                           ;I2C_Support.c: 214: char Address_F = 0x0F;
  5023  0032A4  0E0F               	movlw	15
  5024  0032A6  6E1C               	movwf	DS3231_Turn_On_Alarm@Address_F,c
  5025                           
  5026                           ;I2C_Support.c: 215: char control_E;
  5027                           ;I2C_Support.c: 216: char control_F;
  5028                           ;I2C_Support.c: 218: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  5029  0032A8  C01B  F014         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  5030  0032AC  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  5031  0032AE  EC88  F01B         	call	_I2C_Write_Address_Read_One_Byte
  5032  0032B2  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  5033                           
  5034                           ;I2C_Support.c: 219: control_E = control_E | 0x01;
  5035  0032B4  501D               	movf	DS3231_Turn_On_Alarm@control_E,w,c
  5036  0032B6  0901               	iorlw	1
  5037  0032B8  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  5038                           
  5039                           ;I2C_Support.c: 220: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  5040  0032BA  C01B  F013         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  5041  0032BE  C01D  F014         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  5042  0032C2  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  5043  0032C4  ECA5  F01C         	call	_I2C_Write_Address_Write_One_Byte
  5044                           
  5045                           ;I2C_Support.c: 222: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  5046  0032C8  C01C  F014         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  5047  0032CC  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  5048  0032CE  EC88  F01B         	call	_I2C_Write_Address_Read_One_Byte
  5049  0032D2  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  5050                           
  5051                           ;I2C_Support.c: 223: control_F = control_F & 0xFE;
  5052  0032D4  501E               	movf	DS3231_Turn_On_Alarm@control_F,w,c
  5053  0032D6  0BFE               	andlw	254
  5054  0032D8  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  5055                           
  5056                           ;I2C_Support.c: 224: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  5057  0032DA  C01C  F013         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  5058  0032DE  C01E  F014         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  5059  0032E2  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  5060  0032E4  ECA5  F01C         	call	_I2C_Write_Address_Write_One_Byte
  5061                           
  5062                           ;I2C_Support.c: 225: DS3231_Init();
  5063  0032E8  ECD5  F013         	call	_DS3231_Init	;wreg free
  5064  0032EC  0012               	return		;funcret
  5065  0032EE                     __end_of_DS3231_Turn_On_Alarm:
  5066                           	opt stack 0
  5067                           tblptru	equ	0xFF8
  5068                           tblptrh	equ	0xFF7
  5069                           tblptrl	equ	0xFF6
  5070                           tablat	equ	0xFF5
  5071                           postinc0	equ	0xFEE
  5072                           wreg	equ	0xFE8
  5073                           postdec1	equ	0xFE5
  5074                           fsr1l	equ	0xFE1
  5075                           status	equ	0xFD8
  5076                           
  5077 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  5078 ;; Defined at:
  5079 ;;		line 193 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Support.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;		None
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  Device          1   30[COMRAM] unsigned char 
  5084 ;;  control_F       1   29[COMRAM] unsigned char 
  5085 ;;  control_E       1   28[COMRAM] unsigned char 
  5086 ;;  Address_F       1   27[COMRAM] unsigned char 
  5087 ;;  Address_E       1   26[COMRAM] unsigned char 
  5088 ;; Return value:  Size  Location     Type
  5089 ;;		None               void
  5090 ;; Registers used:
  5091 ;;		wreg, status,2, status,0, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;Total ram usage:        5 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:    8
  5104 ;; This function calls:
  5105 ;;		_DS3231_Init
  5106 ;;		_I2C_Write_Address_Read_One_Byte
  5107 ;;		_I2C_Write_Address_Write_One_Byte
  5108 ;; This function is called by:
  5109 ;;		_main
  5110 ;;		_Test_Alarm
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text13
  5115  0032EE                     __ptext13:
  5116                           	opt stack 0
  5117  0032EE                     _DS3231_Turn_Off_Alarm:
  5118                           	opt stack 21
  5119                           
  5120                           ;I2C_Support.c: 195: char Device = 0x68;
  5121                           
  5122                           ;incstack = 0
  5123  0032EE  0E68               	movlw	104
  5124  0032F0  6E1F               	movwf	DS3231_Turn_Off_Alarm@Device,c
  5125                           
  5126                           ;I2C_Support.c: 196: char Address_E = 0x0E;
  5127  0032F2  0E0E               	movlw	14
  5128  0032F4  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
  5129                           
  5130                           ;I2C_Support.c: 197: char Address_F = 0x0F;
  5131  0032F6  0E0F               	movlw	15
  5132  0032F8  6E1C               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
  5133                           
  5134                           ;I2C_Support.c: 198: char control_E;
  5135                           ;I2C_Support.c: 199: char control_F;
  5136                           ;I2C_Support.c: 201: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  5137  0032FA  C01B  F014         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  5138  0032FE  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5139  003300  EC88  F01B         	call	_I2C_Write_Address_Read_One_Byte
  5140  003304  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  5141                           
  5142                           ;I2C_Support.c: 202: control_E = control_E & 0xFE;
  5143  003306  501D               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
  5144  003308  0BFE               	andlw	254
  5145  00330A  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  5146                           
  5147                           ;I2C_Support.c: 203: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  5148  00330C  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  5149  003310  C01D  F014         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  5150  003314  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5151  003316  ECA5  F01C         	call	_I2C_Write_Address_Write_One_Byte
  5152                           
  5153                           ;I2C_Support.c: 204: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  5154  00331A  C01C  F014         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  5155  00331E  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5156  003320  EC88  F01B         	call	_I2C_Write_Address_Read_One_Byte
  5157  003324  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  5158                           
  5159                           ;I2C_Support.c: 205: control_F = control_F & 0xFE;
  5160  003326  501E               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
  5161  003328  0BFE               	andlw	254
  5162  00332A  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  5163                           
  5164                           ;I2C_Support.c: 206: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  5165  00332C  C01C  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  5166  003330  C01E  F014         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  5167  003334  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5168  003336  ECA5  F01C         	call	_I2C_Write_Address_Write_One_Byte
  5169                           
  5170                           ;I2C_Support.c: 207: DS3231_Init();
  5171  00333A  ECD5  F013         	call	_DS3231_Init	;wreg free
  5172  00333E  0012               	return		;funcret
  5173  003340                     __end_of_DS3231_Turn_Off_Alarm:
  5174                           	opt stack 0
  5175                           tblptru	equ	0xFF8
  5176                           tblptrh	equ	0xFF7
  5177                           tblptrl	equ	0xFF6
  5178                           tablat	equ	0xFF5
  5179                           postinc0	equ	0xFEE
  5180                           wreg	equ	0xFE8
  5181                           postdec1	equ	0xFE5
  5182                           fsr1l	equ	0xFE1
  5183                           status	equ	0xFD8
  5184                           
  5185 ;; *************** function _DS3231_Init *****************
  5186 ;; Defined at:
  5187 ;;		line 132 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Support.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;		None
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  Device          1   25[COMRAM] unsigned char 
  5192 ;;  control_E       1   24[COMRAM] unsigned char 
  5193 ;;  Address_E       1   23[COMRAM] unsigned char 
  5194 ;;  Address_7       1   22[COMRAM] unsigned char 
  5195 ;; Return value:  Size  Location     Type
  5196 ;;		None               void
  5197 ;; Registers used:
  5198 ;;		wreg, status,2, status,0, cstack
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5205 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;Total ram usage:        4 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    7
  5211 ;; This function calls:
  5212 ;;		_I2C_ReStart
  5213 ;;		_I2C_Read
  5214 ;;		_I2C_Start
  5215 ;;		_I2C_Stop
  5216 ;;		_I2C_Write
  5217 ;;		_I2C_Write_Address_Read_One_Byte
  5218 ;;		_I2C_Write_Address_Write_One_Byte
  5219 ;; This function is called by:
  5220 ;;		_DS3231_Turn_Off_Alarm
  5221 ;;		_DS3231_Turn_On_Alarm
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           	psect	text14
  5226  0027AA                     __ptext14:
  5227                           	opt stack 0
  5228  0027AA                     _DS3231_Init:
  5229                           	opt stack 21
  5230                           
  5231                           ;I2C_Support.c: 134: char Device = 0x68;
  5232                           
  5233                           ;incstack = 0
  5234  0027AA  0E68               	movlw	104
  5235  0027AC  6E1A               	movwf	DS3231_Init@Device,c
  5236                           
  5237                           ;I2C_Support.c: 135: char Address_7 = 0x07;
  5238  0027AE  0E07               	movlw	7
  5239  0027B0  6E17               	movwf	DS3231_Init@Address_7,c
  5240                           
  5241                           ;I2C_Support.c: 136: char Address_E = 0x0E;
  5242  0027B2  0E0E               	movlw	14
  5243  0027B4  6E18               	movwf	DS3231_Init@Address_E,c
  5244                           
  5245                           ;I2C_Support.c: 137: char control_E;
  5246                           ;I2C_Support.c: 139: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  5247  0027B6  C018  F014         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
  5248  0027BA  501A               	movf	DS3231_Init@Device,w,c
  5249  0027BC  EC88  F01B         	call	_I2C_Write_Address_Read_One_Byte
  5250  0027C0  6E19               	movwf	DS3231_Init@control_E,c
  5251                           
  5252                           ;I2C_Support.c: 140: control_E = control_E & 0x01;
  5253  0027C2  5019               	movf	DS3231_Init@control_E,w,c
  5254  0027C4  0B01               	andlw	1
  5255  0027C6  6E19               	movwf	DS3231_Init@control_E,c
  5256                           
  5257                           ;I2C_Support.c: 141: control_E = control_E | 0x25;
  5258  0027C8  5019               	movf	DS3231_Init@control_E,w,c
  5259  0027CA  0925               	iorlw	37
  5260  0027CC  6E19               	movwf	DS3231_Init@control_E,c
  5261                           
  5262                           ;I2C_Support.c: 142: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  5263  0027CE  C018  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
  5264  0027D2  C019  F014         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  5265  0027D6  501A               	movf	DS3231_Init@Device,w,c
  5266  0027D8  ECA5  F01C         	call	_I2C_Write_Address_Write_One_Byte
  5267                           
  5268                           ;I2C_Support.c: 143: I2C_Start();
  5269  0027DC  EC9A  F01D         	call	_I2C_Start	;wreg free
  5270                           
  5271                           ;I2C_Support.c: 144: I2C_Write((Device << 1) | 0);
  5272  0027E0  501A               	movf	DS3231_Init@Device,w,c
  5273  0027E2  241A               	addwf	DS3231_Init@Device,w,c
  5274  0027E4  EC0E  F01B         	call	_I2C_Write
  5275                           
  5276                           ;I2C_Support.c: 145: I2C_Write(Address_7);
  5277  0027E8  5017               	movf	DS3231_Init@Address_7,w,c
  5278  0027EA  EC0E  F01B         	call	_I2C_Write
  5279                           
  5280                           ;I2C_Support.c: 146: I2C_ReStart();
  5281  0027EE  EC44  F01D         	call	_I2C_ReStart	;wreg free
  5282                           
  5283                           ;I2C_Support.c: 147: I2C_Write((Device << 1) | 1);
  5284  0027F2  80D8               	bsf	status,0,c
  5285  0027F4  341A               	rlcf	DS3231_Init@Device,w,c
  5286  0027F6  EC0E  F01B         	call	_I2C_Write
  5287                           
  5288                           ;I2C_Support.c: 148: alarm_second = I2C_Read(1);
  5289  0027FA  0E01               	movlw	1
  5290  0027FC  ECAC  F01A         	call	_I2C_Read
  5291  002800  6E5C               	movwf	_alarm_second,c
  5292                           
  5293                           ;I2C_Support.c: 149: alarm_minute = I2C_Read(1);
  5294  002802  0E01               	movlw	1
  5295  002804  ECAC  F01A         	call	_I2C_Read
  5296  002808  6E5B               	movwf	_alarm_minute,c
  5297                           
  5298                           ;I2C_Support.c: 150: alarm_hour = I2C_Read(1);
  5299  00280A  0E01               	movlw	1
  5300  00280C  ECAC  F01A         	call	_I2C_Read
  5301  002810  6E5A               	movwf	_alarm_hour,c
  5302                           
  5303                           ;I2C_Support.c: 151: alarm_date = I2C_Read(0);
  5304  002812  0E00               	movlw	0
  5305  002814  ECAC  F01A         	call	_I2C_Read
  5306  002818  6E59               	movwf	_alarm_date,c
  5307                           
  5308                           ;I2C_Support.c: 153: alarm_second = alarm_second & 0x7f;
  5309  00281A  505C               	movf	_alarm_second,w,c
  5310  00281C  0B7F               	andlw	127
  5311  00281E  6E5C               	movwf	_alarm_second,c
  5312                           
  5313                           ;I2C_Support.c: 154: alarm_minute = alarm_minute & 0x7f;
  5314  002820  505B               	movf	_alarm_minute,w,c
  5315  002822  0B7F               	andlw	127
  5316  002824  6E5B               	movwf	_alarm_minute,c
  5317                           
  5318                           ;I2C_Support.c: 155: alarm_hour = alarm_hour & 0x7f;
  5319  002826  505A               	movf	_alarm_hour,w,c
  5320  002828  0B7F               	andlw	127
  5321  00282A  6E5A               	movwf	_alarm_hour,c
  5322                           
  5323                           ;I2C_Support.c: 156: alarm_date = alarm_date | 0x80;
  5324  00282C  5059               	movf	_alarm_date,w,c
  5325  00282E  0980               	iorlw	128
  5326  002830  6E59               	movwf	_alarm_date,c
  5327                           
  5328                           ;I2C_Support.c: 158: I2C_Start();
  5329  002832  EC9A  F01D         	call	_I2C_Start	;wreg free
  5330                           
  5331                           ;I2C_Support.c: 159: I2C_Write((Device << 1) | 0);
  5332  002836  501A               	movf	DS3231_Init@Device,w,c
  5333  002838  241A               	addwf	DS3231_Init@Device,w,c
  5334  00283A  EC0E  F01B         	call	_I2C_Write
  5335                           
  5336                           ;I2C_Support.c: 160: I2C_Write(Address_7);
  5337  00283E  5017               	movf	DS3231_Init@Address_7,w,c
  5338  002840  EC0E  F01B         	call	_I2C_Write
  5339                           
  5340                           ;I2C_Support.c: 162: I2C_Write(alarm_second);
  5341  002844  505C               	movf	_alarm_second,w,c
  5342  002846  EC0E  F01B         	call	_I2C_Write
  5343                           
  5344                           ;I2C_Support.c: 163: I2C_Write(alarm_minute);
  5345  00284A  505B               	movf	_alarm_minute,w,c
  5346  00284C  EC0E  F01B         	call	_I2C_Write
  5347                           
  5348                           ;I2C_Support.c: 164: I2C_Write(alarm_hour);
  5349  002850  505A               	movf	_alarm_hour,w,c
  5350  002852  EC0E  F01B         	call	_I2C_Write
  5351                           
  5352                           ;I2C_Support.c: 165: I2C_Write(alarm_date);
  5353  002856  5059               	movf	_alarm_date,w,c
  5354  002858  EC0E  F01B         	call	_I2C_Write
  5355                           
  5356                           ;I2C_Support.c: 166: I2C_Stop();
  5357  00285C  EC91  F01D         	call	_I2C_Stop	;wreg free
  5358  002860  0012               	return		;funcret
  5359  002862                     __end_of_DS3231_Init:
  5360                           	opt stack 0
  5361                           tblptru	equ	0xFF8
  5362                           tblptrh	equ	0xFF7
  5363                           tblptrl	equ	0xFF6
  5364                           tablat	equ	0xFF5
  5365                           postinc0	equ	0xFEE
  5366                           wreg	equ	0xFE8
  5367                           postdec1	equ	0xFE5
  5368                           fsr1l	equ	0xFE1
  5369                           status	equ	0xFD8
  5370                           
  5371 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
  5372 ;; Defined at:
  5373 ;;		line 131 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  Device          1    wreg     unsigned char 
  5376 ;;  Address         1   18[COMRAM] unsigned char 
  5377 ;;  Data_Out        1   19[COMRAM] unsigned char 
  5378 ;; Auto vars:     Size  Location     Type
  5379 ;;  Device          1   20[COMRAM] unsigned char 
  5380 ;; Return value:  Size  Location     Type
  5381 ;;		None               void
  5382 ;; Registers used:
  5383 ;;		wreg, status,2, status,0, cstack
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5389 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5392 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5393 ;;Total ram usage:        3 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    5
  5396 ;; This function calls:
  5397 ;;		_I2C_Start
  5398 ;;		_I2C_Stop
  5399 ;;		_I2C_Write
  5400 ;; This function is called by:
  5401 ;;		_DS3231_Init
  5402 ;;		_DS3231_Turn_Off_Alarm
  5403 ;;		_DS3231_Turn_On_Alarm
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           	psect	text15
  5408  00394A                     __ptext15:
  5409                           	opt stack 0
  5410  00394A                     _I2C_Write_Address_Write_One_Byte:
  5411                           	opt stack 23
  5412                           
  5413                           ;incstack = 0
  5414                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
  5415  00394A  6E15               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
  5416                           
  5417                           ;I2C_Soft.c: 133: I2C_Start();
  5418  00394C  EC9A  F01D         	call	_I2C_Start	;wreg free
  5419                           
  5420                           ;I2C_Soft.c: 134: I2C_Write((Device << 1) | 0);
  5421  003950  5015               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5422  003952  2415               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5423  003954  EC0E  F01B         	call	_I2C_Write
  5424                           
  5425                           ;I2C_Soft.c: 135: I2C_Write(Address);
  5426  003958  5013               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
  5427  00395A  EC0E  F01B         	call	_I2C_Write
  5428                           
  5429                           ;I2C_Soft.c: 136: I2C_Write(Data_Out);
  5430  00395E  5014               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
  5431  003960  EC0E  F01B         	call	_I2C_Write
  5432                           
  5433                           ;I2C_Soft.c: 137: I2C_Stop();
  5434  003964  EC91  F01D         	call	_I2C_Stop	;wreg free
  5435  003968  0012               	return		;funcret
  5436  00396A                     __end_of_I2C_Write_Address_Write_One_Byte:
  5437                           	opt stack 0
  5438                           tblptru	equ	0xFF8
  5439                           tblptrh	equ	0xFF7
  5440                           tblptrl	equ	0xFF6
  5441                           tablat	equ	0xFF5
  5442                           postinc0	equ	0xFEE
  5443                           wreg	equ	0xFE8
  5444                           postdec1	equ	0xFE5
  5445                           fsr1l	equ	0xFE1
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
  5449 ;; Defined at:
  5450 ;;		line 118 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  Device          1    wreg     unsigned char 
  5453 ;;  Address         1   19[COMRAM] unsigned char 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  Device          1   21[COMRAM] unsigned char 
  5456 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  1    wreg      unsigned char 
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5466 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;Total ram usage:        3 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    6
  5473 ;; This function calls:
  5474 ;;		_I2C_ReStart
  5475 ;;		_I2C_Read
  5476 ;;		_I2C_Start
  5477 ;;		_I2C_Stop
  5478 ;;		_I2C_Write
  5479 ;; This function is called by:
  5480 ;;		_DS3231_Init
  5481 ;;		_DS3231_Turn_Off_Alarm
  5482 ;;		_DS3231_Turn_On_Alarm
  5483 ;; This function uses a non-reentrant model
  5484 ;;
  5485                           
  5486                           	psect	text16
  5487  003710                     __ptext16:
  5488                           	opt stack 0
  5489  003710                     _I2C_Write_Address_Read_One_Byte:
  5490                           	opt stack 22
  5491                           
  5492                           ;incstack = 0
  5493                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
  5494  003710  6E16               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
  5495                           
  5496                           ;I2C_Soft.c: 120: char Data_Ret;
  5497                           ;I2C_Soft.c: 121: I2C_Start();
  5498  003712  EC9A  F01D         	call	_I2C_Start	;wreg free
  5499                           
  5500                           ;I2C_Soft.c: 122: I2C_Write((Device << 1) | 0);
  5501  003716  5016               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5502  003718  2416               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5503  00371A  EC0E  F01B         	call	_I2C_Write
  5504                           
  5505                           ;I2C_Soft.c: 123: I2C_Write(Address);
  5506  00371E  5014               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
  5507  003720  EC0E  F01B         	call	_I2C_Write
  5508                           
  5509                           ;I2C_Soft.c: 124: I2C_ReStart();
  5510  003724  EC44  F01D         	call	_I2C_ReStart	;wreg free
  5511                           
  5512                           ;I2C_Soft.c: 125: I2C_Write((Device << 1) | 1);
  5513  003728  80D8               	bsf	status,0,c
  5514  00372A  3416               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5515  00372C  EC0E  F01B         	call	_I2C_Write
  5516                           
  5517                           ;I2C_Soft.c: 126: Data_Ret = I2C_Read(0);
  5518  003730  0E00               	movlw	0
  5519  003732  ECAC  F01A         	call	_I2C_Read
  5520  003736  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
  5521                           
  5522                           ;I2C_Soft.c: 127: I2C_Stop();
  5523  003738  EC91  F01D         	call	_I2C_Stop	;wreg free
  5524                           
  5525                           ;I2C_Soft.c: 128: return Data_Ret;
  5526  00373C  5015               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
  5527  00373E  D000               	goto	l1006
  5528  003740                     l1006:
  5529  003740  0012               	return		;funcret
  5530  003742                     __end_of_I2C_Write_Address_Read_One_Byte:
  5531                           	opt stack 0
  5532                           tblptru	equ	0xFF8
  5533                           tblptrh	equ	0xFF7
  5534                           tblptrl	equ	0xFF6
  5535                           tablat	equ	0xFF5
  5536                           postinc0	equ	0xFEE
  5537                           wreg	equ	0xFE8
  5538                           postdec1	equ	0xFE5
  5539                           fsr1l	equ	0xFE1
  5540                           status	equ	0xFD8
  5541                           
  5542 ;; *************** function _Activate_Buzzer *****************
  5543 ;; Defined at:
  5544 ;;		line 89 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;		None
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;		None
  5549 ;; Return value:  Size  Location     Type
  5550 ;;		None               void
  5551 ;; Registers used:
  5552 ;;		wreg, status,2
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5562 ;;Total ram usage:        0 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    3
  5565 ;; This function calls:
  5566 ;;		Nothing
  5567 ;; This function is called by:
  5568 ;;		_Test_Alarm
  5569 ;;		_Do_Beep
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text17
  5574  003ADA                     __ptext17:
  5575                           	opt stack 0
  5576  003ADA                     _Activate_Buzzer:
  5577                           	opt stack 26
  5578                           
  5579                           ;utils.c: 91: PR2 = 0b11111001 ;
  5580                           
  5581                           ;incstack = 0
  5582  003ADA  0EF9               	movlw	249
  5583  003ADC  6ECB               	movwf	4043,c	;volatile
  5584                           
  5585                           ;utils.c: 92: T2CON = 0b00000101 ;
  5586  003ADE  0E05               	movlw	5
  5587  003AE0  6ECA               	movwf	4042,c	;volatile
  5588                           
  5589                           ;utils.c: 93: CCPR2L = 0b01001010 ;
  5590  003AE2  0E4A               	movlw	74
  5591  003AE4  6EBB               	movwf	4027,c	;volatile
  5592                           
  5593                           ;utils.c: 94: CCP2CON = 0b00111100 ;
  5594  003AE6  0E3C               	movlw	60
  5595  003AE8  6EBA               	movwf	4026,c	;volatile
  5596  003AEA  0012               	return		;funcret
  5597  003AEC                     __end_of_Activate_Buzzer:
  5598                           	opt stack 0
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           postinc0	equ	0xFEE
  5604                           wreg	equ	0xFE8
  5605                           postdec1	equ	0xFE5
  5606                           fsr1l	equ	0xFE1
  5607                           status	equ	0xFD8
  5608                           
  5609 ;; *************** function _Monitor_Heater *****************
  5610 ;; Defined at:
  5611 ;;		line 50 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Fan_Support.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;		None
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;		None
  5616 ;; Return value:  Size  Location     Type
  5617 ;;		None               void
  5618 ;; Registers used:
  5619 ;;		wreg, status,2, status,0, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;Total ram usage:        0 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    6
  5632 ;; This function calls:
  5633 ;;		_do_update_pwm
  5634 ;;		_get_duty_cycle
  5635 ;; This function is called by:
  5636 ;;		_main
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           	psect	text18
  5641  0037A4                     __ptext18:
  5642                           	opt stack 0
  5643  0037A4                     _Monitor_Heater:
  5644                           	opt stack 24
  5645                           
  5646                           ;Fan_Support.c: 52: duty_cycle = get_duty_cycle(DS1621_tempF, heater_set_temp);
  5647                           
  5648                           ;incstack = 0
  5649  0037A4  C04C  F011         	movff	_DS1621_tempF,get_duty_cycle@temp
  5650  0037A8  C04D  F012         	movff	_DS1621_tempF+1,get_duty_cycle@temp+1
  5651  0037AC  C06E  F013         	movff	_heater_set_temp,get_duty_cycle@set_temp
  5652  0037B0  6A14               	clrf	get_duty_cycle@set_temp+1,c
  5653  0037B2  ECE8  F01B         	call	_get_duty_cycle	;wreg free
  5654  0037B6  5011               	movf	?_get_duty_cycle,w,c
  5655  0037B8  6E5E               	movwf	_duty_cycle,c
  5656                           
  5657                           ;Fan_Support.c: 53: do_update_pwm(duty_cycle);
  5658  0037BA  505E               	movf	_duty_cycle,w,c
  5659  0037BC  EC43  F012         	call	_do_update_pwm
  5660                           
  5661                           ;Fan_Support.c: 59: if (HEATER == 1)
  5662  0037C0  0454               	decf	_HEATER,w,c
  5663  0037C2  A4D8               	btfss	status,2,c
  5664  0037C4  D002               	goto	l30
  5665                           
  5666                           ;Fan_Support.c: 60: {
  5667                           ;Fan_Support.c: 61: PORTAbits.RA4 = 1;
  5668  0037C6  8880               	bsf	3968,4,c	;volatile
  5669                           
  5670                           ;Fan_Support.c: 62: }
  5671  0037C8  D002               	goto	l32
  5672  0037CA                     l30:
  5673                           
  5674                           ;Fan_Support.c: 63: else PORTAbits.RA4 = 0;
  5675  0037CA  9880               	bcf	3968,4,c	;volatile
  5676  0037CC  D000               	goto	l32
  5677  0037CE                     l32:
  5678  0037CE  0012               	return		;funcret
  5679  0037D0                     __end_of_Monitor_Heater:
  5680                           	opt stack 0
  5681                           tblptru	equ	0xFF8
  5682                           tblptrh	equ	0xFF7
  5683                           tblptrl	equ	0xFF6
  5684                           tablat	equ	0xFF5
  5685                           postinc0	equ	0xFEE
  5686                           wreg	equ	0xFE8
  5687                           postdec1	equ	0xFE5
  5688                           fsr1l	equ	0xFE1
  5689                           status	equ	0xFD8
  5690                           
  5691 ;; *************** function _get_duty_cycle *****************
  5692 ;; Defined at:
  5693 ;;		line 13 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Fan_Support.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  temp            2   16[COMRAM] int 
  5696 ;;  set_temp        2   18[COMRAM] int 
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  2   16[COMRAM] int 
  5701 ;; Registers used:
  5702 ;;		wreg, status,2, status,0
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5708 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5712 ;;Total ram usage:        5 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    3
  5715 ;; This function calls:
  5716 ;;		Nothing
  5717 ;; This function is called by:
  5718 ;;		_Monitor_Heater
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           	psect	text19
  5723  0037D0                     __ptext19:
  5724                           	opt stack 0
  5725  0037D0                     _get_duty_cycle:
  5726                           	opt stack 26
  5727                           
  5728                           ;Fan_Support.c: 40: duty_cycle = (set_temp - temp) * 2;
  5729                           
  5730                           ;incstack = 0
  5731  0037D0  5011               	movf	get_duty_cycle@temp,w,c
  5732  0037D2  0800               	sublw	0
  5733  0037D4  2413               	addwf	get_duty_cycle@set_temp,w,c
  5734  0037D6  6E15               	movwf	??_get_duty_cycle& (0+255),c
  5735  0037D8  90D8               	bcf	status,0,c
  5736  0037DA  3415               	rlcf	??_get_duty_cycle,w,c
  5737  0037DC  D001               	goto	L12
  5738                           
  5739                           ;Fan_Support.c: 42: if (duty_cycle < 0){duty_cycle = 0;}
  5740  0037DE  0E00               	movlw	0
  5741  0037E0                     L12:
  5742  0037E0  6E5E               	movwf	_duty_cycle,c
  5743  0037E2  D000               	goto	l6270
  5744  0037E4                     l6270:
  5745                           
  5746                           ;Fan_Support.c: 44: if (duty_cycle > 100){duty_cycle = 100;}
  5747  0037E4  0E64               	movlw	100
  5748  0037E6  645E               	cpfsgt	_duty_cycle,c
  5749  0037E8  D003               	goto	l6274
  5750  0037EA  0E64               	movlw	100
  5751  0037EC  6E5E               	movwf	_duty_cycle,c
  5752  0037EE  D000               	goto	l6274
  5753  0037F0                     l6274:
  5754                           
  5755                           ;Fan_Support.c: 46: return (duty_cycle);
  5756  0037F0  C05E  F011         	movff	_duty_cycle,?_get_duty_cycle
  5757  0037F4  6A12               	clrf	?_get_duty_cycle+1,c
  5758  0037F6  D000               	goto	l27
  5759  0037F8                     l27:
  5760  0037F8  0012               	return		;funcret
  5761  0037FA                     __end_of_get_duty_cycle:
  5762                           	opt stack 0
  5763                           tblptru	equ	0xFF8
  5764                           tblptrh	equ	0xFF7
  5765                           tblptrl	equ	0xFF6
  5766                           tablat	equ	0xFF5
  5767                           postinc0	equ	0xFEE
  5768                           wreg	equ	0xFE8
  5769                           postdec1	equ	0xFE5
  5770                           fsr1l	equ	0xFE1
  5771                           status	equ	0xFD8
  5772                           
  5773 ;; *************** function _do_update_pwm *****************
  5774 ;; Defined at:
  5775 ;;		line 130 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;  duty_cycle      1    wreg     unsigned char 
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;  duty_cycle      1    3[BANK1 ] unsigned char 
  5780 ;;  dc_f            3    0[BANK1 ] float 
  5781 ;;  dc_I            2    4[BANK1 ] int 
  5782 ;; Return value:  Size  Location     Type
  5783 ;;		None               void
  5784 ;; Registers used:
  5785 ;;		wreg, status,2, status,0, cstack
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;      Totals:         0       3       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;Total ram usage:        9 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:    5
  5798 ;; This function calls:
  5799 ;;		___ftdiv
  5800 ;;		___ftmul
  5801 ;;		___fttol
  5802 ;;		___lbtoft
  5803 ;; This function is called by:
  5804 ;;		_Monitor_Heater
  5805 ;;		_get_RPM
  5806 ;;		_Turn_On_Fan
  5807 ;;		_Do_Beep
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           	psect	text20
  5812  002486                     __ptext20:
  5813                           	opt stack 0
  5814  002486                     _do_update_pwm:
  5815                           	opt stack 24
  5816                           
  5817                           ;incstack = 0
  5818                           ;do_update_pwm@duty_cycle stored from wreg
  5819  002486  0101               	movlb	1	; () banked
  5820  002488  6F40               	movwf	do_update_pwm@duty_cycle& (0+255),b
  5821                           
  5822                           ; BSR set to: 1
  5823                           ;utils.c: 132: float dc_f;
  5824                           ;utils.c: 133: int dc_I;
  5825                           ;utils.c: 134: PR2 = 0b00000100 ;
  5826  00248A  0E04               	movlw	4
  5827  00248C  6ECB               	movwf	4043,c	;volatile
  5828                           
  5829                           ;utils.c: 135: T2CON = 0b00000111 ;
  5830  00248E  0E07               	movlw	7
  5831  002490  6ECA               	movwf	4042,c	;volatile
  5832                           
  5833                           ; BSR set to: 1
  5834                           ;utils.c: 136: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  5835  002492  0E00               	movlw	0
  5836  002494  6E20               	movwf	___ftmul@f2,c
  5837  002496  0E80               	movlw	128
  5838  002498  6E21               	movwf	___ftmul@f2+1,c
  5839  00249A  0E40               	movlw	64
  5840  00249C  6E22               	movwf	___ftmul@f2+2,c
  5841  00249E  0101               	movlb	1	; () banked
  5842  0024A0  5140               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  5843  0024A2  EC4E  F01C         	call	___lbtoft
  5844  0024A6  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  5845  0024AA  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  5846  0024AE  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  5847  0024B2  EC99  F00E         	call	___ftmul	;wreg free
  5848  0024B6  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  5849  0024BA  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  5850  0024BE  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  5851  0024C2  0E00               	movlw	0
  5852  0024C4  6E2F               	movwf	___ftdiv@f2,c
  5853  0024C6  0EA0               	movlw	160
  5854  0024C8  6E30               	movwf	___ftdiv@f2+1,c
  5855  0024CA  0E41               	movlw	65
  5856  0024CC  6E31               	movwf	___ftdiv@f2+2,c
  5857  0024CE  ECF3  F010         	call	___ftdiv	;wreg free
  5858  0024D2  C02C  F13D         	movff	?___ftdiv,do_update_pwm@dc_f
  5859  0024D6  C02D  F13E         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  5860  0024DA  C02E  F13F         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  5861                           
  5862                           ;utils.c: 137: dc_I = (int) dc_f;
  5863  0024DE  C13D  F03B         	movff	do_update_pwm@dc_f,___fttol@f1
  5864  0024E2  C13E  F03C         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  5865  0024E6  C13F  F03D         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  5866  0024EA  EC80  F010         	call	___fttol	;wreg free
  5867  0024EE  C03B  F141         	movff	?___fttol,do_update_pwm@dc_I
  5868  0024F2  C03C  F142         	movff	?___fttol+1,do_update_pwm@dc_I+1
  5869                           
  5870                           ;utils.c: 138: if (dc_I > duty_cycle) dc_I++;
  5871  0024F6  0101               	movlb	1	; () banked
  5872  0024F8  5140               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  5873  0024FA  0100               	movlb	0	; () banked
  5874  0024FC  6FFB               	movwf	??_do_update_pwm& (0+255),b
  5875  0024FE  6BFC               	clrf	(??_do_update_pwm+1)& (0+255),b
  5876  002500  0101               	movlb	1	; () banked
  5877  002502  5141               	movf	do_update_pwm@dc_I& (0+255),w,b
  5878  002504  0100               	movlb	0	; () banked
  5879  002506  5DFB               	subwf	??_do_update_pwm& (0+255),w,b
  5880  002508  0100               	movlb	0	; () banked
  5881  00250A  51FC               	movf	(??_do_update_pwm+1)& (0+255),w,b
  5882  00250C  0A80               	xorlw	128
  5883  00250E  0100               	movlb	0	; () banked
  5884  002510  6FFD               	movwf	(??_do_update_pwm+2)& (0+255),b
  5885  002512  0101               	movlb	1	; () banked
  5886  002514  5142               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
  5887  002516  0A80               	xorlw	128
  5888  002518  0100               	movlb	0	; () banked
  5889  00251A  59FD               	subwfb	(??_do_update_pwm+2)& (0+255),w,b
  5890  00251C  B0D8               	btfsc	status,0,c
  5891  00251E  D004               	goto	l8716
  5892                           
  5893                           ; BSR set to: 0
  5894  002520  0101               	movlb	1	; () banked
  5895  002522  4B41               	infsnz	do_update_pwm@dc_I& (0+255),f,b
  5896  002524  2B42               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
  5897  002526  D000               	goto	l8716
  5898  002528                     l8716:
  5899                           
  5900                           ;utils.c: 139: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  5901  002528  C141  F0FB         	movff	do_update_pwm@dc_I,??_do_update_pwm
  5902  00252C  0E03               	movlw	3
  5903  00252E  0100               	movlb	0	; () banked
  5904  002530  17FB               	andwf	??_do_update_pwm& (0+255),f,b
  5905  002532  0100               	movlb	0	; () banked
  5906  002534  39FB               	swapf	??_do_update_pwm& (0+255),w,b
  5907  002536  0BF0               	andlw	240
  5908  002538  090C               	iorlw	12
  5909  00253A  6EBD               	movwf	4029,c	;volatile
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;utils.c: 140: CCPR1L = (dc_I) >> 2;
  5913  00253C  C141  F0FB         	movff	do_update_pwm@dc_I,??_do_update_pwm
  5914  002540  C142  F0FC         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  5915  002544  0100               	movlb	0	; () banked
  5916  002546  35FC               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
  5917  002548  33FC               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
  5918  00254A  33FB               	rrcf	??_do_update_pwm& (0+255),f,b
  5919  00254C  0100               	movlb	0	; () banked
  5920  00254E  35FC               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
  5921  002550  33FC               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
  5922  002552  33FB               	rrcf	??_do_update_pwm& (0+255),f,b
  5923  002554  0100               	movlb	0	; () banked
  5924  002556  51FB               	movf	??_do_update_pwm& (0+255),w,b
  5925  002558  6EBE               	movwf	4030,c	;volatile
  5926                           
  5927                           ; BSR set to: 0
  5928  00255A  0012               	return		;funcret
  5929  00255C                     __end_of_do_update_pwm:
  5930                           	opt stack 0
  5931                           tblptru	equ	0xFF8
  5932                           tblptrh	equ	0xFF7
  5933                           tblptrl	equ	0xFF6
  5934                           tablat	equ	0xFF5
  5935                           postinc0	equ	0xFEE
  5936                           wreg	equ	0xFE8
  5937                           postdec1	equ	0xFE5
  5938                           fsr1l	equ	0xFE1
  5939                           status	equ	0xFD8
  5940                           
  5941 ;; *************** function ___lbtoft *****************
  5942 ;; Defined at:
  5943 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;  c               1    wreg     unsigned char 
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  c               1   27[COMRAM] unsigned char 
  5948 ;; Return value:  Size  Location     Type
  5949 ;;                  3   24[COMRAM] float 
  5950 ;; Registers used:
  5951 ;;		wreg, status,2, status,0, cstack
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5957 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;Total ram usage:        4 bytes
  5962 ;; Hardware stack levels used:    1
  5963 ;; Hardware stack levels required when called:    4
  5964 ;; This function calls:
  5965 ;;		___ftpack
  5966 ;; This function is called by:
  5967 ;;		_do_update_pwm
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971                           	psect	text21
  5972  00389C                     __ptext21:
  5973                           	opt stack 0
  5974  00389C                     ___lbtoft:
  5975                           	opt stack 24
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;incstack = 0
  5979                           ;___lbtoft@c stored from wreg
  5980  00389C  6E1C               	movwf	___lbtoft@c,c
  5981  00389E  501C               	movf	___lbtoft@c,w,c
  5982  0038A0  6E11               	movwf	___ftpack@arg,c
  5983  0038A2  6A12               	clrf	___ftpack@arg+1,c
  5984  0038A4  6A13               	clrf	___ftpack@arg+2,c
  5985  0038A6  0E8E               	movlw	142
  5986  0038A8  6E14               	movwf	___ftpack@exp,c
  5987  0038AA  0E00               	movlw	0
  5988  0038AC  6E15               	movwf	___ftpack@sign,c
  5989  0038AE  EC13  F013         	call	___ftpack	;wreg free
  5990  0038B2  C011  F019         	movff	?___ftpack,?___lbtoft
  5991  0038B6  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  5992  0038BA  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  5993  0038BE  D000               	goto	l1927
  5994  0038C0                     l1927:
  5995  0038C0  0012               	return		;funcret
  5996  0038C2                     __end_of___lbtoft:
  5997                           	opt stack 0
  5998                           tblptru	equ	0xFF8
  5999                           tblptrh	equ	0xFF7
  6000                           tblptrl	equ	0xFF6
  6001                           tablat	equ	0xFF5
  6002                           postinc0	equ	0xFEE
  6003                           wreg	equ	0xFE8
  6004                           postdec1	equ	0xFE5
  6005                           fsr1l	equ	0xFE1
  6006                           status	equ	0xFD8
  6007                           
  6008 ;; *************** function ___fttol *****************
  6009 ;; Defined at:
  6010 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;  f1              3   58[COMRAM] float 
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;  lval            4   68[COMRAM] unsigned long 
  6015 ;;  exp1            1   72[COMRAM] unsigned char 
  6016 ;;  sign1           1   67[COMRAM] unsigned char 
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  4   58[COMRAM] long 
  6019 ;; Registers used:
  6020 ;;		wreg, status,2, status,0
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6026 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6027 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6028 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6029 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6030 ;;Total ram usage:       15 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:    3
  6033 ;; This function calls:
  6034 ;;		Nothing
  6035 ;; This function is called by:
  6036 ;;		_Update_Screen
  6037 ;;		_do_update_pwm
  6038 ;;		_read_volt
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text22
  6043  002100                     __ptext22:
  6044                           	opt stack 0
  6045  002100                     ___fttol:
  6046                           	opt stack 26
  6047                           
  6048                           ;incstack = 0
  6049  002100  C03D  F03F         	movff	___fttol@f1+2,??___fttol
  6050  002104  6A40               	clrf	(??___fttol+1)& (0+255),c
  6051  002106  6A41               	clrf	(??___fttol+2)& (0+255),c
  6052  002108  343C               	rlcf	___fttol@f1+1,w,c
  6053  00210A  363F               	rlcf	??___fttol& (0+255),f,c
  6054  00210C  E301               	bnc	u6171
  6055  00210E  8040               	bsf	(??___fttol+1)& (0+255),0,c
  6056  002110                     u6171:
  6057  002110  503F               	movf	??___fttol,w,c
  6058  002112  6E49               	movwf	___fttol@exp1,c
  6059  002114  5049               	movf	___fttol@exp1,w,c
  6060  002116  A4D8               	btfss	status,2,c
  6061  002118  D002               	goto	l8662
  6062  00211A  D039               	goto	l8686
  6063  00211C  D063               	goto	l1886
  6064  00211E                     l8662:
  6065  00211E  0E17               	movlw	23
  6066  002120  6E3F               	movwf	??___fttol& (0+255),c
  6067  002122  C03B  F040         	movff	___fttol@f1,??___fttol+1
  6068  002126  C03C  F041         	movff	___fttol@f1+1,??___fttol+2
  6069  00212A  C03D  F042         	movff	___fttol@f1+2,??___fttol+3
  6070  00212E  283F               	incf	??___fttol,w,c
  6071  002130  6E43               	movwf	(??___fttol+4)& (0+255),c
  6072  002132  D004               	goto	u6190
  6073  002134                     u6195:
  6074  002134  90D8               	bcf	status,0,c
  6075  002136  3242               	rrcf	??___fttol+3,f,c
  6076  002138  3241               	rrcf	??___fttol+2,f,c
  6077  00213A  3240               	rrcf	??___fttol+1,f,c
  6078  00213C                     u6190:
  6079  00213C  2E43               	decfsz	(??___fttol+4)& (0+255),f,c
  6080  00213E  D7FA               	goto	u6195
  6081  002140  5040               	movf	??___fttol+1,w,c
  6082  002142  6E44               	movwf	___fttol@sign1,c
  6083  002144  8E3C               	bsf	___fttol@f1+1,7,c
  6084  002146  0EFF               	movlw	255
  6085  002148  163B               	andwf	___fttol@f1,f,c
  6086  00214A  0EFF               	movlw	255
  6087  00214C  163C               	andwf	___fttol@f1+1,f,c
  6088  00214E  0E00               	movlw	0
  6089  002150  163D               	andwf	___fttol@f1+2,f,c
  6090  002152  503B               	movf	___fttol@f1,w,c
  6091  002154  6E45               	movwf	___fttol@lval,c
  6092  002156  503C               	movf	___fttol@f1+1,w,c
  6093  002158  6E46               	movwf	___fttol@lval+1,c
  6094  00215A  503D               	movf	___fttol@f1+2,w,c
  6095  00215C  6E47               	movwf	___fttol@lval+2,c
  6096  00215E  6A48               	clrf	___fttol@lval+3,c
  6097  002160  0E8E               	movlw	142
  6098  002162  5E49               	subwf	___fttol@exp1,f,c
  6099  002164  AE49               	btfss	___fttol@exp1,7,c
  6100  002166  D010               	goto	l8684
  6101  002168  5049               	movf	___fttol@exp1,w,c
  6102  00216A  0A80               	xorlw	128
  6103  00216C  0F8F               	addlw	143
  6104  00216E  B0D8               	btfsc	status,0,c
  6105  002170  D003               	goto	l8680
  6106  002172  D00D               	goto	l8686
  6107  002174  D037               	goto	l1886
  6108  002176  D000               	goto	l8680
  6109  002178                     l8680:
  6110  002178  90D8               	bcf	status,0,c
  6111  00217A  3248               	rrcf	___fttol@lval+3,f,c
  6112  00217C  3247               	rrcf	___fttol@lval+2,f,c
  6113  00217E  3246               	rrcf	___fttol@lval+1,f,c
  6114  002180  3245               	rrcf	___fttol@lval,f,c
  6115  002182  3E49               	incfsz	___fttol@exp1,f,c
  6116  002184  D7F9               	goto	l8680
  6117  002186  D019               	goto	l8694
  6118  002188                     l8684:
  6119  002188  0E17               	movlw	23
  6120  00218A  6449               	cpfsgt	___fttol@exp1,c
  6121  00218C  D011               	goto	l8692
  6122  00218E                     l8686:
  6123  00218E  0E00               	movlw	0
  6124  002190  6E3B               	movwf	?___fttol,c
  6125  002192  0E00               	movlw	0
  6126  002194  6E3C               	movwf	?___fttol+1,c
  6127  002196  0E00               	movlw	0
  6128  002198  6E3D               	movwf	?___fttol+2,c
  6129  00219A  0E00               	movlw	0
  6130  00219C  6E3E               	movwf	?___fttol+3,c
  6131  00219E  D022               	goto	l1886
  6132  0021A0  D007               	goto	l8692
  6133  0021A2                     l8690:
  6134  0021A2  90D8               	bcf	status,0,c
  6135  0021A4  3645               	rlcf	___fttol@lval,f,c
  6136  0021A6  3646               	rlcf	___fttol@lval+1,f,c
  6137  0021A8  3647               	rlcf	___fttol@lval+2,f,c
  6138  0021AA  3648               	rlcf	___fttol@lval+3,f,c
  6139  0021AC  0649               	decf	___fttol@exp1,f,c
  6140  0021AE  D000               	goto	l8692
  6141  0021B0                     l8692:
  6142  0021B0  5049               	movf	___fttol@exp1,w,c
  6143  0021B2  B4D8               	btfsc	status,2,c
  6144  0021B4  D002               	goto	l8694
  6145  0021B6  D7F5               	goto	l8690
  6146  0021B8  D000               	goto	l8694
  6147  0021BA                     l8694:
  6148  0021BA  5044               	movf	___fttol@sign1,w,c
  6149  0021BC  B4D8               	btfsc	status,2,c
  6150  0021BE  D009               	goto	l8698
  6151  0021C0  1E48               	comf	___fttol@lval+3,f,c
  6152  0021C2  1E47               	comf	___fttol@lval+2,f,c
  6153  0021C4  1E46               	comf	___fttol@lval+1,f,c
  6154  0021C6  6C45               	negf	___fttol@lval,c
  6155  0021C8  0E00               	movlw	0
  6156  0021CA  2246               	addwfc	___fttol@lval+1,f,c
  6157  0021CC  2247               	addwfc	___fttol@lval+2,f,c
  6158  0021CE  2248               	addwfc	___fttol@lval+3,f,c
  6159  0021D0  D000               	goto	l8698
  6160  0021D2                     l8698:
  6161  0021D2  C045  F03B         	movff	___fttol@lval,?___fttol
  6162  0021D6  C046  F03C         	movff	___fttol@lval+1,?___fttol+1
  6163  0021DA  C047  F03D         	movff	___fttol@lval+2,?___fttol+2
  6164  0021DE  C048  F03E         	movff	___fttol@lval+3,?___fttol+3
  6165  0021E2  D000               	goto	l1886
  6166  0021E4                     l1886:
  6167  0021E4  0012               	return		;funcret
  6168  0021E6                     __end_of___fttol:
  6169                           	opt stack 0
  6170                           tblptru	equ	0xFF8
  6171                           tblptrh	equ	0xFF7
  6172                           tblptrl	equ	0xFF6
  6173                           tablat	equ	0xFF5
  6174                           postinc0	equ	0xFEE
  6175                           wreg	equ	0xFE8
  6176                           postdec1	equ	0xFE5
  6177                           fsr1l	equ	0xFE1
  6178                           status	equ	0xFD8
  6179                           
  6180 ;; *************** function ___ftmul *****************
  6181 ;; Defined at:
  6182 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;  f1              3   28[COMRAM] float 
  6185 ;;  f2              3   31[COMRAM] float 
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  6188 ;;  sign            1   42[COMRAM] unsigned char 
  6189 ;;  cntr            1   41[COMRAM] unsigned char 
  6190 ;;  exp             1   37[COMRAM] unsigned char 
  6191 ;; Return value:  Size  Location     Type
  6192 ;;                  3   28[COMRAM] float 
  6193 ;; Registers used:
  6194 ;;		wreg, status,2, status,0, cstack
  6195 ;; Tracked objects:
  6196 ;;		On entry : 0/0
  6197 ;;		On exit  : 0/0
  6198 ;;		Unchanged: 0/0
  6199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6200 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6201 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6202 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6203 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6204 ;;Total ram usage:       15 bytes
  6205 ;; Hardware stack levels used:    1
  6206 ;; Hardware stack levels required when called:    4
  6207 ;; This function calls:
  6208 ;;		___ftpack
  6209 ;; This function is called by:
  6210 ;;		_Update_Screen
  6211 ;;		_do_update_pwm
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           	psect	text23
  6216  001D32                     __ptext23:
  6217                           	opt stack 0
  6218  001D32                     ___ftmul:
  6219                           	opt stack 24
  6220                           
  6221                           ;incstack = 0
  6222  001D32  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  6223  001D36  6A24               	clrf	(??___ftmul+1)& (0+255),c
  6224  001D38  6A25               	clrf	(??___ftmul+2)& (0+255),c
  6225  001D3A  341E               	rlcf	___ftmul@f1+1,w,c
  6226  001D3C  3623               	rlcf	??___ftmul& (0+255),f,c
  6227  001D3E  E301               	bnc	u6111
  6228  001D40  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  6229  001D42                     u6111:
  6230  001D42  5023               	movf	??___ftmul,w,c
  6231  001D44  6E26               	movwf	___ftmul@exp,c
  6232  001D46  5026               	movf	___ftmul@exp,w,c
  6233  001D48  A4D8               	btfss	status,2,c
  6234  001D4A  D002               	goto	l8614
  6235  001D4C  D00E               	goto	l8616
  6236  001D4E  D06C               	goto	l1865
  6237  001D50                     l8614:
  6238  001D50  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  6239  001D54  6A24               	clrf	(??___ftmul+1)& (0+255),c
  6240  001D56  6A25               	clrf	(??___ftmul+2)& (0+255),c
  6241  001D58  3421               	rlcf	___ftmul@f2+1,w,c
  6242  001D5A  3623               	rlcf	??___ftmul& (0+255),f,c
  6243  001D5C  E301               	bnc	u6131
  6244  001D5E  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  6245  001D60                     u6131:
  6246  001D60  5023               	movf	??___ftmul,w,c
  6247  001D62  6E2B               	movwf	___ftmul@sign,c
  6248  001D64  502B               	movf	___ftmul@sign,w,c
  6249  001D66  A4D8               	btfss	status,2,c
  6250  001D68  D007               	goto	l8620
  6251  001D6A                     l8616:
  6252  001D6A  0E00               	movlw	0
  6253  001D6C  6E1D               	movwf	?___ftmul,c
  6254  001D6E  0E00               	movlw	0
  6255  001D70  6E1E               	movwf	?___ftmul+1,c
  6256  001D72  0E00               	movlw	0
  6257  001D74  6E1F               	movwf	?___ftmul+2,c
  6258  001D76  D058               	goto	l1865
  6259  001D78                     l8620:
  6260  001D78  502B               	movf	___ftmul@sign,w,c
  6261  001D7A  0F7B               	addlw	123
  6262  001D7C  2626               	addwf	___ftmul@exp,f,c
  6263  001D7E  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  6264  001D82  5022               	movf	___ftmul@f2+2,w,c
  6265  001D84  1A2B               	xorwf	___ftmul@sign,f,c
  6266  001D86  0E80               	movlw	128
  6267  001D88  162B               	andwf	___ftmul@sign,f,c
  6268  001D8A  8E1E               	bsf	___ftmul@f1+1,7,c
  6269  001D8C  8E21               	bsf	___ftmul@f2+1,7,c
  6270  001D8E  0EFF               	movlw	255
  6271  001D90  1620               	andwf	___ftmul@f2,f,c
  6272  001D92  0EFF               	movlw	255
  6273  001D94  1621               	andwf	___ftmul@f2+1,f,c
  6274  001D96  0E00               	movlw	0
  6275  001D98  1622               	andwf	___ftmul@f2+2,f,c
  6276  001D9A  0E00               	movlw	0
  6277  001D9C  6E27               	movwf	___ftmul@f3_as_product,c
  6278  001D9E  0E00               	movlw	0
  6279  001DA0  6E28               	movwf	___ftmul@f3_as_product+1,c
  6280  001DA2  0E00               	movlw	0
  6281  001DA4  6E29               	movwf	___ftmul@f3_as_product+2,c
  6282  001DA6  0E07               	movlw	7
  6283  001DA8  6E2A               	movwf	___ftmul@cntr,c
  6284  001DAA  D000               	goto	l8634
  6285  001DAC                     l8634:
  6286  001DAC  A01D               	btfss	___ftmul@f1,0,c
  6287  001DAE  D007               	goto	l8638
  6288  001DB0  5020               	movf	___ftmul@f2,w,c
  6289  001DB2  2627               	addwf	___ftmul@f3_as_product,f,c
  6290  001DB4  5021               	movf	___ftmul@f2+1,w,c
  6291  001DB6  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  6292  001DB8  5022               	movf	___ftmul@f2+2,w,c
  6293  001DBA  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  6294  001DBC  D000               	goto	l8638
  6295  001DBE                     l8638:
  6296  001DBE  90D8               	bcf	status,0,c
  6297  001DC0  321F               	rrcf	___ftmul@f1+2,f,c
  6298  001DC2  321E               	rrcf	___ftmul@f1+1,f,c
  6299  001DC4  321D               	rrcf	___ftmul@f1,f,c
  6300  001DC6  90D8               	bcf	status,0,c
  6301  001DC8  3620               	rlcf	___ftmul@f2,f,c
  6302  001DCA  3621               	rlcf	___ftmul@f2+1,f,c
  6303  001DCC  3622               	rlcf	___ftmul@f2+2,f,c
  6304  001DCE  2E2A               	decfsz	___ftmul@cntr,f,c
  6305  001DD0  D7ED               	goto	l8634
  6306  001DD2  D000               	goto	l8642
  6307  001DD4                     l8642:
  6308  001DD4  0E09               	movlw	9
  6309  001DD6  6E2A               	movwf	___ftmul@cntr,c
  6310  001DD8  D000               	goto	l8644
  6311  001DDA                     l8644:
  6312  001DDA  A01D               	btfss	___ftmul@f1,0,c
  6313  001DDC  D007               	goto	l8648
  6314  001DDE  5020               	movf	___ftmul@f2,w,c
  6315  001DE0  2627               	addwf	___ftmul@f3_as_product,f,c
  6316  001DE2  5021               	movf	___ftmul@f2+1,w,c
  6317  001DE4  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  6318  001DE6  5022               	movf	___ftmul@f2+2,w,c
  6319  001DE8  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  6320  001DEA  D000               	goto	l8648
  6321  001DEC                     l8648:
  6322  001DEC  90D8               	bcf	status,0,c
  6323  001DEE  321F               	rrcf	___ftmul@f1+2,f,c
  6324  001DF0  321E               	rrcf	___ftmul@f1+1,f,c
  6325  001DF2  321D               	rrcf	___ftmul@f1,f,c
  6326  001DF4  90D8               	bcf	status,0,c
  6327  001DF6  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  6328  001DF8  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  6329  001DFA  3227               	rrcf	___ftmul@f3_as_product,f,c
  6330  001DFC  2E2A               	decfsz	___ftmul@cntr,f,c
  6331  001DFE  D7ED               	goto	l8644
  6332  001E00  D000               	goto	l8652
  6333  001E02                     l8652:
  6334  001E02  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  6335  001E06  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6336  001E0A  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6337  001E0E  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  6338  001E12  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  6339  001E16  EC13  F013         	call	___ftpack	;wreg free
  6340  001E1A  C011  F01D         	movff	?___ftpack,?___ftmul
  6341  001E1E  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  6342  001E22  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  6343  001E26  D000               	goto	l1865
  6344  001E28                     l1865:
  6345  001E28  0012               	return		;funcret
  6346  001E2A                     __end_of___ftmul:
  6347                           	opt stack 0
  6348                           tblptru	equ	0xFF8
  6349                           tblptrh	equ	0xFF7
  6350                           tblptrl	equ	0xFF6
  6351                           tablat	equ	0xFF5
  6352                           postinc0	equ	0xFEE
  6353                           wreg	equ	0xFE8
  6354                           postdec1	equ	0xFE5
  6355                           fsr1l	equ	0xFE1
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function ___ftdiv *****************
  6359 ;; Defined at:
  6360 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  f1              3   43[COMRAM] float 
  6363 ;;  f2              3   46[COMRAM] float 
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;  f3              3   53[COMRAM] float 
  6366 ;;  sign            1   57[COMRAM] unsigned char 
  6367 ;;  exp             1   56[COMRAM] unsigned char 
  6368 ;;  cntr            1   52[COMRAM] unsigned char 
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  3   43[COMRAM] float 
  6371 ;; Registers used:
  6372 ;;		wreg, status,2, status,0, cstack
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6378 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;Total ram usage:       15 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    4
  6385 ;; This function calls:
  6386 ;;		___ftpack
  6387 ;; This function is called by:
  6388 ;;		_do_update_pwm
  6389 ;;		_read_volt
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text24
  6394  0021E6                     __ptext24:
  6395                           	opt stack 0
  6396  0021E6                     ___ftdiv:
  6397                           	opt stack 25
  6398                           
  6399                           ;incstack = 0
  6400  0021E6  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  6401  0021EA  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  6402  0021EC  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  6403  0021EE  342D               	rlcf	___ftdiv@f1+1,w,c
  6404  0021F0  3632               	rlcf	??___ftdiv& (0+255),f,c
  6405  0021F2  E301               	bnc	u6061
  6406  0021F4  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  6407  0021F6                     u6061:
  6408  0021F6  5032               	movf	??___ftdiv,w,c
  6409  0021F8  6E39               	movwf	___ftdiv@exp,c
  6410  0021FA  5039               	movf	___ftdiv@exp,w,c
  6411  0021FC  A4D8               	btfss	status,2,c
  6412  0021FE  D002               	goto	l8568
  6413  002200  D00E               	goto	l8570
  6414  002202  D061               	goto	l1850
  6415  002204                     l8568:
  6416  002204  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  6417  002208  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  6418  00220A  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  6419  00220C  3430               	rlcf	___ftdiv@f2+1,w,c
  6420  00220E  3632               	rlcf	??___ftdiv& (0+255),f,c
  6421  002210  E301               	bnc	u6081
  6422  002212  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  6423  002214                     u6081:
  6424  002214  5032               	movf	??___ftdiv,w,c
  6425  002216  6E3A               	movwf	___ftdiv@sign,c
  6426  002218  503A               	movf	___ftdiv@sign,w,c
  6427  00221A  A4D8               	btfss	status,2,c
  6428  00221C  D007               	goto	l8574
  6429  00221E                     l8570:
  6430  00221E  0E00               	movlw	0
  6431  002220  6E2C               	movwf	?___ftdiv,c
  6432  002222  0E00               	movlw	0
  6433  002224  6E2D               	movwf	?___ftdiv+1,c
  6434  002226  0E00               	movlw	0
  6435  002228  6E2E               	movwf	?___ftdiv+2,c
  6436  00222A  D04D               	goto	l1850
  6437  00222C                     l8574:
  6438  00222C  0E00               	movlw	0
  6439  00222E  6E36               	movwf	___ftdiv@f3,c
  6440  002230  0E00               	movlw	0
  6441  002232  6E37               	movwf	___ftdiv@f3+1,c
  6442  002234  0E00               	movlw	0
  6443  002236  6E38               	movwf	___ftdiv@f3+2,c
  6444  002238  503A               	movf	___ftdiv@sign,w,c
  6445  00223A  0F89               	addlw	137
  6446  00223C  5E39               	subwf	___ftdiv@exp,f,c
  6447  00223E  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  6448  002242  5031               	movf	___ftdiv@f2+2,w,c
  6449  002244  1A3A               	xorwf	___ftdiv@sign,f,c
  6450  002246  0E80               	movlw	128
  6451  002248  163A               	andwf	___ftdiv@sign,f,c
  6452  00224A  8E2D               	bsf	___ftdiv@f1+1,7,c
  6453  00224C  0EFF               	movlw	255
  6454  00224E  162C               	andwf	___ftdiv@f1,f,c
  6455  002250  0EFF               	movlw	255
  6456  002252  162D               	andwf	___ftdiv@f1+1,f,c
  6457  002254  0E00               	movlw	0
  6458  002256  162E               	andwf	___ftdiv@f1+2,f,c
  6459  002258  8E30               	bsf	___ftdiv@f2+1,7,c
  6460  00225A  0EFF               	movlw	255
  6461  00225C  162F               	andwf	___ftdiv@f2,f,c
  6462  00225E  0EFF               	movlw	255
  6463  002260  1630               	andwf	___ftdiv@f2+1,f,c
  6464  002262  0E00               	movlw	0
  6465  002264  1631               	andwf	___ftdiv@f2+2,f,c
  6466  002266  0E18               	movlw	24
  6467  002268  6E35               	movwf	___ftdiv@cntr,c
  6468  00226A  D000               	goto	l8594
  6469  00226C                     l8594:
  6470  00226C  90D8               	bcf	status,0,c
  6471  00226E  3636               	rlcf	___ftdiv@f3,f,c
  6472  002270  3637               	rlcf	___ftdiv@f3+1,f,c
  6473  002272  3638               	rlcf	___ftdiv@f3+2,f,c
  6474  002274  502F               	movf	___ftdiv@f2,w,c
  6475  002276  5C2C               	subwf	___ftdiv@f1,w,c
  6476  002278  5030               	movf	___ftdiv@f2+1,w,c
  6477  00227A  582D               	subwfb	___ftdiv@f1+1,w,c
  6478  00227C  5031               	movf	___ftdiv@f2+2,w,c
  6479  00227E  582E               	subwfb	___ftdiv@f1+2,w,c
  6480  002280  A0D8               	btfss	status,0,c
  6481  002282  D007               	goto	l1853
  6482  002284  502F               	movf	___ftdiv@f2,w,c
  6483  002286  5E2C               	subwf	___ftdiv@f1,f,c
  6484  002288  5030               	movf	___ftdiv@f2+1,w,c
  6485  00228A  5A2D               	subwfb	___ftdiv@f1+1,f,c
  6486  00228C  5031               	movf	___ftdiv@f2+2,w,c
  6487  00228E  5A2E               	subwfb	___ftdiv@f1+2,f,c
  6488  002290  8036               	bsf	___ftdiv@f3,0,c
  6489  002292                     l1853:
  6490  002292  90D8               	bcf	status,0,c
  6491  002294  362C               	rlcf	___ftdiv@f1,f,c
  6492  002296  362D               	rlcf	___ftdiv@f1+1,f,c
  6493  002298  362E               	rlcf	___ftdiv@f1+2,f,c
  6494  00229A  2E35               	decfsz	___ftdiv@cntr,f,c
  6495  00229C  D7E7               	goto	l8594
  6496  00229E  D000               	goto	l8604
  6497  0022A0                     l8604:
  6498  0022A0  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
  6499  0022A4  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6500  0022A8  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6501  0022AC  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
  6502  0022B0  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
  6503  0022B4  EC13  F013         	call	___ftpack	;wreg free
  6504  0022B8  C011  F02C         	movff	?___ftpack,?___ftdiv
  6505  0022BC  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
  6506  0022C0  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
  6507  0022C4  D000               	goto	l1850
  6508  0022C6                     l1850:
  6509  0022C6  0012               	return		;funcret
  6510  0022C8                     __end_of___ftdiv:
  6511                           	opt stack 0
  6512                           tblptru	equ	0xFF8
  6513                           tblptrh	equ	0xFF7
  6514                           tblptrl	equ	0xFF6
  6515                           tablat	equ	0xFF5
  6516                           postinc0	equ	0xFEE
  6517                           wreg	equ	0xFE8
  6518                           postdec1	equ	0xFE5
  6519                           fsr1l	equ	0xFE1
  6520                           status	equ	0xFD8
  6521                           
  6522 ;; *************** function ___ftpack *****************
  6523 ;; Defined at:
  6524 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  arg             3   16[COMRAM] unsigned um
  6527 ;;  exp             1   19[COMRAM] unsigned char 
  6528 ;;  sign            1   20[COMRAM] unsigned char 
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  3   16[COMRAM] float 
  6533 ;; Registers used:
  6534 ;;		wreg, status,2, status,0
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6540 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;Total ram usage:        8 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    3
  6547 ;; This function calls:
  6548 ;;		Nothing
  6549 ;; This function is called by:
  6550 ;;		___awtoft
  6551 ;;		___ftdiv
  6552 ;;		___ftmul
  6553 ;;		___lbtoft
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           	psect	text25
  6558  002626                     __ptext25:
  6559                           	opt stack 0
  6560  002626                     ___ftpack:
  6561                           	opt stack 25
  6562                           
  6563                           ;incstack = 0
  6564  002626  5014               	movf	___ftpack@exp,w,c
  6565  002628  B4D8               	btfsc	status,2,c
  6566  00262A  D005               	goto	l8148
  6567  00262C  5011               	movf	___ftpack@arg,w,c
  6568  00262E  1012               	iorwf	___ftpack@arg+1,w,c
  6569  002630  1013               	iorwf	___ftpack@arg+2,w,c
  6570  002632  A4D8               	btfss	status,2,c
  6571  002634  D00E               	goto	l8154
  6572  002636                     l8148:
  6573  002636  0E00               	movlw	0
  6574  002638  6E11               	movwf	?___ftpack,c
  6575  00263A  0E00               	movlw	0
  6576  00263C  6E12               	movwf	?___ftpack+1,c
  6577  00263E  0E00               	movlw	0
  6578  002640  6E13               	movwf	?___ftpack+2,c
  6579  002642  D053               	goto	l1778
  6580  002644  D006               	goto	l8154
  6581  002646                     l8152:
  6582  002646  2A14               	incf	___ftpack@exp,f,c
  6583  002648  90D8               	bcf	status,0,c
  6584  00264A  3213               	rrcf	___ftpack@arg+2,f,c
  6585  00264C  3212               	rrcf	___ftpack@arg+1,f,c
  6586  00264E  3211               	rrcf	___ftpack@arg,f,c
  6587  002650  D000               	goto	l8154
  6588  002652                     l8154:
  6589  002652  0E00               	movlw	0
  6590  002654  1411               	andwf	___ftpack@arg,w,c
  6591  002656  6E16               	movwf	??___ftpack& (0+255),c
  6592  002658  0E00               	movlw	0
  6593  00265A  1412               	andwf	___ftpack@arg+1,w,c
  6594  00265C  6E17               	movwf	(??___ftpack+1)& (0+255),c
  6595  00265E  0EFE               	movlw	254
  6596  002660  1413               	andwf	___ftpack@arg+2,w,c
  6597  002662  6E18               	movwf	(??___ftpack+2)& (0+255),c
  6598  002664  5016               	movf	??___ftpack,w,c
  6599  002666  1017               	iorwf	??___ftpack+1,w,c
  6600  002668  1018               	iorwf	??___ftpack+2,w,c
  6601  00266A  B4D8               	btfsc	status,2,c
  6602  00266C  D00E               	goto	l8160
  6603  00266E  D7EB               	goto	l8152
  6604  002670  D00C               	goto	l8160
  6605  002672                     l8156:
  6606  002672  2A14               	incf	___ftpack@exp,f,c
  6607  002674  0E01               	movlw	1
  6608  002676  2611               	addwf	___ftpack@arg,f,c
  6609  002678  0E00               	movlw	0
  6610  00267A  2212               	addwfc	___ftpack@arg+1,f,c
  6611  00267C  0E00               	movlw	0
  6612  00267E  2213               	addwfc	___ftpack@arg+2,f,c
  6613  002680  90D8               	bcf	status,0,c
  6614  002682  3213               	rrcf	___ftpack@arg+2,f,c
  6615  002684  3212               	rrcf	___ftpack@arg+1,f,c
  6616  002686  3211               	rrcf	___ftpack@arg,f,c
  6617  002688  D000               	goto	l8160
  6618  00268A                     l8160:
  6619  00268A  0E00               	movlw	0
  6620  00268C  1411               	andwf	___ftpack@arg,w,c
  6621  00268E  6E16               	movwf	??___ftpack& (0+255),c
  6622  002690  0E00               	movlw	0
  6623  002692  1412               	andwf	___ftpack@arg+1,w,c
  6624  002694  6E17               	movwf	(??___ftpack+1)& (0+255),c
  6625  002696  0EFF               	movlw	255
  6626  002698  1413               	andwf	___ftpack@arg+2,w,c
  6627  00269A  6E18               	movwf	(??___ftpack+2)& (0+255),c
  6628  00269C  5016               	movf	??___ftpack,w,c
  6629  00269E  1017               	iorwf	??___ftpack+1,w,c
  6630  0026A0  1018               	iorwf	??___ftpack+2,w,c
  6631  0026A2  B4D8               	btfsc	status,2,c
  6632  0026A4  D008               	goto	l8164
  6633  0026A6  D7E5               	goto	l8156
  6634  0026A8  D006               	goto	l8164
  6635  0026AA                     l8162:
  6636  0026AA  0614               	decf	___ftpack@exp,f,c
  6637  0026AC  90D8               	bcf	status,0,c
  6638  0026AE  3611               	rlcf	___ftpack@arg,f,c
  6639  0026B0  3612               	rlcf	___ftpack@arg+1,f,c
  6640  0026B2  3613               	rlcf	___ftpack@arg+2,f,c
  6641  0026B4  D000               	goto	l8164
  6642  0026B6                     l8164:
  6643  0026B6  BE12               	btfsc	___ftpack@arg+1,7,c
  6644  0026B8  D004               	goto	l1789
  6645  0026BA  0E02               	movlw	2
  6646  0026BC  6014               	cpfslt	___ftpack@exp,c
  6647  0026BE  D7F5               	goto	l8162
  6648  0026C0  D000               	goto	l1789
  6649  0026C2                     l1789:
  6650  0026C2  B014               	btfsc	___ftpack@exp,0,c
  6651  0026C4  D002               	goto	l8170
  6652  0026C6  9E12               	bcf	___ftpack@arg+1,7,c
  6653  0026C8  D000               	goto	l8170
  6654  0026CA                     l8170:
  6655  0026CA  90D8               	bcf	status,0,c
  6656  0026CC  3214               	rrcf	___ftpack@exp,f,c
  6657  0026CE  5014               	movf	___ftpack@exp,w,c
  6658  0026D0  1213               	iorwf	___ftpack@arg+2,f,c
  6659  0026D2  5015               	movf	___ftpack@sign,w,c
  6660  0026D4  B4D8               	btfsc	status,2,c
  6661  0026D6  D002               	goto	l8176
  6662  0026D8  8E13               	bsf	___ftpack@arg+2,7,c
  6663  0026DA  D000               	goto	l8176
  6664  0026DC                     l8176:
  6665  0026DC  C011  F011         	movff	___ftpack@arg,?___ftpack
  6666  0026E0  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  6667  0026E4  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  6668  0026E8  D000               	goto	l1778
  6669  0026EA                     l1778:
  6670  0026EA  0012               	return		;funcret
  6671  0026EC                     __end_of___ftpack:
  6672                           	opt stack 0
  6673                           tblptru	equ	0xFF8
  6674                           tblptrh	equ	0xFF7
  6675                           tblptrl	equ	0xFF6
  6676                           tablat	equ	0xFF5
  6677                           postinc0	equ	0xFEE
  6678                           wreg	equ	0xFE8
  6679                           postdec1	equ	0xFE5
  6680                           fsr1l	equ	0xFE1
  6681                           status	equ	0xFD8
  6682                           
  6683 ;; *************** function _Do_Setup_Time *****************
  6684 ;; Defined at:
  6685 ;;		line 33 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Time.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;		None
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;		None
  6690 ;; Return value:  Size  Location     Type
  6691 ;;		None               void
  6692 ;; Registers used:
  6693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6703 ;;Total ram usage:        0 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; Hardware stack levels required when called:   12
  6706 ;; This function calls:
  6707 ;;		_DS3231_Read_Time
  6708 ;;		_Decrease_Time
  6709 ;;		_Do_Beep_Bad
  6710 ;;		_Do_Beep_Good
  6711 ;;		_Do_Save_New_Time
  6712 ;;		_Exit_Time_Setup
  6713 ;;		_Go_Next_Field
  6714 ;;		_Go_Prev_Field
  6715 ;;		_Increase_Time
  6716 ;;		_Initialize_Setup_Time_Screen
  6717 ;;		_Update_Setup_Time_Screen
  6718 ;;		_bcd_2_dec
  6719 ;;		_check_for_button_input
  6720 ;; This function is called by:
  6721 ;;		_main
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           	psect	text26
  6726  00255C                     __ptext26:
  6727                           	opt stack 0
  6728  00255C                     _Do_Setup_Time:
  6729                           	opt stack 18
  6730                           
  6731                           ;Setup_Time.c: 36: Select_Field = 0;
  6732                           
  6733                           ;incstack = 0
  6734  00255C  0E00               	movlw	0
  6735  00255E  6E57               	movwf	_Select_Field,c
  6736                           
  6737                           ;Setup_Time.c: 38: DS3231_Read_Time();
  6738  002560  EC67  F018         	call	_DS3231_Read_Time	;wreg free
  6739                           
  6740                           ;Setup_Time.c: 39: setup_second = bcd_2_dec(second);
  6741  002564  5063               	movf	_second,w,c
  6742  002566  ECFD  F01B         	call	_bcd_2_dec
  6743  00256A  6E6B               	movwf	_setup_second,c
  6744                           
  6745                           ;Setup_Time.c: 40: setup_minute = bcd_2_dec(minute);
  6746  00256C  5061               	movf	_minute,w,c
  6747  00256E  ECFD  F01B         	call	_bcd_2_dec
  6748  002572  6E69               	movwf	_setup_minute,c
  6749                           
  6750                           ;Setup_Time.c: 41: setup_hour = bcd_2_dec(hour);
  6751  002574  5060               	movf	_hour,w,c
  6752  002576  ECFD  F01B         	call	_bcd_2_dec
  6753  00257A  6E68               	movwf	_setup_hour,c
  6754                           
  6755                           ;Setup_Time.c: 42: setup_day = bcd_2_dec(day);
  6756  00257C  505D               	movf	_day,w,c
  6757  00257E  ECFD  F01B         	call	_bcd_2_dec
  6758  002582  6E67               	movwf	_setup_day,c
  6759                           
  6760                           ;Setup_Time.c: 43: setup_month = bcd_2_dec(month);
  6761  002584  5062               	movf	_month,w,c
  6762  002586  ECFD  F01B         	call	_bcd_2_dec
  6763  00258A  6E6A               	movwf	_setup_month,c
  6764                           
  6765                           ;Setup_Time.c: 44: setup_year = bcd_2_dec(year);
  6766  00258C  506D               	movf	_year,w,c
  6767  00258E  ECFD  F01B         	call	_bcd_2_dec
  6768  002592  6E6C               	movwf	_setup_year,c
  6769                           
  6770                           ;Setup_Time.c: 46: Initialize_Setup_Time_Screen();
  6771  002594  EC8D  F00D         	call	_Initialize_Setup_Time_Screen	;wreg free
  6772                           
  6773                           ;Setup_Time.c: 47: Update_Setup_Time_Screen();
  6774  002598  EC15  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  6775                           
  6776                           ;Setup_Time.c: 48: In_Time_Setup = 1;
  6777  00259C  0E01               	movlw	1
  6778  00259E  0100               	movlb	0	; () banked
  6779  0025A0  6FF2               	movwf	_In_Time_Setup& (0+255),b
  6780                           
  6781                           ;Setup_Time.c: 50: while (In_Time_Setup == 1)
  6782  0025A2  D03C               	goto	l9700
  6783  0025A4                     l9664:
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;Setup_Time.c: 51: {
  6787                           ;Setup_Time.c: 52: if (check_for_button_input() == 1)
  6788  0025A4  EC49  F016         	call	_check_for_button_input	;wreg free
  6789  0025A8  06E8               	decf	wreg,f,c
  6790  0025AA  A4D8               	btfss	status,2,c
  6791  0025AC  D037               	goto	l9700
  6792                           
  6793                           ;Setup_Time.c: 53: {
  6794                           ;Setup_Time.c: 55: if (found >= 3 && found <= 8)
  6795  0025AE  0E02               	movlw	2
  6796  0025B0  645F               	cpfsgt	_found,c
  6797  0025B2  D031               	goto	l9698
  6798  0025B4  0E09               	movlw	9
  6799  0025B6  605F               	cpfslt	_found,c
  6800  0025B8  D02E               	goto	l9698
  6801                           
  6802                           ;Setup_Time.c: 56: {
  6803                           ;Setup_Time.c: 57: Do_Beep_Good();
  6804  0025BA  EC11  F01E         	call	_Do_Beep_Good	;wreg free
  6805                           
  6806                           ;Setup_Time.c: 58: if (found == 3) Go_Prev_Field();
  6807  0025BE  0E03               	movlw	3
  6808  0025C0  185F               	xorwf	_found,w,c
  6809  0025C2  A4D8               	btfss	status,2,c
  6810  0025C4  D003               	goto	l9676
  6811  0025C6  ECFD  F01C         	call	_Go_Prev_Field	;wreg free
  6812  0025CA  D000               	goto	l9676
  6813  0025CC                     l9676:
  6814                           
  6815                           ;Setup_Time.c: 60: if (found == 4) Go_Next_Field();
  6816  0025CC  0E04               	movlw	4
  6817  0025CE  185F               	xorwf	_found,w,c
  6818  0025D0  A4D8               	btfss	status,2,c
  6819  0025D2  D003               	goto	l9680
  6820  0025D4  EC09  F01D         	call	_Go_Next_Field	;wreg free
  6821  0025D8  D000               	goto	l9680
  6822  0025DA                     l9680:
  6823                           
  6824                           ;Setup_Time.c: 62: if (found == 5) Do_Save_New_Time();;
  6825  0025DA  0E05               	movlw	5
  6826  0025DC  185F               	xorwf	_found,w,c
  6827  0025DE  A4D8               	btfss	status,2,c
  6828  0025E0  D003               	goto	l9684
  6829  0025E2  EC4F  F01D         	call	_Do_Save_New_Time	;wreg free
  6830  0025E6  D000               	goto	l9684
  6831  0025E8                     l9684:
  6832                           
  6833                           ;Setup_Time.c: 64: if (found == 6) Decrease_Time();
  6834  0025E8  0E06               	movlw	6
  6835  0025EA  185F               	xorwf	_found,w,c
  6836  0025EC  A4D8               	btfss	status,2,c
  6837  0025EE  D003               	goto	l9688
  6838  0025F0  EC73  F01C         	call	_Decrease_Time	;wreg free
  6839  0025F4  D000               	goto	l9688
  6840  0025F6                     l9688:
  6841                           
  6842                           ;Setup_Time.c: 66: if (found == 7) Increase_Time();
  6843  0025F6  0E07               	movlw	7
  6844  0025F8  185F               	xorwf	_found,w,c
  6845  0025FA  A4D8               	btfss	status,2,c
  6846  0025FC  D003               	goto	l9692
  6847  0025FE  EC72  F015         	call	_Increase_Time	;wreg free
  6848  002602  D000               	goto	l9692
  6849  002604                     l9692:
  6850                           
  6851                           ;Setup_Time.c: 68: if (found == 8) Exit_Time_Setup();
  6852  002604  0E08               	movlw	8
  6853  002606  185F               	xorwf	_found,w,c
  6854  002608  A4D8               	btfss	status,2,c
  6855  00260A  D003               	goto	l9696
  6856  00260C  ECAC  F01D         	call	_Exit_Time_Setup	;wreg free
  6857  002610  D000               	goto	l9696
  6858  002612                     l9696:
  6859                           
  6860                           ;Setup_Time.c: 70: found = 0xff;
  6861  002612  685F               	setf	_found,c
  6862                           
  6863                           ;Setup_Time.c: 71: }
  6864  002614  D003               	goto	l9700
  6865  002616                     l9698:
  6866                           
  6867                           ;Setup_Time.c: 72: else
  6868                           ;Setup_Time.c: 73: {
  6869                           ;Setup_Time.c: 74: Do_Beep_Bad();
  6870  002616  EC14  F01E         	call	_Do_Beep_Bad	;wreg free
  6871  00261A  D000               	goto	l9700
  6872  00261C                     l9700:
  6873  00261C  0100               	movlb	0	; () banked
  6874  00261E  05F2               	decf	_In_Time_Setup& (0+255),w,b
  6875  002620  B4D8               	btfsc	status,2,c
  6876  002622  D7C0               	goto	l9664
  6877                           
  6878                           ; BSR set to: 0
  6879                           
  6880                           ; BSR set to: 0
  6881  002624  0012               	return		;funcret
  6882  002626                     __end_of_Do_Setup_Time:
  6883                           	opt stack 0
  6884                           tblptru	equ	0xFF8
  6885                           tblptrh	equ	0xFF7
  6886                           tblptrl	equ	0xFF6
  6887                           tablat	equ	0xFF5
  6888                           postinc0	equ	0xFEE
  6889                           wreg	equ	0xFE8
  6890                           postdec1	equ	0xFE5
  6891                           fsr1l	equ	0xFE1
  6892                           status	equ	0xFD8
  6893                           
  6894 ;; *************** function _Initialize_Setup_Time_Screen *****************
  6895 ;; Defined at:
  6896 ;;		line 171 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Time.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;		None
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;		None
  6901 ;; Return value:  Size  Location     Type
  6902 ;;		None               void
  6903 ;; Registers used:
  6904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;Total ram usage:        0 bytes
  6915 ;; Hardware stack levels used:    1
  6916 ;; Hardware stack levels required when called:   10
  6917 ;; This function calls:
  6918 ;;		_drawtext
  6919 ;;		_fillRect
  6920 ;;		_fillScreen
  6921 ;;		_strcpy
  6922 ;; This function is called by:
  6923 ;;		_Do_Setup_Time
  6924 ;; This function uses a non-reentrant model
  6925 ;;
  6926                           
  6927                           	psect	text27
  6928  001B1A                     __ptext27:
  6929                           	opt stack 0
  6930  001B1A                     _Initialize_Setup_Time_Screen:
  6931                           	opt stack 19
  6932                           
  6933                           ;Setup_Time.c: 173: fillScreen(0x0000);
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;incstack = 0
  6937  001B1A  0E00               	movlw	0
  6938  001B1C  6E25               	movwf	fillScreen@color+1,c
  6939  001B1E  0E00               	movlw	0
  6940  001B20  6E24               	movwf	fillScreen@color,c
  6941  001B22  ECE2  F01C         	call	_fillScreen	;wreg free
  6942                           
  6943                           ;Setup_Time.c: 175: strcpy(txt, "ECE3301L Sp'22 Sx\0");
  6944  001B26  C052  F011         	movff	_txt,strcpy@to
  6945  001B2A  C053  F012         	movff	_txt+1,strcpy@to+1
  6946  001B2E  0EE6               	movlw	low (STR_8+1)
  6947  001B30  6E13               	movwf	strcpy@from,c
  6948  001B32  0EFE               	movlw	high (STR_8+1)
  6949  001B34  6E14               	movwf	strcpy@from+1,c
  6950  001B36  ECA1  F01B         	call	_strcpy	;wreg free
  6951                           
  6952                           ;Setup_Time.c: 176: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  6953  001B3A  0E01               	movlw	1
  6954  001B3C  6E39               	movwf	drawtext@y,c
  6955  001B3E  C052  F03A         	movff	_txt,drawtext@_text
  6956  001B42  C053  F03B         	movff	_txt+1,drawtext@_text+1
  6957  001B46  0EFF               	movlw	255
  6958  001B48  6E3D               	movwf	drawtext@color+1,c
  6959  001B4A  683C               	setf	drawtext@color,c
  6960  001B4C  0E00               	movlw	0
  6961  001B4E  6E3F               	movwf	drawtext@bg+1,c
  6962  001B50  0E00               	movlw	0
  6963  001B52  6E3E               	movwf	drawtext@bg,c
  6964  001B54  0E01               	movlw	1
  6965  001B56  6E40               	movwf	drawtext@size,c
  6966  001B58  0E01               	movlw	1
  6967  001B5A  EC64  F011         	call	_drawtext
  6968                           
  6969                           ;Setup_Time.c: 179: strcpy(txt, "Time Setup\0");
  6970  001B5E  C052  F011         	movff	_txt,strcpy@to
  6971  001B62  C053  F012         	movff	_txt+1,strcpy@to+1
  6972  001B66  0E89               	movlw	low STR_36
  6973  001B68  6E13               	movwf	strcpy@from,c
  6974  001B6A  0EFF               	movlw	high STR_36
  6975  001B6C  6E14               	movwf	strcpy@from+1,c
  6976  001B6E  ECA1  F01B         	call	_strcpy	;wreg free
  6977                           
  6978                           ;Setup_Time.c: 180: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  6979  001B72  0E10               	movlw	16
  6980  001B74  6E39               	movwf	drawtext@y,c
  6981  001B76  C052  F03A         	movff	_txt,drawtext@_text
  6982  001B7A  C053  F03B         	movff	_txt+1,drawtext@_text+1
  6983  001B7E  0EF8               	movlw	248
  6984  001B80  6E3D               	movwf	drawtext@color+1,c
  6985  001B82  0E1F               	movlw	31
  6986  001B84  6E3C               	movwf	drawtext@color,c
  6987  001B86  0E00               	movlw	0
  6988  001B88  6E3F               	movwf	drawtext@bg+1,c
  6989  001B8A  0E00               	movlw	0
  6990  001B8C  6E3E               	movwf	drawtext@bg,c
  6991  001B8E  0E02               	movlw	2
  6992  001B90  6E40               	movwf	drawtext@size,c
  6993  001B92  0E04               	movlw	4
  6994  001B94  EC64  F011         	call	_drawtext
  6995                           
  6996                           ;Setup_Time.c: 182: strcpy(txt, "Time");
  6997  001B98  C052  F011         	movff	_txt,strcpy@to
  6998  001B9C  C053  F012         	movff	_txt+1,strcpy@to+1
  6999  001BA0  0EB1               	movlw	low (STR_14+6)
  7000  001BA2  6E13               	movwf	strcpy@from,c
  7001  001BA4  0EFF               	movlw	high (STR_14+6)
  7002  001BA6  6E14               	movwf	strcpy@from+1,c
  7003  001BA8  ECA1  F01B         	call	_strcpy	;wreg free
  7004                           
  7005                           ;Setup_Time.c: 183: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  7006  001BAC  0E28               	movlw	40
  7007  001BAE  6E39               	movwf	drawtext@y,c
  7008  001BB0  C052  F03A         	movff	_txt,drawtext@_text
  7009  001BB4  C053  F03B         	movff	_txt+1,drawtext@_text+1
  7010  001BB8  0E00               	movlw	0
  7011  001BBA  6E3D               	movwf	drawtext@color+1,c
  7012  001BBC  0E1F               	movlw	31
  7013  001BBE  6E3C               	movwf	drawtext@color,c
  7014  001BC0  0E00               	movlw	0
  7015  001BC2  6E3F               	movwf	drawtext@bg+1,c
  7016  001BC4  0E00               	movlw	0
  7017  001BC6  6E3E               	movwf	drawtext@bg,c
  7018  001BC8  0E01               	movlw	1
  7019  001BCA  6E40               	movwf	drawtext@size,c
  7020  001BCC  0E32               	movlw	50
  7021  001BCE  EC64  F011         	call	_drawtext
  7022                           
  7023                           ;Setup_Time.c: 185: fillRect(15-1, 52+16, 25,2,0x07FF);
  7024  001BD2  0E44               	movlw	68
  7025  001BD4  6E23               	movwf	fillRect@y,c
  7026  001BD6  0E19               	movlw	25
  7027  001BD8  6E24               	movwf	fillRect@w,c
  7028  001BDA  0E02               	movlw	2
  7029  001BDC  6E25               	movwf	fillRect@h,c
  7030  001BDE  0E07               	movlw	7
  7031  001BE0  6E27               	movwf	fillRect@color+1,c
  7032  001BE2  6826               	setf	fillRect@color,c
  7033  001BE4  0E0E               	movlw	14
  7034  001BE6  EC63  F01A         	call	_fillRect
  7035                           
  7036                           ;Setup_Time.c: 186: strcpy(txt, "Date");
  7037  001BEA  C052  F011         	movff	_txt,strcpy@to
  7038  001BEE  C053  F012         	movff	_txt+1,strcpy@to+1
  7039  001BF2  0EE0               	movlw	low STR_13
  7040  001BF4  6E13               	movwf	strcpy@from,c
  7041  001BF6  0EFF               	movlw	high STR_13
  7042  001BF8  6E14               	movwf	strcpy@from+1,c
  7043  001BFA  ECA1  F01B         	call	_strcpy	;wreg free
  7044                           
  7045                           ;Setup_Time.c: 187: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  7046  001BFE  0E47               	movlw	71
  7047  001C00  6E39               	movwf	drawtext@y,c
  7048  001C02  C052  F03A         	movff	_txt,drawtext@_text
  7049  001C06  C053  F03B         	movff	_txt+1,drawtext@_text+1
  7050  001C0A  0EF8               	movlw	248
  7051  001C0C  6E3D               	movwf	drawtext@color+1,c
  7052  001C0E  0E00               	movlw	0
  7053  001C10  6E3C               	movwf	drawtext@color,c
  7054  001C12  0E00               	movlw	0
  7055  001C14  6E3F               	movwf	drawtext@bg+1,c
  7056  001C16  0E00               	movlw	0
  7057  001C18  6E3E               	movwf	drawtext@bg,c
  7058  001C1A  0E01               	movlw	1
  7059  001C1C  6E40               	movwf	drawtext@size,c
  7060  001C1E  0E32               	movlw	50
  7061  001C20  EC64  F011         	call	_drawtext
  7062  001C24  0012               	return		;funcret
  7063  001C26                     __end_of_Initialize_Setup_Time_Screen:
  7064                           	opt stack 0
  7065                           tblptru	equ	0xFF8
  7066                           tblptrh	equ	0xFF7
  7067                           tblptrl	equ	0xFF6
  7068                           tablat	equ	0xFF5
  7069                           postinc0	equ	0xFEE
  7070                           wreg	equ	0xFE8
  7071                           postdec1	equ	0xFE5
  7072                           fsr1l	equ	0xFE1
  7073                           status	equ	0xFD8
  7074                           
  7075 ;; *************** function _Go_Prev_Field *****************
  7076 ;; Defined at:
  7077 ;;		line 150 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Time.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;		None
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;		None
  7082 ;; Return value:  Size  Location     Type
  7083 ;;		None               void
  7084 ;; Registers used:
  7085 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7095 ;;Total ram usage:        0 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    9
  7098 ;; This function calls:
  7099 ;;		_Update_Setup_Screen_Cursor_Backward
  7100 ;; This function is called by:
  7101 ;;		_Do_Setup_Time
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           	psect	text28
  7106  0039FA                     __ptext28:
  7107                           	opt stack 0
  7108  0039FA                     _Go_Prev_Field:
  7109                           	opt stack 20
  7110                           
  7111                           ;Setup_Time.c: 152: if (Select_Field == 0) Select_Field = 5;
  7112                           
  7113                           ;incstack = 0
  7114  0039FA  5057               	movf	_Select_Field,w,c
  7115  0039FC  A4D8               	btfss	status,2,c
  7116  0039FE  D003               	goto	l9324
  7117  003A00  0E05               	movlw	5
  7118  003A02  6E57               	movwf	_Select_Field,c
  7119  003A04  D002               	goto	l9326
  7120  003A06                     l9324:
  7121                           
  7122                           ;Setup_Time.c: 153: else Select_Field--;
  7123  003A06  0657               	decf	_Select_Field,f,c
  7124  003A08  D000               	goto	l9326
  7125  003A0A                     l9326:
  7126                           
  7127                           ;Setup_Time.c: 154: Update_Setup_Screen_Cursor_Backward(Select_Field);
  7128  003A0A  5057               	movf	_Select_Field,w,c
  7129  003A0C  EC64  F008         	call	_Update_Setup_Screen_Cursor_Backward
  7130  003A10  0012               	return		;funcret
  7131  003A12                     __end_of_Go_Prev_Field:
  7132                           	opt stack 0
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           postinc0	equ	0xFEE
  7138                           wreg	equ	0xFE8
  7139                           postdec1	equ	0xFE5
  7140                           fsr1l	equ	0xFE1
  7141                           status	equ	0xFD8
  7142                           
  7143 ;; *************** function _Do_Setup_Heater_Temp *****************
  7144 ;; Defined at:
  7145 ;;		line 25 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Heater_Temp.c
      +"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;		None
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;		None
  7150 ;; Return value:  Size  Location     Type
  7151 ;;		None               void
  7152 ;; Registers used:
  7153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/0
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;Total ram usage:        0 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; Hardware stack levels required when called:   12
  7166 ;; This function calls:
  7167 ;;		_Decrease_Time
  7168 ;;		_Do_Beep_Bad
  7169 ;;		_Do_Beep_Good
  7170 ;;		_Do_Save_New_Time
  7171 ;;		_Exit_Time_Setup
  7172 ;;		_Go_Next_Field
  7173 ;;		_Increase_Time
  7174 ;;		_Initialize_Setup_Heater_Screen
  7175 ;;		_Update_Setup_Heater_Screen
  7176 ;;		_check_for_button_input
  7177 ;; This function is called by:
  7178 ;;		_main
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           	psect	text29
  7183  002C04                     __ptext29:
  7184                           	opt stack 0
  7185  002C04                     _Do_Setup_Heater_Temp:
  7186                           	opt stack 18
  7187                           
  7188                           ;Setup_Heater_Temp.c: 28: In_Heater_Temp_Setup = 1;
  7189                           
  7190                           ;incstack = 0
  7191  002C04  0E01               	movlw	1
  7192  002C06  6E55               	movwf	_In_Heater_Temp_Setup,c
  7193                           
  7194                           ;Setup_Heater_Temp.c: 29: setup_heater_set_temp = heater_set_temp;
  7195  002C08  C06E  F0FA         	movff	_heater_set_temp,_setup_heater_set_temp
  7196                           
  7197                           ;Setup_Heater_Temp.c: 30: Initialize_Setup_Heater_Screen();
  7198  002C0C  EC15  F00F         	call	_Initialize_Setup_Heater_Screen	;wreg free
  7199                           
  7200                           ;Setup_Heater_Temp.c: 31: Update_Setup_Heater_Screen();
  7201  002C10  EC32  F018         	call	_Update_Setup_Heater_Screen	;wreg free
  7202                           
  7203                           ;Setup_Heater_Temp.c: 33: while (In_Heater_Temp_Setup == 1)
  7204  002C14  D03A               	goto	l9802
  7205  002C16                     l9768:
  7206                           
  7207                           ;Setup_Heater_Temp.c: 34: {
  7208                           ;Setup_Heater_Temp.c: 35: if (check_for_button_input() == 1)
  7209  002C16  EC49  F016         	call	_check_for_button_input	;wreg free
  7210  002C1A  06E8               	decf	wreg,f,c
  7211  002C1C  A4D8               	btfss	status,2,c
  7212  002C1E  D035               	goto	l9802
  7213                           
  7214                           ;Setup_Heater_Temp.c: 36: {
  7215                           ;Setup_Heater_Temp.c: 37: nec_ok = 0;
  7216  002C20  0E00               	movlw	0
  7217  002C22  0100               	movlb	0	; () banked
  7218  002C24  6FEC               	movwf	(_nec_ok+1)& (0+255),b
  7219  002C26  0E00               	movlw	0
  7220  002C28  6FEB               	movwf	_nec_ok& (0+255),b
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;Setup_Heater_Temp.c: 38: if (found >= 5 && found <= 8)
  7224  002C2A  0E04               	movlw	4
  7225  002C2C  645F               	cpfsgt	_found,c
  7226  002C2E  D02A               	goto	l9800
  7227                           
  7228                           ; BSR set to: 0
  7229  002C30  0E09               	movlw	9
  7230  002C32  605F               	cpfslt	_found,c
  7231  002C34  D027               	goto	l9800
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;Setup_Heater_Temp.c: 39: {
  7235                           ;Setup_Heater_Temp.c: 40: Do_Beep_Good();
  7236  002C36  EC11  F01E         	call	_Do_Beep_Good	;wreg free
  7237                           
  7238                           ;Setup_Heater_Temp.c: 42: if (found == 4) {Go_Next_Field();}
  7239  002C3A  0E04               	movlw	4
  7240  002C3C  185F               	xorwf	_found,w,c
  7241  002C3E  A4D8               	btfss	status,2,c
  7242  002C40  D003               	goto	l9782
  7243  002C42  EC09  F01D         	call	_Go_Next_Field	;wreg free
  7244  002C46  D000               	goto	l9782
  7245  002C48                     l9782:
  7246                           
  7247                           ;Setup_Heater_Temp.c: 44: if (found == 5) {Do_Save_New_Time();}
  7248  002C48  0E05               	movlw	5
  7249  002C4A  185F               	xorwf	_found,w,c
  7250  002C4C  A4D8               	btfss	status,2,c
  7251  002C4E  D003               	goto	l9786
  7252  002C50  EC4F  F01D         	call	_Do_Save_New_Time	;wreg free
  7253  002C54  D000               	goto	l9786
  7254  002C56                     l9786:
  7255                           
  7256                           ;Setup_Heater_Temp.c: 46: if (found == 6) {Decrease_Time();}
  7257  002C56  0E06               	movlw	6
  7258  002C58  185F               	xorwf	_found,w,c
  7259  002C5A  A4D8               	btfss	status,2,c
  7260  002C5C  D003               	goto	l9790
  7261  002C5E  EC73  F01C         	call	_Decrease_Time	;wreg free
  7262  002C62  D000               	goto	l9790
  7263  002C64                     l9790:
  7264                           
  7265                           ;Setup_Heater_Temp.c: 48: if (found == 7) {Increase_Time();}
  7266  002C64  0E07               	movlw	7
  7267  002C66  185F               	xorwf	_found,w,c
  7268  002C68  A4D8               	btfss	status,2,c
  7269  002C6A  D003               	goto	l9794
  7270  002C6C  EC72  F015         	call	_Increase_Time	;wreg free
  7271  002C70  D000               	goto	l9794
  7272  002C72                     l9794:
  7273                           
  7274                           ;Setup_Heater_Temp.c: 50: if (found == 8) {Exit_Time_Setup();}
  7275  002C72  0E08               	movlw	8
  7276  002C74  185F               	xorwf	_found,w,c
  7277  002C76  A4D8               	btfss	status,2,c
  7278  002C78  D003               	goto	l9798
  7279  002C7A  ECAC  F01D         	call	_Exit_Time_Setup	;wreg free
  7280  002C7E  D000               	goto	l9798
  7281  002C80                     l9798:
  7282                           
  7283                           ;Setup_Heater_Temp.c: 52: found = 0xff;
  7284  002C80  685F               	setf	_found,c
  7285                           
  7286                           ;Setup_Heater_Temp.c: 53: }
  7287  002C82  D003               	goto	l9802
  7288  002C84                     l9800:
  7289                           
  7290                           ;Setup_Heater_Temp.c: 54: else
  7291                           ;Setup_Heater_Temp.c: 55: {
  7292                           ;Setup_Heater_Temp.c: 56: Do_Beep_Bad();
  7293  002C84  EC14  F01E         	call	_Do_Beep_Bad	;wreg free
  7294  002C88  D000               	goto	l9802
  7295  002C8A                     l9802:
  7296  002C8A  0455               	decf	_In_Heater_Temp_Setup,w,c
  7297  002C8C  B4D8               	btfsc	status,2,c
  7298  002C8E  D7C3               	goto	l9768
  7299  002C90  0012               	return		;funcret
  7300  002C92                     __end_of_Do_Setup_Heater_Temp:
  7301                           	opt stack 0
  7302                           tblptru	equ	0xFF8
  7303                           tblptrh	equ	0xFF7
  7304                           tblptrl	equ	0xFF6
  7305                           tablat	equ	0xFF5
  7306                           postinc0	equ	0xFEE
  7307                           wreg	equ	0xFE8
  7308                           postdec1	equ	0xFE5
  7309                           fsr1l	equ	0xFE1
  7310                           status	equ	0xFD8
  7311                           
  7312 ;; *************** function _Update_Setup_Heater_Screen *****************
  7313 ;; Defined at:
  7314 ;;		line 117 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Heater_Temp.
      +c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;		None
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;  dc_char3        1    2[BANK0 ] unsigned char 
  7319 ;;  dc_char2        1    1[BANK0 ] unsigned char 
  7320 ;;  dc_char1        1    0[BANK0 ] unsigned char 
  7321 ;; Return value:  Size  Location     Type
  7322 ;;		None               void
  7323 ;; Registers used:
  7324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7333 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7334 ;;Total ram usage:        3 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:   10
  7337 ;; This function calls:
  7338 ;;		___awdiv
  7339 ;;		_drawtext
  7340 ;; This function is called by:
  7341 ;;		_Do_Setup_Heater_Temp
  7342 ;;		_Increase_Heater_Temp
  7343 ;;		_Decrease_Heater_Temp
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           	psect	text30
  7348  003064                     __ptext30:
  7349                           	opt stack 0
  7350  003064                     _Update_Setup_Heater_Screen:
  7351                           	opt stack 19
  7352                           
  7353                           ;Setup_Heater_Temp.c: 119: char dc_char1 = setup_heater_set_temp/100;
  7354                           
  7355                           ;incstack = 0
  7356  003064  C0FA  F017         	movff	_setup_heater_set_temp,___awdiv@dividend
  7357  003068  6A18               	clrf	___awdiv@dividend+1,c
  7358  00306A  0E00               	movlw	0
  7359  00306C  6E1A               	movwf	___awdiv@divisor+1,c
  7360  00306E  0E64               	movlw	100
  7361  003070  6E19               	movwf	___awdiv@divisor,c
  7362  003072  EC27  F015         	call	___awdiv	;wreg free
  7363  003076  5017               	movf	?___awdiv,w,c
  7364  003078  0100               	movlb	0	; () banked
  7365  00307A  6FFB               	movwf	Update_Setup_Heater_Screen@dc_char1& (0+255),b
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;Setup_Heater_Temp.c: 120: char dc_char2 = 0;
  7369  00307C  0E00               	movlw	0
  7370  00307E  0100               	movlb	0	; () banked
  7371  003080  6FFC               	movwf	Update_Setup_Heater_Screen@dc_char2& (0+255),b
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;Setup_Heater_Temp.c: 121: char dc_char3 = 0;
  7375  003082  0E00               	movlw	0
  7376  003084  0100               	movlb	0	; () banked
  7377  003086  6FFD               	movwf	Update_Setup_Heater_Screen@dc_char3& (0+255),b
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;Setup_Heater_Temp.c: 122: setup_heater_set_text[0] = dc_char1 + '0';
  7381  003088  0100               	movlb	0	; () banked
  7382  00308A  51FB               	movf	Update_Setup_Heater_Screen@dc_char1& (0+255),w,b
  7383  00308C  0F30               	addlw	48
  7384  00308E  0100               	movlb	0	; () banked
  7385  003090  6FBF               	movwf	_setup_heater_set_text& (0+255),b
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;Setup_Heater_Temp.c: 123: setup_heater_set_text[1] = dc_char2 + '0';
  7389  003092  0100               	movlb	0	; () banked
  7390  003094  51FC               	movf	Update_Setup_Heater_Screen@dc_char2& (0+255),w,b
  7391  003096  0F30               	addlw	48
  7392  003098  0100               	movlb	0	; () banked
  7393  00309A  6FC0               	movwf	(_setup_heater_set_text+1)& (0+255),b
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;Setup_Heater_Temp.c: 124: setup_heater_set_text[2] = dc_char3 + '0';
  7397  00309C  0100               	movlb	0	; () banked
  7398  00309E  51FD               	movf	Update_Setup_Heater_Screen@dc_char3& (0+255),w,b
  7399  0030A0  0F30               	addlw	48
  7400  0030A2  0100               	movlb	0	; () banked
  7401  0030A4  6FC1               	movwf	(_setup_heater_set_text+2)& (0+255),b
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;Setup_Heater_Temp.c: 125: drawtext(40, 74 ,setup_heater_set_text, 0xF800, 0x0000, 2);
  7405  0030A6  0E4A               	movlw	74
  7406  0030A8  6E39               	movwf	drawtext@y,c
  7407  0030AA  0EBF               	movlw	low _setup_heater_set_text
  7408  0030AC  6E3A               	movwf	drawtext@_text,c
  7409  0030AE  0E00               	movlw	high _setup_heater_set_text
  7410  0030B0  6E3B               	movwf	drawtext@_text+1,c
  7411  0030B2  0EF8               	movlw	248
  7412  0030B4  6E3D               	movwf	drawtext@color+1,c
  7413  0030B6  0E00               	movlw	0
  7414  0030B8  6E3C               	movwf	drawtext@color,c
  7415  0030BA  0E00               	movlw	0
  7416  0030BC  6E3F               	movwf	drawtext@bg+1,c
  7417  0030BE  0E00               	movlw	0
  7418  0030C0  6E3E               	movwf	drawtext@bg,c
  7419  0030C2  0E02               	movlw	2
  7420  0030C4  6E40               	movwf	drawtext@size,c
  7421  0030C6  0E28               	movlw	40
  7422  0030C8  EC64  F011         	call	_drawtext
  7423  0030CC  0012               	return		;funcret
  7424  0030CE                     __end_of_Update_Setup_Heater_Screen:
  7425                           	opt stack 0
  7426                           tblptru	equ	0xFF8
  7427                           tblptrh	equ	0xFF7
  7428                           tblptrl	equ	0xFF6
  7429                           tablat	equ	0xFF5
  7430                           postinc0	equ	0xFEE
  7431                           wreg	equ	0xFE8
  7432                           postdec1	equ	0xFE5
  7433                           fsr1l	equ	0xFE1
  7434                           status	equ	0xFD8
  7435                           
  7436 ;; *************** function _Initialize_Setup_Heater_Screen *****************
  7437 ;; Defined at:
  7438 ;;		line 102 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Heater_Temp.
      +c"
  7439 ;; Parameters:    Size  Location     Type
  7440 ;;		None
  7441 ;; Auto vars:     Size  Location     Type
  7442 ;;		None
  7443 ;; Return value:  Size  Location     Type
  7444 ;;		None               void
  7445 ;; Registers used:
  7446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7456 ;;Total ram usage:        0 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:   10
  7459 ;; This function calls:
  7460 ;;		_drawtext
  7461 ;;		_fillScreen
  7462 ;;		_strcpy
  7463 ;; This function is called by:
  7464 ;;		_Do_Setup_Heater_Temp
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           	psect	text31
  7469  001E2A                     __ptext31:
  7470                           	opt stack 0
  7471  001E2A                     _Initialize_Setup_Heater_Screen:
  7472                           	opt stack 19
  7473                           
  7474                           ;Setup_Heater_Temp.c: 104: fillScreen(0x0000);
  7475                           
  7476                           ;incstack = 0
  7477  001E2A  0E00               	movlw	0
  7478  001E2C  6E25               	movwf	fillScreen@color+1,c
  7479  001E2E  0E00               	movlw	0
  7480  001E30  6E24               	movwf	fillScreen@color,c
  7481  001E32  ECE2  F01C         	call	_fillScreen	;wreg free
  7482                           
  7483                           ;Setup_Heater_Temp.c: 106: strcpy(txt, "ECE3301L Sp'22 Sx\0");
  7484  001E36  C052  F011         	movff	_txt,strcpy@to
  7485  001E3A  C053  F012         	movff	_txt+1,strcpy@to+1
  7486  001E3E  0EE6               	movlw	low (STR_8+1)
  7487  001E40  6E13               	movwf	strcpy@from,c
  7488  001E42  0EFE               	movlw	high (STR_8+1)
  7489  001E44  6E14               	movwf	strcpy@from+1,c
  7490  001E46  ECA1  F01B         	call	_strcpy	;wreg free
  7491                           
  7492                           ;Setup_Heater_Temp.c: 107: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  7493  001E4A  0E01               	movlw	1
  7494  001E4C  6E39               	movwf	drawtext@y,c
  7495  001E4E  C052  F03A         	movff	_txt,drawtext@_text
  7496  001E52  C053  F03B         	movff	_txt+1,drawtext@_text+1
  7497  001E56  0EFF               	movlw	255
  7498  001E58  6E3D               	movwf	drawtext@color+1,c
  7499  001E5A  683C               	setf	drawtext@color,c
  7500  001E5C  0E00               	movlw	0
  7501  001E5E  6E3F               	movwf	drawtext@bg+1,c
  7502  001E60  0E00               	movlw	0
  7503  001E62  6E3E               	movwf	drawtext@bg,c
  7504  001E64  0E01               	movlw	1
  7505  001E66  6E40               	movwf	drawtext@size,c
  7506  001E68  0E01               	movlw	1
  7507  001E6A  EC64  F011         	call	_drawtext
  7508                           
  7509                           ;Setup_Heater_Temp.c: 109: strcpy(txt, "  Heater\0 ");
  7510  001E6E  C052  F011         	movff	_txt,strcpy@to
  7511  001E72  C053  F012         	movff	_txt+1,strcpy@to+1
  7512  001E76  0E95               	movlw	low STR_32
  7513  001E78  6E13               	movwf	strcpy@from,c
  7514  001E7A  0EFF               	movlw	high STR_32
  7515  001E7C  6E14               	movwf	strcpy@from+1,c
  7516  001E7E  ECA1  F01B         	call	_strcpy	;wreg free
  7517                           
  7518                           ;Setup_Heater_Temp.c: 110: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  7519  001E82  0E1A               	movlw	26
  7520  001E84  6E39               	movwf	drawtext@y,c
  7521  001E86  C052  F03A         	movff	_txt,drawtext@_text
  7522  001E8A  C053  F03B         	movff	_txt+1,drawtext@_text+1
  7523  001E8E  0EFF               	movlw	255
  7524  001E90  6E3D               	movwf	drawtext@color+1,c
  7525  001E92  0EE0               	movlw	224
  7526  001E94  6E3C               	movwf	drawtext@color,c
  7527  001E96  0E00               	movlw	0
  7528  001E98  6E3F               	movwf	drawtext@bg+1,c
  7529  001E9A  0E00               	movlw	0
  7530  001E9C  6E3E               	movwf	drawtext@bg,c
  7531  001E9E  0E02               	movlw	2
  7532  001EA0  6E40               	movwf	drawtext@size,c
  7533  001EA2  0E01               	movlw	1
  7534  001EA4  EC64  F011         	call	_drawtext
  7535                           
  7536                           ;Setup_Heater_Temp.c: 111: strcpy(txt, "  Setup\0 ");
  7537  001EA8  C052  F011         	movff	_txt,strcpy@to
  7538  001EAC  C053  F012         	movff	_txt+1,strcpy@to+1
  7539  001EB0  0EB6               	movlw	low STR_33
  7540  001EB2  6E13               	movwf	strcpy@from,c
  7541  001EB4  0EFF               	movlw	high STR_33
  7542  001EB6  6E14               	movwf	strcpy@from+1,c
  7543  001EB8  ECA1  F01B         	call	_strcpy	;wreg free
  7544                           
  7545                           ;Setup_Heater_Temp.c: 112: drawtext(1 , 1+40, txt, 0xFFE0, 0x0000, 2);
  7546  001EBC  0E29               	movlw	41
  7547  001EBE  6E39               	movwf	drawtext@y,c
  7548  001EC0  C052  F03A         	movff	_txt,drawtext@_text
  7549  001EC4  C053  F03B         	movff	_txt+1,drawtext@_text+1
  7550  001EC8  0EFF               	movlw	255
  7551  001ECA  6E3D               	movwf	drawtext@color+1,c
  7552  001ECC  0EE0               	movlw	224
  7553  001ECE  6E3C               	movwf	drawtext@color,c
  7554  001ED0  0E00               	movlw	0
  7555  001ED2  6E3F               	movwf	drawtext@bg+1,c
  7556  001ED4  0E00               	movlw	0
  7557  001ED6  6E3E               	movwf	drawtext@bg,c
  7558  001ED8  0E02               	movlw	2
  7559  001EDA  6E40               	movwf	drawtext@size,c
  7560  001EDC  0E01               	movlw	1
  7561  001EDE  EC64  F011         	call	_drawtext
  7562                           
  7563                           ;Setup_Heater_Temp.c: 113: strcpy(txt, "Set Heater Temp");
  7564  001EE2  C052  F011         	movff	_txt,strcpy@to
  7565  001EE6  C053  F012         	movff	_txt+1,strcpy@to+1
  7566  001EEA  0E30               	movlw	low STR_34
  7567  001EEC  6E13               	movwf	strcpy@from,c
  7568  001EEE  0EFF               	movlw	high STR_34
  7569  001EF0  6E14               	movwf	strcpy@from+1,c
  7570  001EF2  ECA1  F01B         	call	_strcpy	;wreg free
  7571                           
  7572                           ;Setup_Heater_Temp.c: 114: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  7573  001EF6  0E3C               	movlw	60
  7574  001EF8  6E39               	movwf	drawtext@y,c
  7575  001EFA  C052  F03A         	movff	_txt,drawtext@_text
  7576  001EFE  C053  F03B         	movff	_txt+1,drawtext@_text+1
  7577  001F02  0E07               	movlw	7
  7578  001F04  6E3D               	movwf	drawtext@color+1,c
  7579  001F06  683C               	setf	drawtext@color,c
  7580  001F08  0E00               	movlw	0
  7581  001F0A  6E3F               	movwf	drawtext@bg+1,c
  7582  001F0C  0E00               	movlw	0
  7583  001F0E  6E3E               	movwf	drawtext@bg,c
  7584  001F10  0E01               	movlw	1
  7585  001F12  6E40               	movwf	drawtext@size,c
  7586  001F14  0E0F               	movlw	15
  7587  001F16  EC64  F011         	call	_drawtext
  7588  001F1A  0012               	return		;funcret
  7589  001F1C                     __end_of_Initialize_Setup_Heater_Screen:
  7590                           	opt stack 0
  7591                           tblptru	equ	0xFF8
  7592                           tblptrh	equ	0xFF7
  7593                           tblptrl	equ	0xFF6
  7594                           tablat	equ	0xFF5
  7595                           postinc0	equ	0xFEE
  7596                           wreg	equ	0xFE8
  7597                           postdec1	equ	0xFE5
  7598                           fsr1l	equ	0xFE1
  7599                           status	equ	0xFD8
  7600                           
  7601 ;; *************** function _Increase_Time *****************
  7602 ;; Defined at:
  7603 ;;		line 80 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Time.c"
  7604 ;; Parameters:    Size  Location     Type
  7605 ;;		None
  7606 ;; Auto vars:     Size  Location     Type
  7607 ;;		None
  7608 ;; Return value:  Size  Location     Type
  7609 ;;                  2  541[None  ] int 
  7610 ;; Registers used:
  7611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7612 ;; Tracked objects:
  7613 ;;		On entry : 0/0
  7614 ;;		On exit  : 0/0
  7615 ;;		Unchanged: 0/0
  7616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;Total ram usage:        0 bytes
  7622 ;; Hardware stack levels used:    1
  7623 ;; Hardware stack levels required when called:   11
  7624 ;; This function calls:
  7625 ;;		_Update_Setup_Time_Screen
  7626 ;; This function is called by:
  7627 ;;		_Do_Setup_Heater_Temp
  7628 ;;		_Do_Setup_Time
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           	psect	text32
  7633  002AE4                     __ptext32:
  7634                           	opt stack 0
  7635  002AE4                     _Increase_Time:
  7636                           	opt stack 18
  7637                           
  7638                           ;Setup_Time.c: 82: switch (Select_Field)
  7639                           
  7640                           ;incstack = 0
  7641  002AE4  D030               	goto	l9292
  7642  002AE6                     l9254:
  7643                           
  7644                           ;Setup_Time.c: 85: setup_hour++;
  7645  002AE6  2A68               	incf	_setup_hour,f,c
  7646                           
  7647                           ;Setup_Time.c: 86: if (setup_hour == 24) setup_hour = 0;
  7648  002AE8  0E18               	movlw	24
  7649  002AEA  1868               	xorwf	_setup_hour,w,c
  7650  002AEC  A4D8               	btfss	status,2,c
  7651  002AEE  D03F               	goto	l9294
  7652  002AF0  0E00               	movlw	0
  7653  002AF2  6E68               	movwf	_setup_hour,c
  7654                           
  7655                           ;Setup_Time.c: 87: break;
  7656  002AF4  D03C               	goto	l9294
  7657  002AF6                     l9260:
  7658                           
  7659                           ;Setup_Time.c: 91: setup_minute++;
  7660  002AF6  2A69               	incf	_setup_minute,f,c
  7661                           
  7662                           ;Setup_Time.c: 92: if (setup_minute == 60) setup_minute = 0;
  7663  002AF8  0E3C               	movlw	60
  7664  002AFA  1869               	xorwf	_setup_minute,w,c
  7665  002AFC  A4D8               	btfss	status,2,c
  7666  002AFE  D037               	goto	l9294
  7667  002B00  0E00               	movlw	0
  7668  002B02  6E69               	movwf	_setup_minute,c
  7669                           
  7670                           ;Setup_Time.c: 93: break;
  7671  002B04  D034               	goto	l9294
  7672  002B06                     l9266:
  7673                           
  7674                           ;Setup_Time.c: 97: setup_second++;
  7675  002B06  2A6B               	incf	_setup_second,f,c
  7676                           
  7677                           ;Setup_Time.c: 98: if (setup_second == 60) setup_second = 0;
  7678  002B08  0E3C               	movlw	60
  7679  002B0A  186B               	xorwf	_setup_second,w,c
  7680  002B0C  A4D8               	btfss	status,2,c
  7681  002B0E  D02F               	goto	l9294
  7682  002B10  0E00               	movlw	0
  7683  002B12  6E6B               	movwf	_setup_second,c
  7684                           
  7685                           ;Setup_Time.c: 99: break;
  7686  002B14  D02C               	goto	l9294
  7687  002B16                     l9272:
  7688                           
  7689                           ;Setup_Time.c: 103: setup_month++;
  7690  002B16  2A6A               	incf	_setup_month,f,c
  7691                           
  7692                           ;Setup_Time.c: 104: if (setup_month == 13) setup_month = 1;
  7693  002B18  0E0D               	movlw	13
  7694  002B1A  186A               	xorwf	_setup_month,w,c
  7695  002B1C  A4D8               	btfss	status,2,c
  7696  002B1E  D027               	goto	l9294
  7697  002B20  0E01               	movlw	1
  7698  002B22  6E6A               	movwf	_setup_month,c
  7699                           
  7700                           ;Setup_Time.c: 105: break;
  7701  002B24  D024               	goto	l9294
  7702  002B26                     l9278:
  7703                           
  7704                           ;Setup_Time.c: 109: setup_day++;
  7705  002B26  2A67               	incf	_setup_day,f,c
  7706                           
  7707                           ;Setup_Time.c: 110: if (setup_day == 32) setup_day = 1;
  7708  002B28  0E20               	movlw	32
  7709  002B2A  1867               	xorwf	_setup_day,w,c
  7710  002B2C  A4D8               	btfss	status,2,c
  7711  002B2E  D01F               	goto	l9294
  7712  002B30  0E01               	movlw	1
  7713  002B32  6E67               	movwf	_setup_day,c
  7714                           
  7715                           ;Setup_Time.c: 111: break;
  7716  002B34  D01C               	goto	l9294
  7717  002B36                     l9284:
  7718                           
  7719                           ;Setup_Time.c: 115: setup_year++;
  7720  002B36  2A6C               	incf	_setup_year,f,c
  7721                           
  7722                           ;Setup_Time.c: 116: if (setup_year == 100) setup_year = 0;
  7723  002B38  0E64               	movlw	100
  7724  002B3A  186C               	xorwf	_setup_year,w,c
  7725  002B3C  A4D8               	btfss	status,2,c
  7726  002B3E  D017               	goto	l9294
  7727  002B40  0E00               	movlw	0
  7728  002B42  6E6C               	movwf	_setup_year,c
  7729                           
  7730                           ;Setup_Time.c: 121: }
  7731                           
  7732                           ;Setup_Time.c: 120: break;
  7733                           
  7734                           ;Setup_Time.c: 119: default:
  7735                           
  7736                           ;Setup_Time.c: 117: break;
  7737  002B44  D014               	goto	l9294
  7738  002B46                     l9292:
  7739  002B46  5057               	movf	_Select_Field,w,c
  7740                           
  7741                           ; Switch size 1, requested type "space"
  7742                           ; Number of cases is 6, Range of values is 0 to 5
  7743                           ; switch strategies available:
  7744                           ; Name         Instructions Cycles
  7745                           ; simple_byte           19    10 (average)
  7746                           ;	Chosen strategy is simple_byte
  7747  002B48  0A00               	xorlw	0	; case 0
  7748  002B4A  B4D8               	btfsc	status,2,c
  7749  002B4C  D7CC               	goto	l9254
  7750  002B4E  0A01               	xorlw	1	; case 1
  7751  002B50  B4D8               	btfsc	status,2,c
  7752  002B52  D7D1               	goto	l9260
  7753  002B54  0A03               	xorlw	3	; case 2
  7754  002B56  B4D8               	btfsc	status,2,c
  7755  002B58  D7D6               	goto	l9266
  7756  002B5A  0A01               	xorlw	1	; case 3
  7757  002B5C  B4D8               	btfsc	status,2,c
  7758  002B5E  D7DB               	goto	l9272
  7759  002B60  0A07               	xorlw	7	; case 4
  7760  002B62  B4D8               	btfsc	status,2,c
  7761  002B64  D7E0               	goto	l9278
  7762  002B66  0A01               	xorlw	1	; case 5
  7763  002B68  B4D8               	btfsc	status,2,c
  7764  002B6A  D7E5               	goto	l9284
  7765  002B6C  D000               	goto	l9294
  7766  002B6E                     l9294:
  7767                           
  7768                           ;Setup_Time.c: 122: Update_Setup_Time_Screen();
  7769  002B6E  EC15  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  7770  002B72  0012               	return		;funcret
  7771  002B74                     __end_of_Increase_Time:
  7772                           	opt stack 0
  7773                           tblptru	equ	0xFF8
  7774                           tblptrh	equ	0xFF7
  7775                           tblptrl	equ	0xFF6
  7776                           tablat	equ	0xFF5
  7777                           postinc0	equ	0xFEE
  7778                           wreg	equ	0xFE8
  7779                           postdec1	equ	0xFE5
  7780                           fsr1l	equ	0xFE1
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function _Go_Next_Field *****************
  7784 ;; Defined at:
  7785 ;;		line 141 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Time.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;		None
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  2  535[None  ] int 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;Total ram usage:        0 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    9
  7806 ;; This function calls:
  7807 ;;		_Update_Setup_Screen_Cursor_Forward
  7808 ;; This function is called by:
  7809 ;;		_Do_Setup_Heater_Temp
  7810 ;;		_Do_Setup_Time
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           	psect	text33
  7815  003A12                     __ptext33:
  7816                           	opt stack 0
  7817  003A12                     _Go_Next_Field:
  7818                           	opt stack 20
  7819                           
  7820                           ;Setup_Time.c: 144: Select_Field++;
  7821                           
  7822                           ;incstack = 0
  7823  003A12  2A57               	incf	_Select_Field,f,c
  7824                           
  7825                           ;Setup_Time.c: 145: if (Select_Field == 6) Select_Field = 0;
  7826  003A14  0E06               	movlw	6
  7827  003A16  1857               	xorwf	_Select_Field,w,c
  7828  003A18  A4D8               	btfss	status,2,c
  7829  003A1A  D003               	goto	l9230
  7830  003A1C  0E00               	movlw	0
  7831  003A1E  6E57               	movwf	_Select_Field,c
  7832  003A20  D000               	goto	l9230
  7833  003A22                     l9230:
  7834                           
  7835                           ;Setup_Time.c: 146: Update_Setup_Screen_Cursor_Forward(Select_Field);
  7836  003A22  5057               	movf	_Select_Field,w,c
  7837  003A24  EC87  F007         	call	_Update_Setup_Screen_Cursor_Forward
  7838  003A28  0012               	return		;funcret
  7839  003A2A                     __end_of_Go_Next_Field:
  7840                           	opt stack 0
  7841                           tblptru	equ	0xFF8
  7842                           tblptrh	equ	0xFF7
  7843                           tblptrl	equ	0xFF6
  7844                           tablat	equ	0xFF5
  7845                           postinc0	equ	0xFEE
  7846                           wreg	equ	0xFE8
  7847                           postdec1	equ	0xFE5
  7848                           fsr1l	equ	0xFE1
  7849                           status	equ	0xFD8
  7850                           
  7851 ;; *************** function _Exit_Time_Setup *****************
  7852 ;; Defined at:
  7853 ;;		line 165 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Time.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;		None
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;		None
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  2  543[None  ] int 
  7860 ;; Registers used:
  7861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7871 ;;Total ram usage:        0 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:   11
  7874 ;; This function calls:
  7875 ;;		_DS3231_Read_Time
  7876 ;;		_Initialize_Screen
  7877 ;; This function is called by:
  7878 ;;		_Do_Setup_Heater_Temp
  7879 ;;		_Do_Setup_Time
  7880 ;; This function uses a non-reentrant model
  7881 ;;
  7882                           
  7883                           	psect	text34
  7884  003B58                     __ptext34:
  7885                           	opt stack 0
  7886  003B58                     _Exit_Time_Setup:
  7887                           	opt stack 18
  7888                           
  7889                           ;Setup_Time.c: 167: DS3231_Read_Time();
  7890                           
  7891                           ;incstack = 0
  7892  003B58  EC67  F018         	call	_DS3231_Read_Time	;wreg free
  7893                           
  7894                           ;Setup_Time.c: 168: Initialize_Screen();
  7895  003B5C  EC27  F003         	call	_Initialize_Screen	;wreg free
  7896                           
  7897                           ;Setup_Time.c: 169: In_Time_Setup = 0;
  7898  003B60  0E00               	movlw	0
  7899  003B62  0100               	movlb	0	; () banked
  7900  003B64  6FF2               	movwf	_In_Time_Setup& (0+255),b
  7901                           
  7902                           ; BSR set to: 0
  7903  003B66  0012               	return		;funcret
  7904  003B68                     __end_of_Exit_Time_Setup:
  7905                           	opt stack 0
  7906                           tblptru	equ	0xFF8
  7907                           tblptrh	equ	0xFF7
  7908                           tblptrl	equ	0xFF6
  7909                           tablat	equ	0xFF5
  7910                           postinc0	equ	0xFEE
  7911                           wreg	equ	0xFE8
  7912                           postdec1	equ	0xFE5
  7913                           fsr1l	equ	0xFE1
  7914                           status	equ	0xFD8
  7915                           
  7916 ;; *************** function _Do_Save_New_Time *****************
  7917 ;; Defined at:
  7918 ;;		line 157 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Time.c"
  7919 ;; Parameters:    Size  Location     Type
  7920 ;;		None
  7921 ;; Auto vars:     Size  Location     Type
  7922 ;;		None
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  2  537[None  ] int 
  7925 ;; Registers used:
  7926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7936 ;;Total ram usage:        0 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:   11
  7939 ;; This function calls:
  7940 ;;		_DS3231_Read_Time
  7941 ;;		_DS3231_Write_Time
  7942 ;;		_Initialize_Screen
  7943 ;; This function is called by:
  7944 ;;		_Do_Setup_Heater_Temp
  7945 ;;		_Do_Setup_Time
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           	psect	text35
  7950  003A9E                     __ptext35:
  7951                           	opt stack 0
  7952  003A9E                     _Do_Save_New_Time:
  7953                           	opt stack 18
  7954                           
  7955                           ;Setup_Time.c: 159: DS3231_Write_Time();
  7956                           
  7957                           ; BSR set to: 0
  7958                           ;incstack = 0
  7959  003A9E  EC8B  F014         	call	_DS3231_Write_Time	;wreg free
  7960                           
  7961                           ;Setup_Time.c: 160: DS3231_Read_Time();
  7962  003AA2  EC67  F018         	call	_DS3231_Read_Time	;wreg free
  7963                           
  7964                           ;Setup_Time.c: 161: Initialize_Screen();
  7965  003AA6  EC27  F003         	call	_Initialize_Screen	;wreg free
  7966                           
  7967                           ;Setup_Time.c: 162: In_Time_Setup = 0;
  7968  003AAA  0E00               	movlw	0
  7969  003AAC  0100               	movlb	0	; () banked
  7970  003AAE  6FF2               	movwf	_In_Time_Setup& (0+255),b
  7971                           
  7972                           ; BSR set to: 0
  7973  003AB0  0012               	return		;funcret
  7974  003AB2                     __end_of_Do_Save_New_Time:
  7975                           	opt stack 0
  7976                           tblptru	equ	0xFF8
  7977                           tblptrh	equ	0xFF7
  7978                           tblptrl	equ	0xFF6
  7979                           tablat	equ	0xFF5
  7980                           postinc0	equ	0xFEE
  7981                           wreg	equ	0xFE8
  7982                           postdec1	equ	0xFE5
  7983                           fsr1l	equ	0xFE1
  7984                           status	equ	0xFD8
  7985                           
  7986 ;; *************** function _DS3231_Write_Time *****************
  7987 ;; Defined at:
  7988 ;;		line 90 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Support.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;		None
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;  Address         1   10[BANK1 ] unsigned char 
  7993 ;;  Device          1    9[BANK1 ] unsigned char 
  7994 ;; Return value:  Size  Location     Type
  7995 ;;		None               void
  7996 ;; Registers used:
  7997 ;;		wreg, status,2, status,0, cstack
  7998 ;; Tracked objects:
  7999 ;;		On entry : 0/0
  8000 ;;		On exit  : 0/0
  8001 ;;		Unchanged: 0/0
  8002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8004 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8006 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;Total ram usage:        2 bytes
  8008 ;; Hardware stack levels used:    1
  8009 ;; Hardware stack levels required when called:    5
  8010 ;; This function calls:
  8011 ;;		_I2C_Start
  8012 ;;		_I2C_Stop
  8013 ;;		_I2C_Write
  8014 ;;		_dec_2_bcd
  8015 ;; This function is called by:
  8016 ;;		_Do_Save_New_Time
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           	psect	text36
  8021  002916                     __ptext36:
  8022                           	opt stack 0
  8023  002916                     _DS3231_Write_Time:
  8024                           	opt stack 23
  8025                           
  8026                           ;I2C_Support.c: 92: char Device = 0x68;
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;incstack = 0
  8030  002916  0E68               	movlw	104
  8031  002918  0101               	movlb	1	; () banked
  8032  00291A  6F46               	movwf	DS3231_Write_Time@Device& (0+255),b
  8033                           
  8034                           ;I2C_Support.c: 93: char Address = 0x00;
  8035  00291C  0E00               	movlw	0
  8036  00291E  0101               	movlb	1	; () banked
  8037  002920  6F47               	movwf	DS3231_Write_Time@Address& (0+255),b
  8038                           
  8039                           ; BSR set to: 1
  8040                           ;I2C_Support.c: 94: second = dec_2_bcd(setup_second);
  8041  002922  506B               	movf	_setup_second,w,c
  8042  002924  ECFC  F017         	call	_dec_2_bcd
  8043  002928  0101               	movlb	1	; () banked
  8044  00292A  513F               	movf	?_dec_2_bcd& (0+255),w,b
  8045  00292C  6E63               	movwf	_second,c
  8046                           
  8047                           ; BSR set to: 1
  8048                           ;I2C_Support.c: 95: minute = dec_2_bcd(setup_minute);
  8049  00292E  5069               	movf	_setup_minute,w,c
  8050  002930  ECFC  F017         	call	_dec_2_bcd
  8051  002934  0101               	movlb	1	; () banked
  8052  002936  513F               	movf	?_dec_2_bcd& (0+255),w,b
  8053  002938  6E61               	movwf	_minute,c
  8054                           
  8055                           ; BSR set to: 1
  8056                           ;I2C_Support.c: 96: hour = dec_2_bcd(setup_hour);
  8057  00293A  5068               	movf	_setup_hour,w,c
  8058  00293C  ECFC  F017         	call	_dec_2_bcd
  8059  002940  0101               	movlb	1	; () banked
  8060  002942  513F               	movf	?_dec_2_bcd& (0+255),w,b
  8061  002944  6E60               	movwf	_hour,c
  8062                           
  8063                           ; BSR set to: 1
  8064                           ;I2C_Support.c: 97: dow = 0x01;
  8065  002946  0E01               	movlw	1
  8066  002948  0100               	movlb	0	; () banked
  8067  00294A  6FF8               	movwf	_dow& (0+255),b
  8068                           
  8069                           ;I2C_Support.c: 98: day = dec_2_bcd(setup_day);
  8070  00294C  5067               	movf	_setup_day,w,c
  8071  00294E  ECFC  F017         	call	_dec_2_bcd
  8072  002952  0101               	movlb	1	; () banked
  8073  002954  513F               	movf	?_dec_2_bcd& (0+255),w,b
  8074  002956  6E5D               	movwf	_day,c
  8075                           
  8076                           ;I2C_Support.c: 99: month = dec_2_bcd(setup_month);
  8077  002958  506A               	movf	_setup_month,w,c
  8078  00295A  ECFC  F017         	call	_dec_2_bcd
  8079  00295E  0101               	movlb	1	; () banked
  8080  002960  513F               	movf	?_dec_2_bcd& (0+255),w,b
  8081  002962  6E62               	movwf	_month,c
  8082                           
  8083                           ;I2C_Support.c: 100: year = dec_2_bcd(setup_year);
  8084  002964  506C               	movf	_setup_year,w,c
  8085  002966  ECFC  F017         	call	_dec_2_bcd
  8086  00296A  0101               	movlb	1	; () banked
  8087  00296C  513F               	movf	?_dec_2_bcd& (0+255),w,b
  8088  00296E  6E6D               	movwf	_year,c
  8089                           
  8090                           ; BSR set to: 1
  8091                           ;I2C_Support.c: 101: I2C_Start();
  8092  002970  EC9A  F01D         	call	_I2C_Start	;wreg free
  8093                           
  8094                           ;I2C_Support.c: 102: I2C_Write((Device << 1) | 0);
  8095  002974  0101               	movlb	1	; () banked
  8096  002976  5146               	movf	DS3231_Write_Time@Device& (0+255),w,b
  8097  002978  2546               	addwf	DS3231_Write_Time@Device& (0+255),w,b
  8098  00297A  EC0E  F01B         	call	_I2C_Write
  8099                           
  8100                           ;I2C_Support.c: 103: I2C_Write(Address);
  8101  00297E  0101               	movlb	1	; () banked
  8102  002980  5147               	movf	DS3231_Write_Time@Address& (0+255),w,b
  8103  002982  EC0E  F01B         	call	_I2C_Write
  8104                           
  8105                           ;I2C_Support.c: 104: I2C_Write(second);
  8106  002986  5063               	movf	_second,w,c
  8107  002988  EC0E  F01B         	call	_I2C_Write
  8108                           
  8109                           ;I2C_Support.c: 105: I2C_Write(minute);
  8110  00298C  5061               	movf	_minute,w,c
  8111  00298E  EC0E  F01B         	call	_I2C_Write
  8112                           
  8113                           ;I2C_Support.c: 106: I2C_Write(hour);
  8114  002992  5060               	movf	_hour,w,c
  8115  002994  EC0E  F01B         	call	_I2C_Write
  8116                           
  8117                           ;I2C_Support.c: 107: I2C_Write(dow);
  8118  002998  0100               	movlb	0	; () banked
  8119  00299A  51F8               	movf	_dow& (0+255),w,b
  8120  00299C  EC0E  F01B         	call	_I2C_Write
  8121                           
  8122                           ;I2C_Support.c: 108: I2C_Write(day);
  8123  0029A0  505D               	movf	_day,w,c
  8124  0029A2  EC0E  F01B         	call	_I2C_Write
  8125                           
  8126                           ;I2C_Support.c: 109: I2C_Write(month);
  8127  0029A6  5062               	movf	_month,w,c
  8128  0029A8  EC0E  F01B         	call	_I2C_Write
  8129                           
  8130                           ;I2C_Support.c: 110: I2C_Write(year);
  8131  0029AC  506D               	movf	_year,w,c
  8132  0029AE  EC0E  F01B         	call	_I2C_Write
  8133                           
  8134                           ;I2C_Support.c: 111: I2C_Stop();
  8135  0029B2  EC91  F01D         	call	_I2C_Stop	;wreg free
  8136  0029B6  0012               	return		;funcret
  8137  0029B8                     __end_of_DS3231_Write_Time:
  8138                           	opt stack 0
  8139                           tblptru	equ	0xFF8
  8140                           tblptrh	equ	0xFF7
  8141                           tblptrl	equ	0xFF6
  8142                           tablat	equ	0xFF5
  8143                           postinc0	equ	0xFEE
  8144                           wreg	equ	0xFE8
  8145                           postdec1	equ	0xFE5
  8146                           fsr1l	equ	0xFE1
  8147                           status	equ	0xFD8
  8148                           
  8149 ;; *************** function _Decrease_Time *****************
  8150 ;; Defined at:
  8151 ;;		line 125 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Time.c"
  8152 ;; Parameters:    Size  Location     Type
  8153 ;;		None
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;		None
  8156 ;; Return value:  Size  Location     Type
  8157 ;;                  2  539[None  ] int 
  8158 ;; Registers used:
  8159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;Total ram usage:        0 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; Hardware stack levels required when called:   11
  8172 ;; This function calls:
  8173 ;;		_Update_Setup_Time_Screen
  8174 ;; This function is called by:
  8175 ;;		_Do_Setup_Heater_Temp
  8176 ;;		_Do_Setup_Time
  8177 ;; This function uses a non-reentrant model
  8178 ;;
  8179                           
  8180                           	psect	text37
  8181  0038E6                     __ptext37:
  8182                           	opt stack 0
  8183  0038E6                     _Decrease_Time:
  8184                           	opt stack 18
  8185                           
  8186                           ;Setup_Time.c: 127: switch (Select_Field)
  8187                           
  8188                           ;incstack = 0
  8189  0038E6  D008               	goto	l9248
  8190  0038E8                     l9240:
  8191                           
  8192                           ;Setup_Time.c: 130: if (setup_hour == 0) setup_hour = 23;
  8193  0038E8  5068               	movf	_setup_hour,w,c
  8194  0038EA  A4D8               	btfss	status,2,c
  8195  0038EC  D003               	goto	l9244
  8196  0038EE  0E17               	movlw	23
  8197  0038F0  6E68               	movwf	_setup_hour,c
  8198  0038F2  D007               	goto	l9250
  8199  0038F4                     l9244:
  8200                           
  8201                           ;Setup_Time.c: 131: else --setup_hour;
  8202  0038F4  0668               	decf	_setup_hour,f,c
  8203                           
  8204                           ;Setup_Time.c: 137: }
  8205                           
  8206                           ;Setup_Time.c: 136: break;
  8207                           
  8208                           ;Setup_Time.c: 135: default:
  8209                           
  8210                           ;Setup_Time.c: 132: break;
  8211  0038F6  D005               	goto	l9250
  8212  0038F8                     l9248:
  8213  0038F8  5057               	movf	_Select_Field,w,c
  8214                           
  8215                           ; Switch size 1, requested type "space"
  8216                           ; Number of cases is 1, Range of values is 0 to 0
  8217                           ; switch strategies available:
  8218                           ; Name         Instructions Cycles
  8219                           ; simple_byte            4     3 (average)
  8220                           ;	Chosen strategy is simple_byte
  8221  0038FA  0A00               	xorlw	0	; case 0
  8222  0038FC  B4D8               	btfsc	status,2,c
  8223  0038FE  D7F4               	goto	l9240
  8224  003900  D000               	goto	l9250
  8225  003902                     l9250:
  8226                           
  8227                           ;Setup_Time.c: 138: Update_Setup_Time_Screen();
  8228  003902  EC15  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  8229  003906  0012               	return		;funcret
  8230  003908                     __end_of_Decrease_Time:
  8231                           	opt stack 0
  8232                           tblptru	equ	0xFF8
  8233                           tblptrh	equ	0xFF7
  8234                           tblptrl	equ	0xFF6
  8235                           tablat	equ	0xFF5
  8236                           postinc0	equ	0xFEE
  8237                           wreg	equ	0xFE8
  8238                           postdec1	equ	0xFE5
  8239                           fsr1l	equ	0xFE1
  8240                           status	equ	0xFD8
  8241                           
  8242 ;; *************** function _Update_Setup_Time_Screen *****************
  8243 ;; Defined at:
  8244 ;;		line 190 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Time.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;		None
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;		None
  8249 ;; Return value:  Size  Location     Type
  8250 ;;		None               void
  8251 ;; Registers used:
  8252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;Total ram usage:        0 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:   10
  8265 ;; This function calls:
  8266 ;;		___awdiv
  8267 ;;		___awmod
  8268 ;;		_drawtext
  8269 ;; This function is called by:
  8270 ;;		_Do_Setup_Time
  8271 ;;		_Increase_Time
  8272 ;;		_Decrease_Time
  8273 ;; This function uses a non-reentrant model
  8274 ;;
  8275                           
  8276                           	psect	text38
  8277  00142A                     __ptext38:
  8278                           	opt stack 0
  8279  00142A                     _Update_Setup_Time_Screen:
  8280                           	opt stack 19
  8281                           
  8282                           ;Setup_Time.c: 192: setup_time[0] = (setup_hour/10) + '0';
  8283                           
  8284                           ;incstack = 0
  8285  00142A  C068  F017         	movff	_setup_hour,___awdiv@dividend
  8286  00142E  6A18               	clrf	___awdiv@dividend+1,c
  8287  001430  0E00               	movlw	0
  8288  001432  6E1A               	movwf	___awdiv@divisor+1,c
  8289  001434  0E0A               	movlw	10
  8290  001436  6E19               	movwf	___awdiv@divisor,c
  8291  001438  EC27  F015         	call	___awdiv	;wreg free
  8292  00143C  5017               	movf	?___awdiv,w,c
  8293  00143E  0F30               	addlw	48
  8294  001440  0100               	movlb	0	; () banked
  8295  001442  6FA6               	movwf	_setup_time& (0+255),b
  8296                           
  8297                           ;Setup_Time.c: 193: setup_time[1] = (setup_hour % 10) + '0';
  8298  001444  C068  F0FB         	movff	_setup_hour,___awmod@dividend
  8299  001448  0100               	movlb	0	; () banked
  8300  00144A  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
  8301  00144C  0E00               	movlw	0
  8302  00144E  0100               	movlb	0	; () banked
  8303  001450  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  8304  001452  0E0A               	movlw	10
  8305  001454  6FFD               	movwf	___awmod@divisor& (0+255),b
  8306  001456  EC31  F014         	call	___awmod	;wreg free
  8307  00145A  0100               	movlb	0	; () banked
  8308  00145C  51FB               	movf	?___awmod& (0+255),w,b
  8309  00145E  0F30               	addlw	48
  8310  001460  0100               	movlb	0	; () banked
  8311  001462  6FA7               	movwf	(_setup_time+1)& (0+255),b
  8312                           
  8313                           ;Setup_Time.c: 196: setup_time[3] = (setup_minute / 10) + '0';
  8314  001464  C069  F017         	movff	_setup_minute,___awdiv@dividend
  8315  001468  6A18               	clrf	___awdiv@dividend+1,c
  8316  00146A  0E00               	movlw	0
  8317  00146C  6E1A               	movwf	___awdiv@divisor+1,c
  8318  00146E  0E0A               	movlw	10
  8319  001470  6E19               	movwf	___awdiv@divisor,c
  8320  001472  EC27  F015         	call	___awdiv	;wreg free
  8321  001476  5017               	movf	?___awdiv,w,c
  8322  001478  0F30               	addlw	48
  8323  00147A  0100               	movlb	0	; () banked
  8324  00147C  6FA9               	movwf	(_setup_time+3)& (0+255),b
  8325                           
  8326                           ;Setup_Time.c: 197: setup_time[4] = (setup_minute % 10) + '0';
  8327  00147E  C069  F0FB         	movff	_setup_minute,___awmod@dividend
  8328  001482  0100               	movlb	0	; () banked
  8329  001484  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
  8330  001486  0E00               	movlw	0
  8331  001488  0100               	movlb	0	; () banked
  8332  00148A  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  8333  00148C  0E0A               	movlw	10
  8334  00148E  6FFD               	movwf	___awmod@divisor& (0+255),b
  8335  001490  EC31  F014         	call	___awmod	;wreg free
  8336  001494  0100               	movlb	0	; () banked
  8337  001496  51FB               	movf	?___awmod& (0+255),w,b
  8338  001498  0F30               	addlw	48
  8339  00149A  0100               	movlb	0	; () banked
  8340  00149C  6FAA               	movwf	(_setup_time+4)& (0+255),b
  8341                           
  8342                           ;Setup_Time.c: 199: setup_time[6] = (setup_second / 10) + '0';
  8343  00149E  C06B  F017         	movff	_setup_second,___awdiv@dividend
  8344  0014A2  6A18               	clrf	___awdiv@dividend+1,c
  8345  0014A4  0E00               	movlw	0
  8346  0014A6  6E1A               	movwf	___awdiv@divisor+1,c
  8347  0014A8  0E0A               	movlw	10
  8348  0014AA  6E19               	movwf	___awdiv@divisor,c
  8349  0014AC  EC27  F015         	call	___awdiv	;wreg free
  8350  0014B0  5017               	movf	?___awdiv,w,c
  8351  0014B2  0F30               	addlw	48
  8352  0014B4  0100               	movlb	0	; () banked
  8353  0014B6  6FAC               	movwf	(_setup_time+6)& (0+255),b
  8354                           
  8355                           ;Setup_Time.c: 200: setup_time[7] = (setup_second % 10) + '0';
  8356  0014B8  C06B  F0FB         	movff	_setup_second,___awmod@dividend
  8357  0014BC  0100               	movlb	0	; () banked
  8358  0014BE  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
  8359  0014C0  0E00               	movlw	0
  8360  0014C2  0100               	movlb	0	; () banked
  8361  0014C4  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  8362  0014C6  0E0A               	movlw	10
  8363  0014C8  6FFD               	movwf	___awmod@divisor& (0+255),b
  8364  0014CA  EC31  F014         	call	___awmod	;wreg free
  8365  0014CE  0100               	movlb	0	; () banked
  8366  0014D0  51FB               	movf	?___awmod& (0+255),w,b
  8367  0014D2  0F30               	addlw	48
  8368  0014D4  0100               	movlb	0	; () banked
  8369  0014D6  6FAD               	movwf	(_setup_time+7)& (0+255),b
  8370                           
  8371                           ;Setup_Time.c: 202: setup_date[0] = (setup_month / 10) + '0';
  8372  0014D8  C06A  F017         	movff	_setup_month,___awdiv@dividend
  8373  0014DC  6A18               	clrf	___awdiv@dividend+1,c
  8374  0014DE  0E00               	movlw	0
  8375  0014E0  6E1A               	movwf	___awdiv@divisor+1,c
  8376  0014E2  0E0A               	movlw	10
  8377  0014E4  6E19               	movwf	___awdiv@divisor,c
  8378  0014E6  EC27  F015         	call	___awdiv	;wreg free
  8379  0014EA  5017               	movf	?___awdiv,w,c
  8380  0014EC  0F30               	addlw	48
  8381  0014EE  0100               	movlb	0	; () banked
  8382  0014F0  6F9D               	movwf	_setup_date& (0+255),b
  8383                           
  8384                           ;Setup_Time.c: 203: setup_date[1] = (setup_month % 10) + '0';
  8385  0014F2  C06A  F0FB         	movff	_setup_month,___awmod@dividend
  8386  0014F6  0100               	movlb	0	; () banked
  8387  0014F8  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
  8388  0014FA  0E00               	movlw	0
  8389  0014FC  0100               	movlb	0	; () banked
  8390  0014FE  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  8391  001500  0E0A               	movlw	10
  8392  001502  6FFD               	movwf	___awmod@divisor& (0+255),b
  8393  001504  EC31  F014         	call	___awmod	;wreg free
  8394  001508  0100               	movlb	0	; () banked
  8395  00150A  51FB               	movf	?___awmod& (0+255),w,b
  8396  00150C  0F30               	addlw	48
  8397  00150E  0100               	movlb	0	; () banked
  8398  001510  6F9E               	movwf	(_setup_date+1)& (0+255),b
  8399                           
  8400                           ;Setup_Time.c: 205: setup_date[3] = (setup_day / 10) + '0';
  8401  001512  C067  F017         	movff	_setup_day,___awdiv@dividend
  8402  001516  6A18               	clrf	___awdiv@dividend+1,c
  8403  001518  0E00               	movlw	0
  8404  00151A  6E1A               	movwf	___awdiv@divisor+1,c
  8405  00151C  0E0A               	movlw	10
  8406  00151E  6E19               	movwf	___awdiv@divisor,c
  8407  001520  EC27  F015         	call	___awdiv	;wreg free
  8408  001524  5017               	movf	?___awdiv,w,c
  8409  001526  0F30               	addlw	48
  8410  001528  0100               	movlb	0	; () banked
  8411  00152A  6FA0               	movwf	(_setup_date+3)& (0+255),b
  8412                           
  8413                           ;Setup_Time.c: 206: setup_date[4] = (setup_day % 10) + '0';
  8414  00152C  C067  F0FB         	movff	_setup_day,___awmod@dividend
  8415  001530  0100               	movlb	0	; () banked
  8416  001532  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
  8417  001534  0E00               	movlw	0
  8418  001536  0100               	movlb	0	; () banked
  8419  001538  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  8420  00153A  0E0A               	movlw	10
  8421  00153C  6FFD               	movwf	___awmod@divisor& (0+255),b
  8422  00153E  EC31  F014         	call	___awmod	;wreg free
  8423  001542  0100               	movlb	0	; () banked
  8424  001544  51FB               	movf	?___awmod& (0+255),w,b
  8425  001546  0F30               	addlw	48
  8426  001548  0100               	movlb	0	; () banked
  8427  00154A  6FA1               	movwf	(_setup_date+4)& (0+255),b
  8428                           
  8429                           ;Setup_Time.c: 208: setup_date[6] = (setup_year / 10) + '0';
  8430  00154C  C06C  F017         	movff	_setup_year,___awdiv@dividend
  8431  001550  6A18               	clrf	___awdiv@dividend+1,c
  8432  001552  0E00               	movlw	0
  8433  001554  6E1A               	movwf	___awdiv@divisor+1,c
  8434  001556  0E0A               	movlw	10
  8435  001558  6E19               	movwf	___awdiv@divisor,c
  8436  00155A  EC27  F015         	call	___awdiv	;wreg free
  8437  00155E  5017               	movf	?___awdiv,w,c
  8438  001560  0F30               	addlw	48
  8439  001562  0100               	movlb	0	; () banked
  8440  001564  6FA3               	movwf	(_setup_date+6)& (0+255),b
  8441                           
  8442                           ;Setup_Time.c: 209: setup_date[7] = (setup_year % 10) + '0';
  8443  001566  C06C  F0FB         	movff	_setup_year,___awmod@dividend
  8444  00156A  0100               	movlb	0	; () banked
  8445  00156C  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
  8446  00156E  0E00               	movlw	0
  8447  001570  0100               	movlb	0	; () banked
  8448  001572  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
  8449  001574  0E0A               	movlw	10
  8450  001576  6FFD               	movwf	___awmod@divisor& (0+255),b
  8451  001578  EC31  F014         	call	___awmod	;wreg free
  8452  00157C  0100               	movlb	0	; () banked
  8453  00157E  51FB               	movf	?___awmod& (0+255),w,b
  8454  001580  0F30               	addlw	48
  8455  001582  0100               	movlb	0	; () banked
  8456  001584  6FA4               	movwf	(_setup_date+7)& (0+255),b
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;Setup_Time.c: 211: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  8460  001586  0E34               	movlw	52
  8461  001588  6E39               	movwf	drawtext@y,c
  8462  00158A  0EA6               	movlw	low _setup_time
  8463  00158C  6E3A               	movwf	drawtext@_text,c
  8464  00158E  0E00               	movlw	high _setup_time
  8465  001590  6E3B               	movwf	drawtext@_text+1,c
  8466  001592  0E07               	movlw	7
  8467  001594  6E3D               	movwf	drawtext@color+1,c
  8468  001596  683C               	setf	drawtext@color,c
  8469  001598  0E00               	movlw	0
  8470  00159A  6E3F               	movwf	drawtext@bg+1,c
  8471  00159C  0E00               	movlw	0
  8472  00159E  6E3E               	movwf	drawtext@bg,c
  8473  0015A0  0E02               	movlw	2
  8474  0015A2  6E40               	movwf	drawtext@size,c
  8475  0015A4  0E0F               	movlw	15
  8476  0015A6  EC64  F011         	call	_drawtext
  8477                           
  8478                           ;Setup_Time.c: 212: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  8479  0015AA  0E52               	movlw	82
  8480  0015AC  6E39               	movwf	drawtext@y,c
  8481  0015AE  0E9D               	movlw	low _setup_date
  8482  0015B0  6E3A               	movwf	drawtext@_text,c
  8483  0015B2  0E00               	movlw	high _setup_date
  8484  0015B4  6E3B               	movwf	drawtext@_text+1,c
  8485  0015B6  0E07               	movlw	7
  8486  0015B8  6E3D               	movwf	drawtext@color+1,c
  8487  0015BA  0EE0               	movlw	224
  8488  0015BC  6E3C               	movwf	drawtext@color,c
  8489  0015BE  0E00               	movlw	0
  8490  0015C0  6E3F               	movwf	drawtext@bg+1,c
  8491  0015C2  0E00               	movlw	0
  8492  0015C4  6E3E               	movwf	drawtext@bg,c
  8493  0015C6  0E02               	movlw	2
  8494  0015C8  6E40               	movwf	drawtext@size,c
  8495  0015CA  0E0F               	movlw	15
  8496  0015CC  EC64  F011         	call	_drawtext
  8497  0015D0  0012               	return		;funcret
  8498  0015D2                     __end_of_Update_Setup_Time_Screen:
  8499                           	opt stack 0
  8500                           tblptru	equ	0xFF8
  8501                           tblptrh	equ	0xFF7
  8502                           tblptrl	equ	0xFF6
  8503                           tablat	equ	0xFF5
  8504                           postinc0	equ	0xFEE
  8505                           wreg	equ	0xFE8
  8506                           postdec1	equ	0xFE5
  8507                           fsr1l	equ	0xFE1
  8508                           status	equ	0xFD8
  8509                           
  8510 ;; *************** function _Do_Setup_Alarm_Time *****************
  8511 ;; Defined at:
  8512 ;;		line 24 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Alarm_Time.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;		None
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;		None
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  2  116[None  ] int 
  8519 ;; Registers used:
  8520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;Total ram usage:        0 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; Hardware stack levels required when called:   12
  8533 ;; This function calls:
  8534 ;;		_DS3231_Read_Alarm_Time
  8535 ;;		_Decrease_Alarm_Time
  8536 ;;		_Do_Beep_Bad
  8537 ;;		_Do_Beep_Good
  8538 ;;		_Do_Save_New_Alarm_Time
  8539 ;;		_Exit_Setup_Alarm_Time
  8540 ;;		_Go_Next_Alarm_Field
  8541 ;;		_Go_Prev_Alarm_Field
  8542 ;;		_Increase_Alarm_Time
  8543 ;;		_Initialize_Setup_Alarm_Time_Screen
  8544 ;;		_Update_Setup_Alarm_Time_Screen
  8545 ;;		_bcd_2_dec
  8546 ;;		_check_for_button_input
  8547 ;; This function is called by:
  8548 ;;		_main
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           	psect	text39
  8553  0026EC                     __ptext39:
  8554                           	opt stack 0
  8555  0026EC                     _Do_Setup_Alarm_Time:
  8556                           	opt stack 18
  8557                           
  8558                           ;Setup_Alarm_Time.c: 26: Select_Alarm_Field = 0;
  8559                           
  8560                           ;incstack = 0
  8561  0026EC  0E00               	movlw	0
  8562  0026EE  6E56               	movwf	_Select_Alarm_Field,c
  8563                           
  8564                           ;Setup_Alarm_Time.c: 27: In_Alarm_Time_Setup = 1;
  8565  0026F0  0E01               	movlw	1
  8566  0026F2  0100               	movlb	0	; () banked
  8567  0026F4  6FF1               	movwf	_In_Alarm_Time_Setup& (0+255),b
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;Setup_Alarm_Time.c: 28: DS3231_Read_Alarm_Time();
  8571  0026F6  EC17  F01A         	call	_DS3231_Read_Alarm_Time	;wreg free
  8572                           
  8573                           ;Setup_Alarm_Time.c: 29: alarm_second = bcd_2_dec(alarm_second);
  8574  0026FA  505C               	movf	_alarm_second,w,c
  8575  0026FC  ECFD  F01B         	call	_bcd_2_dec
  8576  002700  6E5C               	movwf	_alarm_second,c
  8577                           
  8578                           ;Setup_Alarm_Time.c: 30: alarm_minute = bcd_2_dec(alarm_minute);
  8579  002702  505B               	movf	_alarm_minute,w,c
  8580  002704  ECFD  F01B         	call	_bcd_2_dec
  8581  002708  6E5B               	movwf	_alarm_minute,c
  8582                           
  8583                           ;Setup_Alarm_Time.c: 31: alarm_hour = bcd_2_dec(alarm_hour);
  8584  00270A  505A               	movf	_alarm_hour,w,c
  8585  00270C  ECFD  F01B         	call	_bcd_2_dec
  8586  002710  6E5A               	movwf	_alarm_hour,c
  8587                           
  8588                           ;Setup_Alarm_Time.c: 32: setup_alarm_second = alarm_second;
  8589  002712  C05C  F066         	movff	_alarm_second,_setup_alarm_second
  8590                           
  8591                           ;Setup_Alarm_Time.c: 33: setup_alarm_minute = alarm_minute;
  8592  002716  C05B  F065         	movff	_alarm_minute,_setup_alarm_minute
  8593                           
  8594                           ;Setup_Alarm_Time.c: 34: setup_alarm_hour = alarm_hour;
  8595  00271A  C05A  F064         	movff	_alarm_hour,_setup_alarm_hour
  8596                           
  8597                           ;Setup_Alarm_Time.c: 35: Initialize_Setup_Alarm_Time_Screen();
  8598  00271E  EC13  F00E         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  8599                           
  8600                           ;Setup_Alarm_Time.c: 36: Update_Setup_Alarm_Time_Screen();
  8601  002722  EC07  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8602                           
  8603                           ;Setup_Alarm_Time.c: 37: while (In_Alarm_Time_Setup == 1)
  8604  002726  D03C               	goto	l9758
  8605  002728                     l9722:
  8606                           
  8607                           ;Setup_Alarm_Time.c: 38: {
  8608                           ;Setup_Alarm_Time.c: 39: if (check_for_button_input() == 1)
  8609  002728  EC49  F016         	call	_check_for_button_input	;wreg free
  8610  00272C  06E8               	decf	wreg,f,c
  8611  00272E  A4D8               	btfss	status,2,c
  8612  002730  D037               	goto	l9758
  8613                           
  8614                           ;Setup_Alarm_Time.c: 40: {
  8615                           ;Setup_Alarm_Time.c: 41: if (found >= 3 && found <= 8)
  8616  002732  0E02               	movlw	2
  8617  002734  645F               	cpfsgt	_found,c
  8618  002736  D031               	goto	l9756
  8619  002738  0E09               	movlw	9
  8620  00273A  605F               	cpfslt	_found,c
  8621  00273C  D02E               	goto	l9756
  8622                           
  8623                           ;Setup_Alarm_Time.c: 42: {
  8624                           ;Setup_Alarm_Time.c: 43: Do_Beep_Good();
  8625  00273E  EC11  F01E         	call	_Do_Beep_Good	;wreg free
  8626                           
  8627                           ;Setup_Alarm_Time.c: 44: if (found == 3) Go_Prev_Alarm_Field();
  8628  002742  0E03               	movlw	3
  8629  002744  185F               	xorwf	_found,w,c
  8630  002746  A4D8               	btfss	status,2,c
  8631  002748  D003               	goto	l9734
  8632  00274A  EC15  F01D         	call	_Go_Prev_Alarm_Field	;wreg free
  8633  00274E  D000               	goto	l9734
  8634  002750                     l9734:
  8635                           
  8636                           ;Setup_Alarm_Time.c: 46: if (found == 4) Go_Next_Alarm_Field();
  8637  002750  0E04               	movlw	4
  8638  002752  185F               	xorwf	_found,w,c
  8639  002754  A4D8               	btfss	status,2,c
  8640  002756  D003               	goto	l9738
  8641  002758  EC21  F01D         	call	_Go_Next_Alarm_Field	;wreg free
  8642  00275C  D000               	goto	l9738
  8643  00275E                     l9738:
  8644                           
  8645                           ;Setup_Alarm_Time.c: 47: if (found == 5) Do_Save_New_Alarm_Time();;
  8646  00275E  0E05               	movlw	5
  8647  002760  185F               	xorwf	_found,w,c
  8648  002762  A4D8               	btfss	status,2,c
  8649  002764  D003               	goto	l9742
  8650  002766  EC2D  F01D         	call	_Do_Save_New_Alarm_Time	;wreg free
  8651  00276A  D000               	goto	l9742
  8652  00276C                     l9742:
  8653                           
  8654                           ;Setup_Alarm_Time.c: 48: if (found == 6) Decrease_Alarm_Time();
  8655  00276C  0E06               	movlw	6
  8656  00276E  185F               	xorwf	_found,w,c
  8657  002770  A4D8               	btfss	status,2,c
  8658  002772  D003               	goto	l9746
  8659  002774  ECF0  F019         	call	_Decrease_Alarm_Time	;wreg free
  8660  002778  D000               	goto	l9746
  8661  00277A                     l9746:
  8662                           
  8663                           ;Setup_Alarm_Time.c: 49: if (found == 7) Increase_Alarm_Time();
  8664  00277A  0E07               	movlw	7
  8665  00277C  185F               	xorwf	_found,w,c
  8666  00277E  A4D8               	btfss	status,2,c
  8667  002780  D003               	goto	l9750
  8668  002782  ECC9  F019         	call	_Increase_Alarm_Time	;wreg free
  8669  002786  D000               	goto	l9750
  8670  002788                     l9750:
  8671                           
  8672                           ;Setup_Alarm_Time.c: 50: if (found == 8) Exit_Setup_Alarm_Time();
  8673  002788  0E08               	movlw	8
  8674  00278A  185F               	xorwf	_found,w,c
  8675  00278C  A4D8               	btfss	status,2,c
  8676  00278E  D003               	goto	l9754
  8677  002790  ECB4  F01D         	call	_Exit_Setup_Alarm_Time	;wreg free
  8678  002794  D000               	goto	l9754
  8679  002796                     l9754:
  8680                           
  8681                           ;Setup_Alarm_Time.c: 51: found = 0xff;
  8682  002796  685F               	setf	_found,c
  8683                           
  8684                           ;Setup_Alarm_Time.c: 52: }
  8685  002798  D003               	goto	l9758
  8686  00279A                     l9756:
  8687                           
  8688                           ;Setup_Alarm_Time.c: 53: else
  8689                           ;Setup_Alarm_Time.c: 54: {
  8690                           ;Setup_Alarm_Time.c: 55: Do_Beep_Bad();
  8691  00279A  EC14  F01E         	call	_Do_Beep_Bad	;wreg free
  8692  00279E  D000               	goto	l9758
  8693  0027A0                     l9758:
  8694  0027A0  0100               	movlb	0	; () banked
  8695  0027A2  05F1               	decf	_In_Alarm_Time_Setup& (0+255),w,b
  8696  0027A4  B4D8               	btfsc	status,2,c
  8697  0027A6  D7C0               	goto	l9722
  8698                           
  8699                           ; BSR set to: 0
  8700                           
  8701                           ; BSR set to: 0
  8702  0027A8  0012               	return		;funcret
  8703  0027AA                     __end_of_Do_Setup_Alarm_Time:
  8704                           	opt stack 0
  8705                           tblptru	equ	0xFF8
  8706                           tblptrh	equ	0xFF7
  8707                           tblptrl	equ	0xFF6
  8708                           tablat	equ	0xFF5
  8709                           postinc0	equ	0xFEE
  8710                           wreg	equ	0xFE8
  8711                           postdec1	equ	0xFE5
  8712                           fsr1l	equ	0xFE1
  8713                           status	equ	0xFD8
  8714                           
  8715 ;; *************** function _check_for_button_input *****************
  8716 ;; Defined at:
  8717 ;;		line 16 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;		None
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;  j               2   57[COMRAM] int 
  8722 ;; Return value:  Size  Location     Type
  8723 ;;                  1    wreg      unsigned char 
  8724 ;; Registers used:
  8725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8726 ;; Tracked objects:
  8727 ;;		On entry : 0/0
  8728 ;;		On exit  : 0/0
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;Total ram usage:        3 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; Hardware stack levels required when called:    5
  8738 ;; This function calls:
  8739 ;;		_printf
  8740 ;; This function is called by:
  8741 ;;		_main
  8742 ;;		_Do_Setup_Alarm_Time
  8743 ;;		_Do_Setup_Heater_Temp
  8744 ;;		_Do_Setup_Time
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           	psect	text40
  8749  002C92                     __ptext40:
  8750                           	opt stack 0
  8751  002C92                     _check_for_button_input:
  8752                           	opt stack 25
  8753                           
  8754                           ;utils.c: 18: if (nec_ok == 1)
  8755                           
  8756                           ; BSR set to: 0
  8757                           ;incstack = 0
  8758  002C92  0100               	movlb	0	; () banked
  8759  002C94  05EB               	decf	_nec_ok& (0+255),w,b
  8760  002C96  0100               	movlb	0	; () banked
  8761  002C98  11EC               	iorwf	(_nec_ok+1)& (0+255),w,b
  8762  002C9A  A4D8               	btfss	status,2,c
  8763  002C9C  D03B               	goto	l9074
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;utils.c: 19: {
  8767                           ;utils.c: 20: nec_ok = 0;
  8768  002C9E  0E00               	movlw	0
  8769  002CA0  0100               	movlb	0	; () banked
  8770  002CA2  6FEC               	movwf	(_nec_ok+1)& (0+255),b
  8771  002CA4  0E00               	movlw	0
  8772  002CA6  6FEB               	movwf	_nec_ok& (0+255),b
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;utils.c: 23: INTCONbits.INT0IE = 1;
  8776  002CA8  88F2               	bsf	intcon,4,c	;volatile
  8777                           
  8778                           ; BSR set to: 0
  8779                           ;utils.c: 24: INTCON2bits.INTEDG0 = 0;
  8780  002CAA  9CF1               	bcf	intcon2,6,c	;volatile
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;utils.c: 26: found = 0xff;
  8784  002CAC  685F               	setf	_found,c
  8785                           
  8786                           ;utils.c: 27: for (int j=0; j< 21; j++)
  8787  002CAE  0E00               	movlw	0
  8788  002CB0  6E3B               	movwf	check_for_button_input@j+1,c
  8789  002CB2  0E00               	movlw	0
  8790  002CB4  6E3A               	movwf	check_for_button_input@j,c
  8791  002CB6                     l9046:
  8792                           
  8793                           ; BSR set to: 0
  8794  002CB6  BE3B               	btfsc	check_for_button_input@j+1,7,c
  8795  002CB8  D008               	goto	l9050
  8796  002CBA  503B               	movf	check_for_button_input@j+1,w,c
  8797  002CBC  E11C               	bnz	l9060
  8798  002CBE  0E15               	movlw	21
  8799  002CC0  5C3A               	subwf	check_for_button_input@j,w,c
  8800  002CC2  B0D8               	btfsc	status,0,c
  8801  002CC4  D018               	goto	l9060
  8802  002CC6  D001               	goto	l9050
  8803                           
  8804                           ; BSR set to: 0
  8805  002CC8  D016               	goto	l9060
  8806  002CCA                     l9050:
  8807                           
  8808                           ; BSR set to: 0
  8809                           ;utils.c: 28: {
  8810                           ;utils.c: 29: if (Nec_code1 == array1[j])
  8811  002CCA  0E1F               	movlw	low _array1
  8812  002CCC  243A               	addwf	check_for_button_input@j,w,c
  8813  002CCE  6ED9               	movwf	fsr2l,c
  8814  002CD0  0E01               	movlw	high _array1
  8815  002CD2  203B               	addwfc	check_for_button_input@j+1,w,c
  8816  002CD4  6EDA               	movwf	fsr2h,c
  8817  002CD6  0100               	movlb	0	; () banked
  8818  002CD8  51F3               	movf	_Nec_code1& (0+255),w,b
  8819  002CDA  18DE               	xorwf	postinc2,w,c
  8820  002CDC  A4D8               	btfss	status,2,c
  8821  002CDE  D007               	goto	l9056
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;utils.c: 30: {
  8825                           ;utils.c: 31: found = j;
  8826  002CE0  C03A  F05F         	movff	check_for_button_input@j,_found
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;utils.c: 32: j = 21;
  8830  002CE4  0E00               	movlw	0
  8831  002CE6  6E3B               	movwf	check_for_button_input@j+1,c
  8832  002CE8  0E15               	movlw	21
  8833  002CEA  6E3A               	movwf	check_for_button_input@j,c
  8834  002CEC  D000               	goto	l9056
  8835  002CEE                     l9056:
  8836                           
  8837                           ; BSR set to: 0
  8838  002CEE  4A3A               	infsnz	check_for_button_input@j,f,c
  8839  002CF0  2A3B               	incf	check_for_button_input@j+1,f,c
  8840  002CF2  D7E1               	goto	l9046
  8841                           
  8842                           ; BSR set to: 0
  8843  002CF4  D000               	goto	l9060
  8844  002CF6                     l9060:
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;utils.c: 33: }
  8848                           ;utils.c: 34: }
  8849                           ;utils.c: 36: if (found == 0xff)
  8850  002CF6  285F               	incf	_found,w,c
  8851  002CF8  A4D8               	btfss	status,2,c
  8852  002CFA  D009               	goto	l9070
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;utils.c: 37: {
  8856                           ;utils.c: 38: printf ("Cannot find button \r\n");
  8857  002CFC  0EBA               	movlw	low STR_39
  8858  002CFE  6E1D               	movwf	printf@f,c
  8859  002D00  0EFE               	movlw	high STR_39
  8860  002D02  6E1E               	movwf	printf@f+1,c
  8861  002D04  ECE7  F004         	call	_printf	;wreg free
  8862  002D08  D005               	goto	l9074
  8863                           
  8864                           ;utils.c: 39: return (0);
  8865  002D0A  D006               	goto	l1084
  8866                           
  8867                           ;utils.c: 40: }
  8868  002D0C  D003               	goto	l9074
  8869  002D0E                     l9070:
  8870                           
  8871                           ;utils.c: 41: else
  8872                           ;utils.c: 42: {
  8873                           ;utils.c: 43: return (1);
  8874  002D0E  0E01               	movlw	1
  8875  002D10  D003               	goto	l1084
  8876  002D12  D000               	goto	l9074
  8877  002D14                     l9074:
  8878                           
  8879                           ;utils.c: 44: }
  8880                           ;utils.c: 45: }
  8881                           ;utils.c: 46: return (0);
  8882  002D14  0E00               	movlw	0
  8883  002D16  D000               	goto	l1084
  8884  002D18                     l1084:
  8885  002D18  0012               	return		;funcret
  8886  002D1A                     __end_of_check_for_button_input:
  8887                           	opt stack 0
  8888                           tblptru	equ	0xFF8
  8889                           tblptrh	equ	0xFF7
  8890                           tblptrl	equ	0xFF6
  8891                           tablat	equ	0xFF5
  8892                           intcon	equ	0xFF2
  8893                           intcon2	equ	0xFF1
  8894                           postinc0	equ	0xFEE
  8895                           wreg	equ	0xFE8
  8896                           postdec1	equ	0xFE5
  8897                           fsr1l	equ	0xFE1
  8898                           postinc2	equ	0xFDE
  8899                           fsr2h	equ	0xFDA
  8900                           fsr2l	equ	0xFD9
  8901                           status	equ	0xFD8
  8902                           
  8903 ;; *************** function _bcd_2_dec *****************
  8904 ;; Defined at:
  8905 ;;		line 49 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
  8906 ;; Parameters:    Size  Location     Type
  8907 ;;  bcd             1    wreg     unsigned char 
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;  bcd             1   20[COMRAM] unsigned char 
  8910 ;;  dec             2   18[COMRAM] int 
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  1    wreg      unsigned char 
  8913 ;; Registers used:
  8914 ;;		wreg, status,2, status,0, prodl, prodh
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;Total ram usage:        5 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:    3
  8927 ;; This function calls:
  8928 ;;		Nothing
  8929 ;; This function is called by:
  8930 ;;		_Do_Setup_Alarm_Time
  8931 ;;		_Do_Setup_Time
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           	psect	text41
  8936  0037FA                     __ptext41:
  8937                           	opt stack 0
  8938  0037FA                     _bcd_2_dec:
  8939                           	opt stack 26
  8940                           
  8941                           ;incstack = 0
  8942                           ;bcd_2_dec@bcd stored from wreg
  8943  0037FA  6E15               	movwf	bcd_2_dec@bcd,c
  8944                           
  8945                           ;utils.c: 51: int dec;
  8946                           ;utils.c: 52: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  8947  0037FC  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  8948  003800  0E0F               	movlw	15
  8949  003802  1611               	andwf	??_bcd_2_dec,f,c
  8950  003804  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  8951  003808  3A12               	swapf	??_bcd_2_dec+1,f,c
  8952  00380A  0E0F               	movlw	15
  8953  00380C  1612               	andwf	??_bcd_2_dec+1,f,c
  8954  00380E  5012               	movf	??_bcd_2_dec+1,w,c
  8955  003810  0D0A               	mullw	10
  8956  003812  5011               	movf	??_bcd_2_dec,w,c
  8957  003814  24F3               	addwf	prodl,w,c
  8958  003816  6E13               	movwf	bcd_2_dec@dec,c
  8959  003818  0E00               	movlw	0
  8960  00381A  20F4               	addwfc	prodh,w,c
  8961  00381C  6E14               	movwf	bcd_2_dec@dec+1,c
  8962                           
  8963                           ;utils.c: 53: return dec;
  8964  00381E  5013               	movf	bcd_2_dec@dec,w,c
  8965  003820  D000               	goto	l1088
  8966  003822                     l1088:
  8967  003822  0012               	return		;funcret
  8968  003824                     __end_of_bcd_2_dec:
  8969                           	opt stack 0
  8970                           tblptru	equ	0xFF8
  8971                           tblptrh	equ	0xFF7
  8972                           tblptrl	equ	0xFF6
  8973                           tablat	equ	0xFF5
  8974                           prodh	equ	0xFF4
  8975                           prodl	equ	0xFF3
  8976                           intcon	equ	0xFF2
  8977                           intcon2	equ	0xFF1
  8978                           postinc0	equ	0xFEE
  8979                           wreg	equ	0xFE8
  8980                           postdec1	equ	0xFE5
  8981                           fsr1l	equ	0xFE1
  8982                           postinc2	equ	0xFDE
  8983                           fsr2h	equ	0xFDA
  8984                           fsr2l	equ	0xFD9
  8985                           status	equ	0xFD8
  8986                           
  8987 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  8988 ;; Defined at:
  8989 ;;		line 149 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Alarm_Time.c
      +"
  8990 ;; Parameters:    Size  Location     Type
  8991 ;;		None
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;		None
  8994 ;; Return value:  Size  Location     Type
  8995 ;;		None               void
  8996 ;; Registers used:
  8997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8998 ;; Tracked objects:
  8999 ;;		On entry : 0/0
  9000 ;;		On exit  : 0/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9007 ;;Total ram usage:        0 bytes
  9008 ;; Hardware stack levels used:    1
  9009 ;; Hardware stack levels required when called:   10
  9010 ;; This function calls:
  9011 ;;		_drawtext
  9012 ;;		_fillRect
  9013 ;;		_fillScreen
  9014 ;;		_strcpy
  9015 ;; This function is called by:
  9016 ;;		_Do_Setup_Alarm_Time
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           	psect	text42
  9021  001C26                     __ptext42:
  9022                           	opt stack 0
  9023  001C26                     _Initialize_Setup_Alarm_Time_Screen:
  9024                           	opt stack 19
  9025                           
  9026                           ;Setup_Alarm_Time.c: 151: fillScreen(0x0000);
  9027                           
  9028                           ;incstack = 0
  9029  001C26  0E00               	movlw	0
  9030  001C28  6E25               	movwf	fillScreen@color+1,c
  9031  001C2A  0E00               	movlw	0
  9032  001C2C  6E24               	movwf	fillScreen@color,c
  9033  001C2E  ECE2  F01C         	call	_fillScreen	;wreg free
  9034                           
  9035                           ;Setup_Alarm_Time.c: 153: strcpy(txt, "ECE3301L Sp'22 Sx");
  9036  001C32  C052  F011         	movff	_txt,strcpy@to
  9037  001C36  C053  F012         	movff	_txt+1,strcpy@to+1
  9038  001C3A  0E0D               	movlw	low STR_26
  9039  001C3C  6E13               	movwf	strcpy@from,c
  9040  001C3E  0EFF               	movlw	high STR_26
  9041  001C40  6E14               	movwf	strcpy@from+1,c
  9042  001C42  ECA1  F01B         	call	_strcpy	;wreg free
  9043                           
  9044                           ;Setup_Alarm_Time.c: 154: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  9045  001C46  0E01               	movlw	1
  9046  001C48  6E39               	movwf	drawtext@y,c
  9047  001C4A  C052  F03A         	movff	_txt,drawtext@_text
  9048  001C4E  C053  F03B         	movff	_txt+1,drawtext@_text+1
  9049  001C52  0EFF               	movlw	255
  9050  001C54  6E3D               	movwf	drawtext@color+1,c
  9051  001C56  683C               	setf	drawtext@color,c
  9052  001C58  0E00               	movlw	0
  9053  001C5A  6E3F               	movwf	drawtext@bg+1,c
  9054  001C5C  0E00               	movlw	0
  9055  001C5E  6E3E               	movwf	drawtext@bg,c
  9056  001C60  0E01               	movlw	1
  9057  001C62  6E40               	movwf	drawtext@size,c
  9058  001C64  0E01               	movlw	1
  9059  001C66  EC64  F011         	call	_drawtext
  9060                           
  9061                           ;Setup_Alarm_Time.c: 157: strcpy(txt, "  Alarm");
  9062  001C6A  C052  F011         	movff	_txt,strcpy@to
  9063  001C6E  C053  F012         	movff	_txt+1,strcpy@to+1
  9064  001C72  0EC9               	movlw	low STR_27
  9065  001C74  6E13               	movwf	strcpy@from,c
  9066  001C76  0EFF               	movlw	high STR_27
  9067  001C78  6E14               	movwf	strcpy@from+1,c
  9068  001C7A  ECA1  F01B         	call	_strcpy	;wreg free
  9069                           
  9070                           ;Setup_Alarm_Time.c: 158: drawtext(1+5 , 1+10, txt, 0xF81F, 0x0000, 2);
  9071  001C7E  0E0B               	movlw	11
  9072  001C80  6E39               	movwf	drawtext@y,c
  9073  001C82  C052  F03A         	movff	_txt,drawtext@_text
  9074  001C86  C053  F03B         	movff	_txt+1,drawtext@_text+1
  9075  001C8A  0EF8               	movlw	248
  9076  001C8C  6E3D               	movwf	drawtext@color+1,c
  9077  001C8E  0E1F               	movlw	31
  9078  001C90  6E3C               	movwf	drawtext@color,c
  9079  001C92  0E00               	movlw	0
  9080  001C94  6E3F               	movwf	drawtext@bg+1,c
  9081  001C96  0E00               	movlw	0
  9082  001C98  6E3E               	movwf	drawtext@bg,c
  9083  001C9A  0E02               	movlw	2
  9084  001C9C  6E40               	movwf	drawtext@size,c
  9085  001C9E  0E06               	movlw	6
  9086  001CA0  EC64  F011         	call	_drawtext
  9087                           
  9088                           ;Setup_Alarm_Time.c: 159: strcpy(txt, "  Setup");
  9089  001CA4  C052  F011         	movff	_txt,strcpy@to
  9090  001CA8  C053  F012         	movff	_txt+1,strcpy@to+1
  9091  001CAC  0ED1               	movlw	low STR_28
  9092  001CAE  6E13               	movwf	strcpy@from,c
  9093  001CB0  0EFF               	movlw	high STR_28
  9094  001CB2  6E14               	movwf	strcpy@from+1,c
  9095  001CB4  ECA1  F01B         	call	_strcpy	;wreg free
  9096                           
  9097                           ;Setup_Alarm_Time.c: 160: drawtext(1+5 , 1+25, txt, 0xF81F, 0x0000, 2);
  9098  001CB8  0E1A               	movlw	26
  9099  001CBA  6E39               	movwf	drawtext@y,c
  9100  001CBC  C052  F03A         	movff	_txt,drawtext@_text
  9101  001CC0  C053  F03B         	movff	_txt+1,drawtext@_text+1
  9102  001CC4  0EF8               	movlw	248
  9103  001CC6  6E3D               	movwf	drawtext@color+1,c
  9104  001CC8  0E1F               	movlw	31
  9105  001CCA  6E3C               	movwf	drawtext@color,c
  9106  001CCC  0E00               	movlw	0
  9107  001CCE  6E3F               	movwf	drawtext@bg+1,c
  9108  001CD0  0E00               	movlw	0
  9109  001CD2  6E3E               	movwf	drawtext@bg,c
  9110  001CD4  0E02               	movlw	2
  9111  001CD6  6E40               	movwf	drawtext@size,c
  9112  001CD8  0E06               	movlw	6
  9113  001CDA  EC64  F011         	call	_drawtext
  9114                           
  9115                           ;Setup_Alarm_Time.c: 162: strcpy(txt, "Time");
  9116  001CDE  C052  F011         	movff	_txt,strcpy@to
  9117  001CE2  C053  F012         	movff	_txt+1,strcpy@to+1
  9118  001CE6  0EB1               	movlw	low (STR_14+6)
  9119  001CE8  6E13               	movwf	strcpy@from,c
  9120  001CEA  0EFF               	movlw	high (STR_14+6)
  9121  001CEC  6E14               	movwf	strcpy@from+1,c
  9122  001CEE  ECA1  F01B         	call	_strcpy	;wreg free
  9123                           
  9124                           ;Setup_Alarm_Time.c: 163: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  9125  001CF2  0E28               	movlw	40
  9126  001CF4  6E39               	movwf	drawtext@y,c
  9127  001CF6  C052  F03A         	movff	_txt,drawtext@_text
  9128  001CFA  C053  F03B         	movff	_txt+1,drawtext@_text+1
  9129  001CFE  0E00               	movlw	0
  9130  001D00  6E3D               	movwf	drawtext@color+1,c
  9131  001D02  0E1F               	movlw	31
  9132  001D04  6E3C               	movwf	drawtext@color,c
  9133  001D06  0E00               	movlw	0
  9134  001D08  6E3F               	movwf	drawtext@bg+1,c
  9135  001D0A  0E00               	movlw	0
  9136  001D0C  6E3E               	movwf	drawtext@bg,c
  9137  001D0E  0E01               	movlw	1
  9138  001D10  6E40               	movwf	drawtext@size,c
  9139  001D12  0E32               	movlw	50
  9140  001D14  EC64  F011         	call	_drawtext
  9141                           
  9142                           ;Setup_Alarm_Time.c: 164: fillRect(15-1, 52+16, 25,2,0x07FF);
  9143  001D18  0E44               	movlw	68
  9144  001D1A  6E23               	movwf	fillRect@y,c
  9145  001D1C  0E19               	movlw	25
  9146  001D1E  6E24               	movwf	fillRect@w,c
  9147  001D20  0E02               	movlw	2
  9148  001D22  6E25               	movwf	fillRect@h,c
  9149  001D24  0E07               	movlw	7
  9150  001D26  6E27               	movwf	fillRect@color+1,c
  9151  001D28  6826               	setf	fillRect@color,c
  9152  001D2A  0E0E               	movlw	14
  9153  001D2C  EC63  F01A         	call	_fillRect
  9154  001D30  0012               	return		;funcret
  9155  001D32                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  9156                           	opt stack 0
  9157                           tblptru	equ	0xFF8
  9158                           tblptrh	equ	0xFF7
  9159                           tblptrl	equ	0xFF6
  9160                           tablat	equ	0xFF5
  9161                           prodh	equ	0xFF4
  9162                           prodl	equ	0xFF3
  9163                           intcon	equ	0xFF2
  9164                           intcon2	equ	0xFF1
  9165                           postinc0	equ	0xFEE
  9166                           wreg	equ	0xFE8
  9167                           postdec1	equ	0xFE5
  9168                           fsr1l	equ	0xFE1
  9169                           postinc2	equ	0xFDE
  9170                           fsr2h	equ	0xFDA
  9171                           fsr2l	equ	0xFD9
  9172                           status	equ	0xFD8
  9173                           
  9174 ;; *************** function _Increase_Alarm_Time *****************
  9175 ;; Defined at:
  9176 ;;		line 61 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Alarm_Time.c"
  9177 ;; Parameters:    Size  Location     Type
  9178 ;;		None
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;		None
  9181 ;; Return value:  Size  Location     Type
  9182 ;;		None               void
  9183 ;; Registers used:
  9184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9185 ;; Tracked objects:
  9186 ;;		On entry : 0/0
  9187 ;;		On exit  : 0/0
  9188 ;;		Unchanged: 0/0
  9189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;Total ram usage:        0 bytes
  9195 ;; Hardware stack levels used:    1
  9196 ;; Hardware stack levels required when called:   11
  9197 ;; This function calls:
  9198 ;;		_Update_Setup_Alarm_Time_Screen
  9199 ;; This function is called by:
  9200 ;;		_Do_Setup_Alarm_Time
  9201 ;; This function uses a non-reentrant model
  9202 ;;
  9203                           
  9204                           	psect	text43
  9205  003392                     __ptext43:
  9206                           	opt stack 0
  9207  003392                     _Increase_Alarm_Time:
  9208                           	opt stack 18
  9209                           
  9210                           ;Setup_Alarm_Time.c: 63: switch (Select_Alarm_Field)
  9211                           
  9212                           ;incstack = 0
  9213  003392  D018               	goto	l9182
  9214  003394                     l9162:
  9215                           
  9216                           ;Setup_Alarm_Time.c: 66: setup_alarm_hour++;
  9217  003394  2A64               	incf	_setup_alarm_hour,f,c
  9218                           
  9219                           ;Setup_Alarm_Time.c: 67: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
  9220  003396  0E18               	movlw	24
  9221  003398  1864               	xorwf	_setup_alarm_hour,w,c
  9222  00339A  A4D8               	btfss	status,2,c
  9223  00339C  D01E               	goto	l9184
  9224  00339E  0E00               	movlw	0
  9225  0033A0  6E64               	movwf	_setup_alarm_hour,c
  9226                           
  9227                           ;Setup_Alarm_Time.c: 68: break;
  9228  0033A2  D01B               	goto	l9184
  9229  0033A4                     l9168:
  9230                           
  9231                           ;Setup_Alarm_Time.c: 72: setup_alarm_minute++;
  9232  0033A4  2A65               	incf	_setup_alarm_minute,f,c
  9233                           
  9234                           ;Setup_Alarm_Time.c: 73: if (setup_alarm_minute == 60) setup_alarm_minute = 0;
  9235  0033A6  0E3C               	movlw	60
  9236  0033A8  1865               	xorwf	_setup_alarm_minute,w,c
  9237  0033AA  A4D8               	btfss	status,2,c
  9238  0033AC  D016               	goto	l9184
  9239  0033AE  0E00               	movlw	0
  9240  0033B0  6E65               	movwf	_setup_alarm_minute,c
  9241                           
  9242                           ;Setup_Alarm_Time.c: 74: break;
  9243  0033B2  D013               	goto	l9184
  9244  0033B4                     l9174:
  9245                           
  9246                           ;Setup_Alarm_Time.c: 78: setup_alarm_second++;
  9247  0033B4  2A66               	incf	_setup_alarm_second,f,c
  9248                           
  9249                           ;Setup_Alarm_Time.c: 79: if (setup_alarm_second == 60) setup_alarm_second = 0;
  9250  0033B6  0E3C               	movlw	60
  9251  0033B8  1866               	xorwf	_setup_alarm_second,w,c
  9252  0033BA  A4D8               	btfss	status,2,c
  9253  0033BC  D00E               	goto	l9184
  9254  0033BE  0E00               	movlw	0
  9255  0033C0  6E66               	movwf	_setup_alarm_second,c
  9256                           
  9257                           ;Setup_Alarm_Time.c: 84: }
  9258                           
  9259                           ;Setup_Alarm_Time.c: 83: break;
  9260                           
  9261                           ;Setup_Alarm_Time.c: 82: default:
  9262                           
  9263                           ;Setup_Alarm_Time.c: 80: break;
  9264  0033C2  D00B               	goto	l9184
  9265  0033C4                     l9182:
  9266  0033C4  5056               	movf	_Select_Alarm_Field,w,c
  9267                           
  9268                           ; Switch size 1, requested type "space"
  9269                           ; Number of cases is 3, Range of values is 0 to 2
  9270                           ; switch strategies available:
  9271                           ; Name         Instructions Cycles
  9272                           ; simple_byte           10     6 (average)
  9273                           ;	Chosen strategy is simple_byte
  9274  0033C6  0A00               	xorlw	0	; case 0
  9275  0033C8  B4D8               	btfsc	status,2,c
  9276  0033CA  D7E4               	goto	l9162
  9277  0033CC  0A01               	xorlw	1	; case 1
  9278  0033CE  B4D8               	btfsc	status,2,c
  9279  0033D0  D7E9               	goto	l9168
  9280  0033D2  0A03               	xorlw	3	; case 2
  9281  0033D4  B4D8               	btfsc	status,2,c
  9282  0033D6  D7EE               	goto	l9174
  9283  0033D8  D000               	goto	l9184
  9284  0033DA                     l9184:
  9285                           
  9286                           ;Setup_Alarm_Time.c: 85: Update_Setup_Alarm_Time_Screen();
  9287  0033DA  EC07  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  9288  0033DE  0012               	return		;funcret
  9289  0033E0                     __end_of_Increase_Alarm_Time:
  9290                           	opt stack 0
  9291                           tblptru	equ	0xFF8
  9292                           tblptrh	equ	0xFF7
  9293                           tblptrl	equ	0xFF6
  9294                           tablat	equ	0xFF5
  9295                           prodh	equ	0xFF4
  9296                           prodl	equ	0xFF3
  9297                           intcon	equ	0xFF2
  9298                           intcon2	equ	0xFF1
  9299                           postinc0	equ	0xFEE
  9300                           wreg	equ	0xFE8
  9301                           postdec1	equ	0xFE5
  9302                           fsr1l	equ	0xFE1
  9303                           postinc2	equ	0xFDE
  9304                           fsr2h	equ	0xFDA
  9305                           fsr2l	equ	0xFD9
  9306                           status	equ	0xFD8
  9307                           
  9308 ;; *************** function _Go_Prev_Alarm_Field *****************
  9309 ;; Defined at:
  9310 ;;		line 126 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Alarm_Time.c
      +"
  9311 ;; Parameters:    Size  Location     Type
  9312 ;;		None
  9313 ;; Auto vars:     Size  Location     Type
  9314 ;;		None
  9315 ;; Return value:  Size  Location     Type
  9316 ;;		None               void
  9317 ;; Registers used:
  9318 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9319 ;; Tracked objects:
  9320 ;;		On entry : 0/0
  9321 ;;		On exit  : 0/0
  9322 ;;		Unchanged: 0/0
  9323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;Total ram usage:        0 bytes
  9329 ;; Hardware stack levels used:    1
  9330 ;; Hardware stack levels required when called:    9
  9331 ;; This function calls:
  9332 ;;		_Update_Setup_Screen_Cursor_Backward
  9333 ;; This function is called by:
  9334 ;;		_Do_Setup_Alarm_Time
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338                           	psect	text44
  9339  003A2A                     __ptext44:
  9340                           	opt stack 0
  9341  003A2A                     _Go_Prev_Alarm_Field:
  9342                           	opt stack 20
  9343                           
  9344                           ;Setup_Alarm_Time.c: 128: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  9345                           
  9346                           ;incstack = 0
  9347  003A2A  5056               	movf	_Select_Alarm_Field,w,c
  9348  003A2C  A4D8               	btfss	status,2,c
  9349  003A2E  D003               	goto	l9116
  9350  003A30  0E02               	movlw	2
  9351  003A32  6E56               	movwf	_Select_Alarm_Field,c
  9352  003A34  D002               	goto	l9118
  9353  003A36                     l9116:
  9354                           
  9355                           ;Setup_Alarm_Time.c: 129: else Select_Alarm_Field--;
  9356  003A36  0656               	decf	_Select_Alarm_Field,f,c
  9357  003A38  D000               	goto	l9118
  9358  003A3A                     l9118:
  9359                           
  9360                           ;Setup_Alarm_Time.c: 130: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
  9361  003A3A  5056               	movf	_Select_Alarm_Field,w,c
  9362  003A3C  EC64  F008         	call	_Update_Setup_Screen_Cursor_Backward
  9363  003A40  0012               	return		;funcret
  9364  003A42                     __end_of_Go_Prev_Alarm_Field:
  9365                           	opt stack 0
  9366                           tblptru	equ	0xFF8
  9367                           tblptrh	equ	0xFF7
  9368                           tblptrl	equ	0xFF6
  9369                           tablat	equ	0xFF5
  9370                           prodh	equ	0xFF4
  9371                           prodl	equ	0xFF3
  9372                           intcon	equ	0xFF2
  9373                           intcon2	equ	0xFF1
  9374                           postinc0	equ	0xFEE
  9375                           wreg	equ	0xFE8
  9376                           postdec1	equ	0xFE5
  9377                           fsr1l	equ	0xFE1
  9378                           postinc2	equ	0xFDE
  9379                           fsr2h	equ	0xFDA
  9380                           fsr2l	equ	0xFD9
  9381                           status	equ	0xFD8
  9382                           
  9383 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  9384 ;; Defined at:
  9385 ;;		line 254 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Time.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;  field           1    wreg     unsigned char 
  9388 ;; Auto vars:     Size  Location     Type
  9389 ;;  field           1   45[COMRAM] unsigned char 
  9390 ;;  xinc            1   47[COMRAM] unsigned char 
  9391 ;;  yinc            1   46[COMRAM] unsigned char 
  9392 ;; Return value:  Size  Location     Type
  9393 ;;		None               void
  9394 ;; Registers used:
  9395 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9396 ;; Tracked objects:
  9397 ;;		On entry : 0/0
  9398 ;;		On exit  : 0/0
  9399 ;;		Unchanged: 0/0
  9400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9404 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9405 ;;Total ram usage:        3 bytes
  9406 ;; Hardware stack levels used:    1
  9407 ;; Hardware stack levels required when called:    8
  9408 ;; This function calls:
  9409 ;;		_fillRect
  9410 ;; This function is called by:
  9411 ;;		_Go_Prev_Alarm_Field
  9412 ;;		_Go_Prev_Field
  9413 ;; This function uses a non-reentrant model
  9414 ;;
  9415                           
  9416                           	psect	text45
  9417  0010C8                     __ptext45:
  9418                           	opt stack 0
  9419  0010C8                     _Update_Setup_Screen_Cursor_Backward:
  9420                           	opt stack 20
  9421                           
  9422                           ;incstack = 0
  9423                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  9424  0010C8  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  9425                           
  9426                           ;Setup_Time.c: 256: char xinc = 36;
  9427  0010CA  0E24               	movlw	36
  9428  0010CC  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  9429                           
  9430                           ;Setup_Time.c: 257: char yinc = 30;
  9431  0010CE  0E1E               	movlw	30
  9432  0010D0  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  9433                           
  9434                           ;Setup_Time.c: 258: switch (field)
  9435  0010D2  D0BF               	goto	l8854
  9436  0010D4                     l8832:
  9437                           
  9438                           ;Setup_Time.c: 261: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9439  0010D4  0E44               	movlw	68
  9440  0010D6  6E23               	movwf	fillRect@y,c
  9441  0010D8  0E19               	movlw	25
  9442  0010DA  6E24               	movwf	fillRect@w,c
  9443  0010DC  0E02               	movlw	2
  9444  0010DE  6E25               	movwf	fillRect@h,c
  9445  0010E0  0E00               	movlw	0
  9446  0010E2  6E27               	movwf	fillRect@color+1,c
  9447  0010E4  0E00               	movlw	0
  9448  0010E6  6E26               	movwf	fillRect@color,c
  9449  0010E8  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9450  0010EA  0F0E               	addlw	14
  9451  0010EC  EC63  F01A         	call	_fillRect
  9452                           
  9453                           ;Setup_Time.c: 262: fillRect(15-1, 52+16, 25,2,0x07FF);
  9454  0010F0  0E44               	movlw	68
  9455  0010F2  6E23               	movwf	fillRect@y,c
  9456  0010F4  0E19               	movlw	25
  9457  0010F6  6E24               	movwf	fillRect@w,c
  9458  0010F8  0E02               	movlw	2
  9459  0010FA  6E25               	movwf	fillRect@h,c
  9460  0010FC  0E07               	movlw	7
  9461  0010FE  6E27               	movwf	fillRect@color+1,c
  9462  001100  6826               	setf	fillRect@color,c
  9463  001102  0E0E               	movlw	14
  9464  001104  EC63  F01A         	call	_fillRect
  9465                           
  9466                           ;Setup_Time.c: 263: break;
  9467  001108  D0B8               	goto	l766
  9468  00110A                     l8834:
  9469                           
  9470                           ;Setup_Time.c: 266: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9471  00110A  0E44               	movlw	68
  9472  00110C  6E23               	movwf	fillRect@y,c
  9473  00110E  0E19               	movlw	25
  9474  001110  6E24               	movwf	fillRect@w,c
  9475  001112  0E02               	movlw	2
  9476  001114  6E25               	movwf	fillRect@h,c
  9477  001116  0E00               	movlw	0
  9478  001118  6E27               	movwf	fillRect@color+1,c
  9479  00111A  0E00               	movlw	0
  9480  00111C  6E26               	movwf	fillRect@color,c
  9481  00111E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9482  001120  0D02               	mullw	2
  9483  001122  50F3               	movf	prodl,w,c
  9484  001124  0F0E               	addlw	14
  9485  001126  EC63  F01A         	call	_fillRect
  9486                           
  9487                           ;Setup_Time.c: 267: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9488  00112A  0E44               	movlw	68
  9489  00112C  6E23               	movwf	fillRect@y,c
  9490  00112E  0E19               	movlw	25
  9491  001130  6E24               	movwf	fillRect@w,c
  9492  001132  0E02               	movlw	2
  9493  001134  6E25               	movwf	fillRect@h,c
  9494  001136  0E07               	movlw	7
  9495  001138  6E27               	movwf	fillRect@color+1,c
  9496  00113A  6826               	setf	fillRect@color,c
  9497  00113C  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9498  00113E  0F0E               	addlw	14
  9499  001140  EC63  F01A         	call	_fillRect
  9500                           
  9501                           ;Setup_Time.c: 268: break;
  9502  001144  D09A               	goto	l766
  9503  001146                     l8838:
  9504                           
  9505                           ;Setup_Time.c: 271: fillRect(15-1, 52+16, 25,2,0x0000);
  9506  001146  0E44               	movlw	68
  9507  001148  6E23               	movwf	fillRect@y,c
  9508  00114A  0E19               	movlw	25
  9509  00114C  6E24               	movwf	fillRect@w,c
  9510  00114E  0E02               	movlw	2
  9511  001150  6E25               	movwf	fillRect@h,c
  9512  001152  0E00               	movlw	0
  9513  001154  6E27               	movwf	fillRect@color+1,c
  9514  001156  0E00               	movlw	0
  9515  001158  6E26               	movwf	fillRect@color,c
  9516  00115A  0E0E               	movlw	14
  9517  00115C  EC63  F01A         	call	_fillRect
  9518                           
  9519                           ;Setup_Time.c: 272: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9520  001160  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9521  001162  0F44               	addlw	68
  9522  001164  6E23               	movwf	fillRect@y,c
  9523  001166  0E19               	movlw	25
  9524  001168  6E24               	movwf	fillRect@w,c
  9525  00116A  0E02               	movlw	2
  9526  00116C  6E25               	movwf	fillRect@h,c
  9527  00116E  0E00               	movlw	0
  9528  001170  6E27               	movwf	fillRect@color+1,c
  9529  001172  0E00               	movlw	0
  9530  001174  6E26               	movwf	fillRect@color,c
  9531  001176  0E0E               	movlw	14
  9532  001178  EC63  F01A         	call	_fillRect
  9533                           
  9534                           ;Setup_Time.c: 273: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9535  00117C  0E44               	movlw	68
  9536  00117E  6E23               	movwf	fillRect@y,c
  9537  001180  0E19               	movlw	25
  9538  001182  6E24               	movwf	fillRect@w,c
  9539  001184  0E02               	movlw	2
  9540  001186  6E25               	movwf	fillRect@h,c
  9541  001188  0E07               	movlw	7
  9542  00118A  6E27               	movwf	fillRect@color+1,c
  9543  00118C  6826               	setf	fillRect@color,c
  9544  00118E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9545  001190  0D02               	mullw	2
  9546  001192  50F3               	movf	prodl,w,c
  9547  001194  0F0E               	addlw	14
  9548  001196  EC63  F01A         	call	_fillRect
  9549                           
  9550                           ;Setup_Time.c: 274: break;
  9551  00119A  D06F               	goto	l766
  9552  00119C                     l8842:
  9553                           
  9554                           ;Setup_Time.c: 277: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9555  00119C  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9556  00119E  0F44               	addlw	68
  9557  0011A0  6E23               	movwf	fillRect@y,c
  9558  0011A2  0E19               	movlw	25
  9559  0011A4  6E24               	movwf	fillRect@w,c
  9560  0011A6  0E02               	movlw	2
  9561  0011A8  6E25               	movwf	fillRect@h,c
  9562  0011AA  0E00               	movlw	0
  9563  0011AC  6E27               	movwf	fillRect@color+1,c
  9564  0011AE  0E00               	movlw	0
  9565  0011B0  6E26               	movwf	fillRect@color,c
  9566  0011B2  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9567  0011B4  0F0E               	addlw	14
  9568  0011B6  EC63  F01A         	call	_fillRect
  9569                           
  9570                           ;Setup_Time.c: 278: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9571  0011BA  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9572  0011BC  0F44               	addlw	68
  9573  0011BE  6E23               	movwf	fillRect@y,c
  9574  0011C0  0E19               	movlw	25
  9575  0011C2  6E24               	movwf	fillRect@w,c
  9576  0011C4  0E02               	movlw	2
  9577  0011C6  6E25               	movwf	fillRect@h,c
  9578  0011C8  0E07               	movlw	7
  9579  0011CA  6E27               	movwf	fillRect@color+1,c
  9580  0011CC  6826               	setf	fillRect@color,c
  9581  0011CE  0E0E               	movlw	14
  9582  0011D0  EC63  F01A         	call	_fillRect
  9583                           
  9584                           ;Setup_Time.c: 279: break;
  9585  0011D4  D052               	goto	l766
  9586  0011D6                     l8844:
  9587                           
  9588                           ;Setup_Time.c: 282: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9589  0011D6  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9590  0011D8  0F44               	addlw	68
  9591  0011DA  6E23               	movwf	fillRect@y,c
  9592  0011DC  0E19               	movlw	25
  9593  0011DE  6E24               	movwf	fillRect@w,c
  9594  0011E0  0E02               	movlw	2
  9595  0011E2  6E25               	movwf	fillRect@h,c
  9596  0011E4  0E00               	movlw	0
  9597  0011E6  6E27               	movwf	fillRect@color+1,c
  9598  0011E8  0E00               	movlw	0
  9599  0011EA  6E26               	movwf	fillRect@color,c
  9600  0011EC  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9601  0011EE  0D02               	mullw	2
  9602  0011F0  50F3               	movf	prodl,w,c
  9603  0011F2  0F0E               	addlw	14
  9604  0011F4  EC63  F01A         	call	_fillRect
  9605                           
  9606                           ;Setup_Time.c: 283: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9607  0011F8  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9608  0011FA  0F44               	addlw	68
  9609  0011FC  6E23               	movwf	fillRect@y,c
  9610  0011FE  0E19               	movlw	25
  9611  001200  6E24               	movwf	fillRect@w,c
  9612  001202  0E02               	movlw	2
  9613  001204  6E25               	movwf	fillRect@h,c
  9614  001206  0E07               	movlw	7
  9615  001208  6E27               	movwf	fillRect@color+1,c
  9616  00120A  6826               	setf	fillRect@color,c
  9617  00120C  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9618  00120E  0F0E               	addlw	14
  9619  001210  EC63  F01A         	call	_fillRect
  9620                           
  9621                           ;Setup_Time.c: 284: break;
  9622  001214  D032               	goto	l766
  9623  001216                     l8848:
  9624                           
  9625                           ;Setup_Time.c: 287: fillRect(15-1, 52+16, 25,2,0x0000);
  9626  001216  0E44               	movlw	68
  9627  001218  6E23               	movwf	fillRect@y,c
  9628  00121A  0E19               	movlw	25
  9629  00121C  6E24               	movwf	fillRect@w,c
  9630  00121E  0E02               	movlw	2
  9631  001220  6E25               	movwf	fillRect@h,c
  9632  001222  0E00               	movlw	0
  9633  001224  6E27               	movwf	fillRect@color+1,c
  9634  001226  0E00               	movlw	0
  9635  001228  6E26               	movwf	fillRect@color,c
  9636  00122A  0E0E               	movlw	14
  9637  00122C  EC63  F01A         	call	_fillRect
  9638                           
  9639                           ;Setup_Time.c: 288: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9640  001230  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9641  001232  0F44               	addlw	68
  9642  001234  6E23               	movwf	fillRect@y,c
  9643  001236  0E19               	movlw	25
  9644  001238  6E24               	movwf	fillRect@w,c
  9645  00123A  0E02               	movlw	2
  9646  00123C  6E25               	movwf	fillRect@h,c
  9647  00123E  0E07               	movlw	7
  9648  001240  6E27               	movwf	fillRect@color+1,c
  9649  001242  6826               	setf	fillRect@color,c
  9650  001244  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9651  001246  0D02               	mullw	2
  9652  001248  50F3               	movf	prodl,w,c
  9653  00124A  0F0E               	addlw	14
  9654  00124C  EC63  F01A         	call	_fillRect
  9655                           
  9656                           ;Setup_Time.c: 290: }
  9657                           
  9658                           ;Setup_Time.c: 289: break;
  9659  001250  D014               	goto	l766
  9660  001252                     l8854:
  9661  001252  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  9662                           
  9663                           ; Switch size 1, requested type "space"
  9664                           ; Number of cases is 6, Range of values is 0 to 5
  9665                           ; switch strategies available:
  9666                           ; Name         Instructions Cycles
  9667                           ; simple_byte           19    10 (average)
  9668                           ;	Chosen strategy is simple_byte
  9669  001254  0A00               	xorlw	0	; case 0
  9670  001256  B4D8               	btfsc	status,2,c
  9671  001258  D73D               	goto	l8832
  9672  00125A  0A01               	xorlw	1	; case 1
  9673  00125C  B4D8               	btfsc	status,2,c
  9674  00125E  D755               	goto	l8834
  9675  001260  0A03               	xorlw	3	; case 2
  9676  001262  B4D8               	btfsc	status,2,c
  9677  001264  D770               	goto	l8838
  9678  001266  0A01               	xorlw	1	; case 3
  9679  001268  B4D8               	btfsc	status,2,c
  9680  00126A  D798               	goto	l8842
  9681  00126C  0A07               	xorlw	7	; case 4
  9682  00126E  B4D8               	btfsc	status,2,c
  9683  001270  D7B2               	goto	l8844
  9684  001272  0A01               	xorlw	1	; case 5
  9685  001274  B4D8               	btfsc	status,2,c
  9686  001276  D7CF               	goto	l8848
  9687  001278  D000               	goto	l766
  9688  00127A                     l766:
  9689  00127A  0012               	return		;funcret
  9690  00127C                     __end_of_Update_Setup_Screen_Cursor_Backward:
  9691                           	opt stack 0
  9692                           tblptru	equ	0xFF8
  9693                           tblptrh	equ	0xFF7
  9694                           tblptrl	equ	0xFF6
  9695                           tablat	equ	0xFF5
  9696                           prodh	equ	0xFF4
  9697                           prodl	equ	0xFF3
  9698                           intcon	equ	0xFF2
  9699                           intcon2	equ	0xFF1
  9700                           postinc0	equ	0xFEE
  9701                           wreg	equ	0xFE8
  9702                           postdec1	equ	0xFE5
  9703                           fsr1l	equ	0xFE1
  9704                           postinc2	equ	0xFDE
  9705                           fsr2h	equ	0xFDA
  9706                           fsr2l	equ	0xFD9
  9707                           status	equ	0xFD8
  9708                           
  9709 ;; *************** function _Go_Next_Alarm_Field *****************
  9710 ;; Defined at:
  9711 ;;		line 117 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Alarm_Time.c
      +"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;		None
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;		None
  9716 ;; Return value:  Size  Location     Type
  9717 ;;		None               void
  9718 ;; Registers used:
  9719 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 0/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;Total ram usage:        0 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:    9
  9732 ;; This function calls:
  9733 ;;		_Update_Setup_Screen_Cursor_Forward
  9734 ;; This function is called by:
  9735 ;;		_Do_Setup_Alarm_Time
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           	psect	text46
  9740  003A42                     __ptext46:
  9741                           	opt stack 0
  9742  003A42                     _Go_Next_Alarm_Field:
  9743                           	opt stack 20
  9744                           
  9745                           ;Setup_Alarm_Time.c: 120: Select_Alarm_Field++;
  9746                           
  9747                           ;incstack = 0
  9748  003A42  2A56               	incf	_Select_Alarm_Field,f,c
  9749                           
  9750                           ;Setup_Alarm_Time.c: 121: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
  9751  003A44  0E03               	movlw	3
  9752  003A46  1856               	xorwf	_Select_Alarm_Field,w,c
  9753  003A48  A4D8               	btfss	status,2,c
  9754  003A4A  D003               	goto	l9126
  9755  003A4C  0E00               	movlw	0
  9756  003A4E  6E56               	movwf	_Select_Alarm_Field,c
  9757  003A50  D000               	goto	l9126
  9758  003A52                     l9126:
  9759                           
  9760                           ;Setup_Alarm_Time.c: 122: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
  9761  003A52  5056               	movf	_Select_Alarm_Field,w,c
  9762  003A54  EC87  F007         	call	_Update_Setup_Screen_Cursor_Forward
  9763  003A58  0012               	return		;funcret
  9764  003A5A                     __end_of_Go_Next_Alarm_Field:
  9765                           	opt stack 0
  9766                           tblptru	equ	0xFF8
  9767                           tblptrh	equ	0xFF7
  9768                           tblptrl	equ	0xFF6
  9769                           tablat	equ	0xFF5
  9770                           prodh	equ	0xFF4
  9771                           prodl	equ	0xFF3
  9772                           intcon	equ	0xFF2
  9773                           intcon2	equ	0xFF1
  9774                           postinc0	equ	0xFEE
  9775                           wreg	equ	0xFE8
  9776                           postdec1	equ	0xFE5
  9777                           fsr1l	equ	0xFE1
  9778                           postinc2	equ	0xFDE
  9779                           fsr2h	equ	0xFDA
  9780                           fsr2l	equ	0xFD9
  9781                           status	equ	0xFD8
  9782                           
  9783 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  9784 ;; Defined at:
  9785 ;;		line 215 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Time.c"
  9786 ;; Parameters:    Size  Location     Type
  9787 ;;  field           1    wreg     unsigned char 
  9788 ;; Auto vars:     Size  Location     Type
  9789 ;;  field           1   45[COMRAM] unsigned char 
  9790 ;;  xinc            1   47[COMRAM] unsigned char 
  9791 ;;  yinc            1   46[COMRAM] unsigned char 
  9792 ;; Return value:  Size  Location     Type
  9793 ;;		None               void
  9794 ;; Registers used:
  9795 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9796 ;; Tracked objects:
  9797 ;;		On entry : 0/0
  9798 ;;		On exit  : 0/0
  9799 ;;		Unchanged: 0/0
  9800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9802 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9804 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9805 ;;Total ram usage:        3 bytes
  9806 ;; Hardware stack levels used:    1
  9807 ;; Hardware stack levels required when called:    8
  9808 ;; This function calls:
  9809 ;;		_fillRect
  9810 ;; This function is called by:
  9811 ;;		_Go_Next_Alarm_Field
  9812 ;;		_Go_Next_Field
  9813 ;; This function uses a non-reentrant model
  9814 ;;
  9815                           
  9816                           	psect	text47
  9817  000F0E                     __ptext47:
  9818                           	opt stack 0
  9819  000F0E                     _Update_Setup_Screen_Cursor_Forward:
  9820                           	opt stack 20
  9821                           
  9822                           ;incstack = 0
  9823                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  9824  000F0E  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  9825                           
  9826                           ;Setup_Time.c: 217: char xinc = 36;
  9827  000F10  0E24               	movlw	36
  9828  000F12  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  9829                           
  9830                           ;Setup_Time.c: 218: char yinc = 30;
  9831  000F14  0E1E               	movlw	30
  9832  000F16  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  9833                           
  9834                           ;Setup_Time.c: 219: switch (field)
  9835  000F18  D0C2               	goto	l8828
  9836  000F1A                     l8806:
  9837                           
  9838                           ;Setup_Time.c: 222: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9839  000F1A  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9840  000F1C  0F44               	addlw	68
  9841  000F1E  6E23               	movwf	fillRect@y,c
  9842  000F20  0E19               	movlw	25
  9843  000F22  6E24               	movwf	fillRect@w,c
  9844  000F24  0E02               	movlw	2
  9845  000F26  6E25               	movwf	fillRect@h,c
  9846  000F28  0E00               	movlw	0
  9847  000F2A  6E27               	movwf	fillRect@color+1,c
  9848  000F2C  0E00               	movlw	0
  9849  000F2E  6E26               	movwf	fillRect@color,c
  9850  000F30  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9851  000F32  0D02               	mullw	2
  9852  000F34  50F3               	movf	prodl,w,c
  9853  000F36  0F0E               	addlw	14
  9854  000F38  EC63  F01A         	call	_fillRect
  9855                           
  9856                           ;Setup_Time.c: 223: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9857  000F3C  0E44               	movlw	68
  9858  000F3E  6E23               	movwf	fillRect@y,c
  9859  000F40  0E19               	movlw	25
  9860  000F42  6E24               	movwf	fillRect@w,c
  9861  000F44  0E02               	movlw	2
  9862  000F46  6E25               	movwf	fillRect@h,c
  9863  000F48  0E00               	movlw	0
  9864  000F4A  6E27               	movwf	fillRect@color+1,c
  9865  000F4C  0E00               	movlw	0
  9866  000F4E  6E26               	movwf	fillRect@color,c
  9867  000F50  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9868  000F52  0D02               	mullw	2
  9869  000F54  50F3               	movf	prodl,w,c
  9870  000F56  0F0E               	addlw	14
  9871  000F58  EC63  F01A         	call	_fillRect
  9872                           
  9873                           ;Setup_Time.c: 224: fillRect(15-1, 52+16, 25,2,0x07FF);
  9874  000F5C  0E44               	movlw	68
  9875  000F5E  6E23               	movwf	fillRect@y,c
  9876  000F60  0E19               	movlw	25
  9877  000F62  6E24               	movwf	fillRect@w,c
  9878  000F64  0E02               	movlw	2
  9879  000F66  6E25               	movwf	fillRect@h,c
  9880  000F68  0E07               	movlw	7
  9881  000F6A  6E27               	movwf	fillRect@color+1,c
  9882  000F6C  6826               	setf	fillRect@color,c
  9883  000F6E  0E0E               	movlw	14
  9884  000F70  EC63  F01A         	call	_fillRect
  9885                           
  9886                           ;Setup_Time.c: 225: break;
  9887  000F74  D0A8               	goto	l755
  9888  000F76                     l8810:
  9889                           
  9890                           ;Setup_Time.c: 228: fillRect(15-1, 52+16, 25,2,0x0000);
  9891  000F76  0E44               	movlw	68
  9892  000F78  6E23               	movwf	fillRect@y,c
  9893  000F7A  0E19               	movlw	25
  9894  000F7C  6E24               	movwf	fillRect@w,c
  9895  000F7E  0E02               	movlw	2
  9896  000F80  6E25               	movwf	fillRect@h,c
  9897  000F82  0E00               	movlw	0
  9898  000F84  6E27               	movwf	fillRect@color+1,c
  9899  000F86  0E00               	movlw	0
  9900  000F88  6E26               	movwf	fillRect@color,c
  9901  000F8A  0E0E               	movlw	14
  9902  000F8C  EC63  F01A         	call	_fillRect
  9903                           
  9904                           ;Setup_Time.c: 229: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9905  000F90  0E44               	movlw	68
  9906  000F92  6E23               	movwf	fillRect@y,c
  9907  000F94  0E19               	movlw	25
  9908  000F96  6E24               	movwf	fillRect@w,c
  9909  000F98  0E02               	movlw	2
  9910  000F9A  6E25               	movwf	fillRect@h,c
  9911  000F9C  0E07               	movlw	7
  9912  000F9E  6E27               	movwf	fillRect@color+1,c
  9913  000FA0  6826               	setf	fillRect@color,c
  9914  000FA2  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9915  000FA4  0F0E               	addlw	14
  9916  000FA6  EC63  F01A         	call	_fillRect
  9917                           
  9918                           ;Setup_Time.c: 230: break;
  9919  000FAA  D08D               	goto	l755
  9920  000FAC                     l8812:
  9921                           
  9922                           ;Setup_Time.c: 233: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9923  000FAC  0E44               	movlw	68
  9924  000FAE  6E23               	movwf	fillRect@y,c
  9925  000FB0  0E19               	movlw	25
  9926  000FB2  6E24               	movwf	fillRect@w,c
  9927  000FB4  0E02               	movlw	2
  9928  000FB6  6E25               	movwf	fillRect@h,c
  9929  000FB8  0E00               	movlw	0
  9930  000FBA  6E27               	movwf	fillRect@color+1,c
  9931  000FBC  0E00               	movlw	0
  9932  000FBE  6E26               	movwf	fillRect@color,c
  9933  000FC0  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9934  000FC2  0F0E               	addlw	14
  9935  000FC4  EC63  F01A         	call	_fillRect
  9936                           
  9937                           ;Setup_Time.c: 234: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9938  000FC8  0E44               	movlw	68
  9939  000FCA  6E23               	movwf	fillRect@y,c
  9940  000FCC  0E19               	movlw	25
  9941  000FCE  6E24               	movwf	fillRect@w,c
  9942  000FD0  0E02               	movlw	2
  9943  000FD2  6E25               	movwf	fillRect@h,c
  9944  000FD4  0E07               	movlw	7
  9945  000FD6  6E27               	movwf	fillRect@color+1,c
  9946  000FD8  6826               	setf	fillRect@color,c
  9947  000FDA  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9948  000FDC  0D02               	mullw	2
  9949  000FDE  50F3               	movf	prodl,w,c
  9950  000FE0  0F0E               	addlw	14
  9951  000FE2  EC63  F01A         	call	_fillRect
  9952                           
  9953                           ;Setup_Time.c: 235: break;
  9954  000FE6  D06F               	goto	l755
  9955  000FE8                     l8816:
  9956                           
  9957                           ;Setup_Time.c: 238: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9958  000FE8  0E44               	movlw	68
  9959  000FEA  6E23               	movwf	fillRect@y,c
  9960  000FEC  0E19               	movlw	25
  9961  000FEE  6E24               	movwf	fillRect@w,c
  9962  000FF0  0E02               	movlw	2
  9963  000FF2  6E25               	movwf	fillRect@h,c
  9964  000FF4  0E00               	movlw	0
  9965  000FF6  6E27               	movwf	fillRect@color+1,c
  9966  000FF8  0E00               	movlw	0
  9967  000FFA  6E26               	movwf	fillRect@color,c
  9968  000FFC  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9969  000FFE  0D02               	mullw	2
  9970  001000  50F3               	movf	prodl,w,c
  9971  001002  0F0E               	addlw	14
  9972  001004  EC63  F01A         	call	_fillRect
  9973                           
  9974                           ;Setup_Time.c: 239: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9975  001008  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9976  00100A  0F44               	addlw	68
  9977  00100C  6E23               	movwf	fillRect@y,c
  9978  00100E  0E19               	movlw	25
  9979  001010  6E24               	movwf	fillRect@w,c
  9980  001012  0E02               	movlw	2
  9981  001014  6E25               	movwf	fillRect@h,c
  9982  001016  0E07               	movlw	7
  9983  001018  6E27               	movwf	fillRect@color+1,c
  9984  00101A  6826               	setf	fillRect@color,c
  9985  00101C  0E0E               	movlw	14
  9986  00101E  EC63  F01A         	call	_fillRect
  9987                           
  9988                           ;Setup_Time.c: 240: break;
  9989  001022  D051               	goto	l755
  9990  001024                     l8820:
  9991                           
  9992                           ;Setup_Time.c: 243: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9993  001024  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9994  001026  0F44               	addlw	68
  9995  001028  6E23               	movwf	fillRect@y,c
  9996  00102A  0E19               	movlw	25
  9997  00102C  6E24               	movwf	fillRect@w,c
  9998  00102E  0E02               	movlw	2
  9999  001030  6E25               	movwf	fillRect@h,c
 10000  001032  0E00               	movlw	0
 10001  001034  6E27               	movwf	fillRect@color+1,c
 10002  001036  0E00               	movlw	0
 10003  001038  6E26               	movwf	fillRect@color,c
 10004  00103A  0E0E               	movlw	14
 10005  00103C  EC63  F01A         	call	_fillRect
 10006                           
 10007                           ;Setup_Time.c: 244: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
 10008  001040  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10009  001042  0F44               	addlw	68
 10010  001044  6E23               	movwf	fillRect@y,c
 10011  001046  0E19               	movlw	25
 10012  001048  6E24               	movwf	fillRect@w,c
 10013  00104A  0E02               	movlw	2
 10014  00104C  6E25               	movwf	fillRect@h,c
 10015  00104E  0E07               	movlw	7
 10016  001050  6E27               	movwf	fillRect@color+1,c
 10017  001052  6826               	setf	fillRect@color,c
 10018  001054  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10019  001056  0F0E               	addlw	14
 10020  001058  EC63  F01A         	call	_fillRect
 10021                           
 10022                           ;Setup_Time.c: 245: break;
 10023  00105C  D034               	goto	l755
 10024  00105E                     l8822:
 10025                           
 10026                           ;Setup_Time.c: 248: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
 10027  00105E  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10028  001060  0F44               	addlw	68
 10029  001062  6E23               	movwf	fillRect@y,c
 10030  001064  0E19               	movlw	25
 10031  001066  6E24               	movwf	fillRect@w,c
 10032  001068  0E02               	movlw	2
 10033  00106A  6E25               	movwf	fillRect@h,c
 10034  00106C  0E00               	movlw	0
 10035  00106E  6E27               	movwf	fillRect@color+1,c
 10036  001070  0E00               	movlw	0
 10037  001072  6E26               	movwf	fillRect@color,c
 10038  001074  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10039  001076  0F0E               	addlw	14
 10040  001078  EC63  F01A         	call	_fillRect
 10041                           
 10042                           ;Setup_Time.c: 249: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
 10043  00107C  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
 10044  00107E  0F44               	addlw	68
 10045  001080  6E23               	movwf	fillRect@y,c
 10046  001082  0E19               	movlw	25
 10047  001084  6E24               	movwf	fillRect@w,c
 10048  001086  0E02               	movlw	2
 10049  001088  6E25               	movwf	fillRect@h,c
 10050  00108A  0E07               	movlw	7
 10051  00108C  6E27               	movwf	fillRect@color+1,c
 10052  00108E  6826               	setf	fillRect@color,c
 10053  001090  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10054  001092  0D02               	mullw	2
 10055  001094  50F3               	movf	prodl,w,c
 10056  001096  0F0E               	addlw	14
 10057  001098  EC63  F01A         	call	_fillRect
 10058                           
 10059                           ;Setup_Time.c: 251: }
 10060                           
 10061                           ;Setup_Time.c: 250: break;
 10062  00109C  D014               	goto	l755
 10063  00109E                     l8828:
 10064  00109E  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
 10065                           
 10066                           ; Switch size 1, requested type "space"
 10067                           ; Number of cases is 6, Range of values is 0 to 5
 10068                           ; switch strategies available:
 10069                           ; Name         Instructions Cycles
 10070                           ; simple_byte           19    10 (average)
 10071                           ;	Chosen strategy is simple_byte
 10072  0010A0  0A00               	xorlw	0	; case 0
 10073  0010A2  B4D8               	btfsc	status,2,c
 10074  0010A4  D73A               	goto	l8806
 10075  0010A6  0A01               	xorlw	1	; case 1
 10076  0010A8  B4D8               	btfsc	status,2,c
 10077  0010AA  D765               	goto	l8810
 10078  0010AC  0A03               	xorlw	3	; case 2
 10079  0010AE  B4D8               	btfsc	status,2,c
 10080  0010B0  D77D               	goto	l8812
 10081  0010B2  0A01               	xorlw	1	; case 3
 10082  0010B4  B4D8               	btfsc	status,2,c
 10083  0010B6  D798               	goto	l8816
 10084  0010B8  0A07               	xorlw	7	; case 4
 10085  0010BA  B4D8               	btfsc	status,2,c
 10086  0010BC  D7B3               	goto	l8820
 10087  0010BE  0A01               	xorlw	1	; case 5
 10088  0010C0  B4D8               	btfsc	status,2,c
 10089  0010C2  D7CD               	goto	l8822
 10090  0010C4  D000               	goto	l755
 10091  0010C6                     l755:
 10092  0010C6  0012               	return		;funcret
 10093  0010C8                     __end_of_Update_Setup_Screen_Cursor_Forward:
 10094                           	opt stack 0
 10095                           tblptru	equ	0xFF8
 10096                           tblptrh	equ	0xFF7
 10097                           tblptrl	equ	0xFF6
 10098                           tablat	equ	0xFF5
 10099                           prodh	equ	0xFF4
 10100                           prodl	equ	0xFF3
 10101                           intcon	equ	0xFF2
 10102                           intcon2	equ	0xFF1
 10103                           postinc0	equ	0xFEE
 10104                           wreg	equ	0xFE8
 10105                           postdec1	equ	0xFE5
 10106                           fsr1l	equ	0xFE1
 10107                           postinc2	equ	0xFDE
 10108                           fsr2h	equ	0xFDA
 10109                           fsr2l	equ	0xFD9
 10110                           status	equ	0xFD8
 10111                           
 10112 ;; *************** function _Exit_Setup_Alarm_Time *****************
 10113 ;; Defined at:
 10114 ;;		line 133 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Alarm_Time.c
      +"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;		None
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;		None
 10119 ;; Return value:  Size  Location     Type
 10120 ;;		None               void
 10121 ;; Registers used:
 10122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;Total ram usage:        0 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; Hardware stack levels required when called:   11
 10135 ;; This function calls:
 10136 ;;		_DS3231_Read_Time
 10137 ;;		_Initialize_Screen
 10138 ;; This function is called by:
 10139 ;;		_Do_Setup_Alarm_Time
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           	psect	text48
 10144  003B68                     __ptext48:
 10145                           	opt stack 0
 10146  003B68                     _Exit_Setup_Alarm_Time:
 10147                           	opt stack 18
 10148                           
 10149                           ;Setup_Alarm_Time.c: 135: DS3231_Read_Time();
 10150                           
 10151                           ;incstack = 0
 10152  003B68  EC67  F018         	call	_DS3231_Read_Time	;wreg free
 10153                           
 10154                           ;Setup_Alarm_Time.c: 136: Initialize_Screen();
 10155  003B6C  EC27  F003         	call	_Initialize_Screen	;wreg free
 10156                           
 10157                           ;Setup_Alarm_Time.c: 137: In_Alarm_Time_Setup = 0;
 10158  003B70  0E00               	movlw	0
 10159  003B72  0100               	movlb	0	; () banked
 10160  003B74  6FF1               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10161                           
 10162                           ; BSR set to: 0
 10163  003B76  0012               	return		;funcret
 10164  003B78                     __end_of_Exit_Setup_Alarm_Time:
 10165                           	opt stack 0
 10166                           tblptru	equ	0xFF8
 10167                           tblptrh	equ	0xFF7
 10168                           tblptrl	equ	0xFF6
 10169                           tablat	equ	0xFF5
 10170                           prodh	equ	0xFF4
 10171                           prodl	equ	0xFF3
 10172                           intcon	equ	0xFF2
 10173                           intcon2	equ	0xFF1
 10174                           postinc0	equ	0xFEE
 10175                           wreg	equ	0xFE8
 10176                           postdec1	equ	0xFE5
 10177                           fsr1l	equ	0xFE1
 10178                           postinc2	equ	0xFDE
 10179                           fsr2h	equ	0xFDA
 10180                           fsr2l	equ	0xFD9
 10181                           status	equ	0xFD8
 10182                           
 10183 ;; *************** function _Do_Save_New_Alarm_Time *****************
 10184 ;; Defined at:
 10185 ;;		line 140 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Alarm_Time.c
      +"
 10186 ;; Parameters:    Size  Location     Type
 10187 ;;		None
 10188 ;; Auto vars:     Size  Location     Type
 10189 ;;		None
 10190 ;; Return value:  Size  Location     Type
 10191 ;;		None               void
 10192 ;; Registers used:
 10193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10194 ;; Tracked objects:
 10195 ;;		On entry : 0/0
 10196 ;;		On exit  : 0/0
 10197 ;;		Unchanged: 0/0
 10198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10203 ;;Total ram usage:        0 bytes
 10204 ;; Hardware stack levels used:    1
 10205 ;; Hardware stack levels required when called:   11
 10206 ;; This function calls:
 10207 ;;		_DS3231_Read_Alarm_Time
 10208 ;;		_DS3231_Read_Time
 10209 ;;		_DS3231_Write_Alarm_Time
 10210 ;;		_Initialize_Screen
 10211 ;; This function is called by:
 10212 ;;		_Do_Setup_Alarm_Time
 10213 ;; This function uses a non-reentrant model
 10214 ;;
 10215                           
 10216                           	psect	text49
 10217  003A5A                     __ptext49:
 10218                           	opt stack 0
 10219  003A5A                     _Do_Save_New_Alarm_Time:
 10220                           	opt stack 18
 10221                           
 10222                           ;Setup_Alarm_Time.c: 142: DS3231_Write_Alarm_Time();
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;incstack = 0
 10226  003A5A  ECD1  F016         	call	_DS3231_Write_Alarm_Time	;wreg free
 10227                           
 10228                           ;Setup_Alarm_Time.c: 143: DS3231_Read_Alarm_Time();
 10229  003A5E  EC17  F01A         	call	_DS3231_Read_Alarm_Time	;wreg free
 10230                           
 10231                           ;Setup_Alarm_Time.c: 144: DS3231_Read_Time();
 10232  003A62  EC67  F018         	call	_DS3231_Read_Time	;wreg free
 10233                           
 10234                           ;Setup_Alarm_Time.c: 145: Initialize_Screen();
 10235  003A66  EC27  F003         	call	_Initialize_Screen	;wreg free
 10236                           
 10237                           ;Setup_Alarm_Time.c: 146: In_Alarm_Time_Setup = 0;
 10238  003A6A  0E00               	movlw	0
 10239  003A6C  0100               	movlb	0	; () banked
 10240  003A6E  6FF1               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10241                           
 10242                           ; BSR set to: 0
 10243  003A70  0012               	return		;funcret
 10244  003A72                     __end_of_Do_Save_New_Alarm_Time:
 10245                           	opt stack 0
 10246                           tblptru	equ	0xFF8
 10247                           tblptrh	equ	0xFF7
 10248                           tblptrl	equ	0xFF6
 10249                           tablat	equ	0xFF5
 10250                           prodh	equ	0xFF4
 10251                           prodl	equ	0xFF3
 10252                           intcon	equ	0xFF2
 10253                           intcon2	equ	0xFF1
 10254                           postinc0	equ	0xFEE
 10255                           wreg	equ	0xFE8
 10256                           postdec1	equ	0xFE5
 10257                           fsr1l	equ	0xFE1
 10258                           postinc2	equ	0xFDE
 10259                           fsr2h	equ	0xFDA
 10260                           fsr2l	equ	0xFD9
 10261                           status	equ	0xFD8
 10262                           
 10263 ;; *************** function _Initialize_Screen *****************
 10264 ;; Defined at:
 10265 ;;		line 36 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Main_Screen.c"
 10266 ;; Parameters:    Size  Location     Type
 10267 ;;		None
 10268 ;; Auto vars:     Size  Location     Type
 10269 ;;		None
 10270 ;; Return value:  Size  Location     Type
 10271 ;;		None               void
 10272 ;; Registers used:
 10273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10274 ;; Tracked objects:
 10275 ;;		On entry : 0/0
 10276 ;;		On exit  : 0/0
 10277 ;;		Unchanged: 0/0
 10278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10283 ;;Total ram usage:        0 bytes
 10284 ;; Hardware stack levels used:    1
 10285 ;; Hardware stack levels required when called:   10
 10286 ;; This function calls:
 10287 ;;		_LCD_Reset
 10288 ;;		_TFT_GreenTab_Initialize
 10289 ;;		_drawCircle
 10290 ;;		_drawtext
 10291 ;;		_fillScreen
 10292 ;;		_strcpy
 10293 ;; This function is called by:
 10294 ;;		_main
 10295 ;;		_Exit_Setup_Alarm_Time
 10296 ;;		_Do_Save_New_Alarm_Time
 10297 ;;		_Do_Save_New_Time
 10298 ;;		_Exit_Time_Setup
 10299 ;;		_Exit_Setup_Heater_Temp
 10300 ;;		_Do_Save_New_Heater_Temp
 10301 ;; This function uses a non-reentrant model
 10302 ;;
 10303                           
 10304                           	psect	text50
 10305  00064E                     __ptext50:
 10306                           	opt stack 0
 10307  00064E                     _Initialize_Screen:
 10308                           	opt stack 20
 10309                           
 10310                           ;Main_Screen.c: 38: LCD_Reset();
 10311                           
 10312                           ; BSR set to: 0
 10313                           ;incstack = 0
 10314  00064E  EC76  F01D         	call	_LCD_Reset	;wreg free
 10315                           
 10316                           ;Main_Screen.c: 39: TFT_GreenTab_Initialize();
 10317  000652  EC12  F01C         	call	_TFT_GreenTab_Initialize	;wreg free
 10318                           
 10319                           ;Main_Screen.c: 40: fillScreen(0x0000);
 10320  000656  0E00               	movlw	0
 10321  000658  6E25               	movwf	fillScreen@color+1,c
 10322  00065A  0E00               	movlw	0
 10323  00065C  6E24               	movwf	fillScreen@color,c
 10324  00065E  ECE2  F01C         	call	_fillScreen	;wreg free
 10325                           
 10326                           ;Main_Screen.c: 42: strcpy(txt, " ECE3301L Sp'22 Sx\0");
 10327  000662  C052  F011         	movff	_txt,strcpy@to
 10328  000666  C053  F012         	movff	_txt+1,strcpy@to+1
 10329  00066A  0EE5               	movlw	low STR_8
 10330  00066C  6E13               	movwf	strcpy@from,c
 10331  00066E  0EFE               	movlw	high STR_8
 10332  000670  6E14               	movwf	strcpy@from+1,c
 10333  000672  ECA1  F01B         	call	_strcpy	;wreg free
 10334                           
 10335                           ;Main_Screen.c: 43: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
 10336  000676  0E01               	movlw	1
 10337  000678  6E39               	movwf	drawtext@y,c
 10338  00067A  C052  F03A         	movff	_txt,drawtext@_text
 10339  00067E  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10340  000682  0EFF               	movlw	255
 10341  000684  6E3D               	movwf	drawtext@color+1,c
 10342  000686  683C               	setf	drawtext@color,c
 10343  000688  0E00               	movlw	0
 10344  00068A  6E3F               	movwf	drawtext@bg+1,c
 10345  00068C  0E00               	movlw	0
 10346  00068E  6E3E               	movwf	drawtext@bg,c
 10347  000690  0E01               	movlw	1
 10348  000692  6E40               	movwf	drawtext@size,c
 10349  000694  0E01               	movlw	1
 10350  000696  EC64  F011         	call	_drawtext
 10351                           
 10352                           ;Main_Screen.c: 45: strcpy(txt, "Temperature:");
 10353  00069A  C052  F011         	movff	_txt,strcpy@to
 10354  00069E  C053  F012         	movff	_txt+1,strcpy@to+1
 10355  0006A2  0E6F               	movlw	low STR_9
 10356  0006A4  6E13               	movwf	strcpy@from,c
 10357  0006A6  0EFF               	movlw	high STR_9
 10358  0006A8  6E14               	movwf	strcpy@from+1,c
 10359  0006AA  ECA1  F01B         	call	_strcpy	;wreg free
 10360                           
 10361                           ;Main_Screen.c: 46: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
 10362  0006AE  0E0B               	movlw	11
 10363  0006B0  6E39               	movwf	drawtext@y,c
 10364  0006B2  C052  F03A         	movff	_txt,drawtext@_text
 10365  0006B6  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10366  0006BA  0EF8               	movlw	248
 10367  0006BC  6E3D               	movwf	drawtext@color+1,c
 10368  0006BE  0E1F               	movlw	31
 10369  0006C0  6E3C               	movwf	drawtext@color,c
 10370  0006C2  0E00               	movlw	0
 10371  0006C4  6E3F               	movwf	drawtext@bg+1,c
 10372  0006C6  0E00               	movlw	0
 10373  0006C8  6E3E               	movwf	drawtext@bg,c
 10374  0006CA  0E01               	movlw	1
 10375  0006CC  6E40               	movwf	drawtext@size,c
 10376  0006CE  0E18               	movlw	24
 10377  0006D0  EC64  F011         	call	_drawtext
 10378                           
 10379                           ;Main_Screen.c: 47: drawCircle(40, 23 , 2 , 0xFFE0);
 10380  0006D4  0E00               	movlw	0
 10381  0006D6  6E1D               	movwf	drawCircle@x0+1,c
 10382  0006D8  0E28               	movlw	40
 10383  0006DA  6E1C               	movwf	drawCircle@x0,c
 10384  0006DC  0E00               	movlw	0
 10385  0006DE  6E1F               	movwf	drawCircle@y0+1,c
 10386  0006E0  0E17               	movlw	23
 10387  0006E2  6E1E               	movwf	drawCircle@y0,c
 10388  0006E4  0E00               	movlw	0
 10389  0006E6  6E21               	movwf	drawCircle@r+1,c
 10390  0006E8  0E02               	movlw	2
 10391  0006EA  6E20               	movwf	drawCircle@r,c
 10392  0006EC  0EFF               	movlw	255
 10393  0006EE  6E23               	movwf	drawCircle@color+1,c
 10394  0006F0  0EE0               	movlw	224
 10395  0006F2  6E22               	movwf	drawCircle@color,c
 10396  0006F4  EC3E  F009         	call	_drawCircle	;wreg free
 10397                           
 10398                           ;Main_Screen.c: 48: strcpy(txt, "C/");
 10399  0006F8  C052  F011         	movff	_txt,strcpy@to
 10400  0006FC  C053  F012         	movff	_txt+1,strcpy@to+1
 10401  000700  0EF6               	movlw	low STR_10
 10402  000702  6E13               	movwf	strcpy@from,c
 10403  000704  0EFF               	movlw	high STR_10
 10404  000706  6E14               	movwf	strcpy@from+1,c
 10405  000708  ECA1  F01B         	call	_strcpy	;wreg free
 10406                           
 10407                           ;Main_Screen.c: 49: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
 10408  00070C  0E17               	movlw	23
 10409  00070E  6E39               	movwf	drawtext@y,c
 10410  000710  C052  F03A         	movff	_txt,drawtext@_text
 10411  000714  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10412  000718  0EFF               	movlw	255
 10413  00071A  6E3D               	movwf	drawtext@color+1,c
 10414  00071C  0EE0               	movlw	224
 10415  00071E  6E3C               	movwf	drawtext@color,c
 10416  000720  0E00               	movlw	0
 10417  000722  6E3F               	movwf	drawtext@bg+1,c
 10418  000724  0E00               	movlw	0
 10419  000726  6E3E               	movwf	drawtext@bg,c
 10420  000728  0E02               	movlw	2
 10421  00072A  6E40               	movwf	drawtext@size,c
 10422  00072C  0E2D               	movlw	45
 10423  00072E  EC64  F011         	call	_drawtext
 10424                           
 10425                           ;Main_Screen.c: 50: strcpy(txt, "F");
 10426  000732  C052  F011         	movff	_txt,strcpy@to
 10427  000736  C053  F012         	movff	_txt+1,strcpy@to+1
 10428  00073A  0EF0               	movlw	low (STR_23+2)
 10429  00073C  6E13               	movwf	strcpy@from,c
 10430  00073E  0EFF               	movlw	high (STR_23+2)
 10431  000740  6E14               	movwf	strcpy@from+1,c
 10432  000742  ECA1  F01B         	call	_strcpy	;wreg free
 10433                           
 10434                           ;Main_Screen.c: 51: drawCircle(110, 23 , 2 , 0xFFE0);
 10435  000746  0E00               	movlw	0
 10436  000748  6E1D               	movwf	drawCircle@x0+1,c
 10437  00074A  0E6E               	movlw	110
 10438  00074C  6E1C               	movwf	drawCircle@x0,c
 10439  00074E  0E00               	movlw	0
 10440  000750  6E1F               	movwf	drawCircle@y0+1,c
 10441  000752  0E17               	movlw	23
 10442  000754  6E1E               	movwf	drawCircle@y0,c
 10443  000756  0E00               	movlw	0
 10444  000758  6E21               	movwf	drawCircle@r+1,c
 10445  00075A  0E02               	movlw	2
 10446  00075C  6E20               	movwf	drawCircle@r,c
 10447  00075E  0EFF               	movlw	255
 10448  000760  6E23               	movwf	drawCircle@color+1,c
 10449  000762  0EE0               	movlw	224
 10450  000764  6E22               	movwf	drawCircle@color,c
 10451  000766  EC3E  F009         	call	_drawCircle	;wreg free
 10452                           
 10453                           ;Main_Screen.c: 52: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
 10454  00076A  0E17               	movlw	23
 10455  00076C  6E39               	movwf	drawtext@y,c
 10456  00076E  C052  F03A         	movff	_txt,drawtext@_text
 10457  000772  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10458  000776  0EFF               	movlw	255
 10459  000778  6E3D               	movwf	drawtext@color+1,c
 10460  00077A  0EE0               	movlw	224
 10461  00077C  6E3C               	movwf	drawtext@color,c
 10462  00077E  0E00               	movlw	0
 10463  000780  6E3F               	movwf	drawtext@bg+1,c
 10464  000782  0E00               	movlw	0
 10465  000784  6E3E               	movwf	drawtext@bg,c
 10466  000786  0E02               	movlw	2
 10467  000788  6E40               	movwf	drawtext@size,c
 10468  00078A  0E73               	movlw	115
 10469  00078C  EC64  F011         	call	_drawtext
 10470                           
 10471                           ;Main_Screen.c: 53: strcpy(txt, "Time");
 10472  000790  C052  F011         	movff	_txt,strcpy@to
 10473  000794  C053  F012         	movff	_txt+1,strcpy@to+1
 10474  000798  0EB1               	movlw	low (STR_14+6)
 10475  00079A  6E13               	movwf	strcpy@from,c
 10476  00079C  0EFF               	movlw	high (STR_14+6)
 10477  00079E  6E14               	movwf	strcpy@from+1,c
 10478  0007A0  ECA1  F01B         	call	_strcpy	;wreg free
 10479                           
 10480                           ;Main_Screen.c: 54: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
 10481  0007A4  0E28               	movlw	40
 10482  0007A6  6E39               	movwf	drawtext@y,c
 10483  0007A8  C052  F03A         	movff	_txt,drawtext@_text
 10484  0007AC  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10485  0007B0  0E00               	movlw	0
 10486  0007B2  6E3D               	movwf	drawtext@color+1,c
 10487  0007B4  0E1F               	movlw	31
 10488  0007B6  6E3C               	movwf	drawtext@color,c
 10489  0007B8  0E00               	movlw	0
 10490  0007BA  6E3F               	movwf	drawtext@bg+1,c
 10491  0007BC  0E00               	movlw	0
 10492  0007BE  6E3E               	movwf	drawtext@bg,c
 10493  0007C0  0E01               	movlw	1
 10494  0007C2  6E40               	movwf	drawtext@size,c
 10495  0007C4  0E32               	movlw	50
 10496  0007C6  EC64  F011         	call	_drawtext
 10497                           
 10498                           ;Main_Screen.c: 55: strcpy(txt, "Date");
 10499  0007CA  C052  F011         	movff	_txt,strcpy@to
 10500  0007CE  C053  F012         	movff	_txt+1,strcpy@to+1
 10501  0007D2  0EE0               	movlw	low STR_13
 10502  0007D4  6E13               	movwf	strcpy@from,c
 10503  0007D6  0EFF               	movlw	high STR_13
 10504  0007D8  6E14               	movwf	strcpy@from+1,c
 10505  0007DA  ECA1  F01B         	call	_strcpy	;wreg free
 10506                           
 10507                           ;Main_Screen.c: 56: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
 10508  0007DE  0E47               	movlw	71
 10509  0007E0  6E39               	movwf	drawtext@y,c
 10510  0007E2  C052  F03A         	movff	_txt,drawtext@_text
 10511  0007E6  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10512  0007EA  0EF8               	movlw	248
 10513  0007EC  6E3D               	movwf	drawtext@color+1,c
 10514  0007EE  0E00               	movlw	0
 10515  0007F0  6E3C               	movwf	drawtext@color,c
 10516  0007F2  0E00               	movlw	0
 10517  0007F4  6E3F               	movwf	drawtext@bg+1,c
 10518  0007F6  0E00               	movlw	0
 10519  0007F8  6E3E               	movwf	drawtext@bg,c
 10520  0007FA  0E01               	movlw	1
 10521  0007FC  6E40               	movwf	drawtext@size,c
 10522  0007FE  0E32               	movlw	50
 10523  000800  EC64  F011         	call	_drawtext
 10524                           
 10525                           ;Main_Screen.c: 57: strcpy(txt, "Alarm Time");
 10526  000804  C052  F011         	movff	_txt,strcpy@to
 10527  000808  C053  F012         	movff	_txt+1,strcpy@to+1
 10528  00080C  0EAB               	movlw	low STR_14
 10529  00080E  6E13               	movwf	strcpy@from,c
 10530  000810  0EFF               	movlw	high STR_14
 10531  000812  6E14               	movwf	strcpy@from+1,c
 10532  000814  ECA1  F01B         	call	_strcpy	;wreg free
 10533                           
 10534                           ;Main_Screen.c: 58: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
 10535  000818  0E64               	movlw	100
 10536  00081A  6E39               	movwf	drawtext@y,c
 10537  00081C  C052  F03A         	movff	_txt,drawtext@_text
 10538  000820  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10539  000824  0EFF               	movlw	255
 10540  000826  6E3D               	movwf	drawtext@color+1,c
 10541  000828  0EE0               	movlw	224
 10542  00082A  6E3C               	movwf	drawtext@color,c
 10543  00082C  0E00               	movlw	0
 10544  00082E  6E3F               	movwf	drawtext@bg+1,c
 10545  000830  0E00               	movlw	0
 10546  000832  6E3E               	movwf	drawtext@bg,c
 10547  000834  0E01               	movlw	1
 10548  000836  6E40               	movwf	drawtext@size,c
 10549  000838  0E04               	movlw	4
 10550  00083A  EC64  F011         	call	_drawtext
 10551                           
 10552                           ;Main_Screen.c: 59: strcpy(txt, "Alarm SW");
 10553  00083E  C052  F011         	movff	_txt,strcpy@to
 10554  000842  C053  F012         	movff	_txt+1,strcpy@to+1
 10555  000846  0EC0               	movlw	low STR_15
 10556  000848  6E13               	movwf	strcpy@from,c
 10557  00084A  0EFF               	movlw	high STR_15
 10558  00084C  6E14               	movwf	strcpy@from+1,c
 10559  00084E  ECA1  F01B         	call	_strcpy	;wreg free
 10560                           
 10561                           ;Main_Screen.c: 60: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
 10562  000852  0E64               	movlw	100
 10563  000854  6E39               	movwf	drawtext@y,c
 10564  000856  C052  F03A         	movff	_txt,drawtext@_text
 10565  00085A  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10566  00085E  0EFF               	movlw	255
 10567  000860  6E3D               	movwf	drawtext@color+1,c
 10568  000862  0EE0               	movlw	224
 10569  000864  6E3C               	movwf	drawtext@color,c
 10570  000866  0E00               	movlw	0
 10571  000868  6E3F               	movwf	drawtext@bg+1,c
 10572  00086A  0E00               	movlw	0
 10573  00086C  6E3E               	movwf	drawtext@bg,c
 10574  00086E  0E01               	movlw	1
 10575  000870  6E40               	movwf	drawtext@size,c
 10576  000872  0E4D               	movlw	77
 10577  000874  EC64  F011         	call	_drawtext
 10578                           
 10579                           ;Main_Screen.c: 61: strcpy(txt, "HTR Set Temp");
 10580  000878  C052  F011         	movff	_txt,strcpy@to
 10581  00087C  C053  F012         	movff	_txt+1,strcpy@to+1
 10582  000880  0E7C               	movlw	low STR_16
 10583  000882  6E13               	movwf	strcpy@from,c
 10584  000884  0EFF               	movlw	high STR_16
 10585  000886  6E14               	movwf	strcpy@from+1,c
 10586  000888  ECA1  F01B         	call	_strcpy	;wreg free
 10587                           
 10588                           ;Main_Screen.c: 62: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
 10589  00088C  0E78               	movlw	120
 10590  00088E  6E39               	movwf	drawtext@y,c
 10591  000890  C052  F03A         	movff	_txt,drawtext@_text
 10592  000894  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10593  000898  0E00               	movlw	0
 10594  00089A  6E3D               	movwf	drawtext@color+1,c
 10595  00089C  0E1F               	movlw	31
 10596  00089E  6E3C               	movwf	drawtext@color,c
 10597  0008A0  0E00               	movlw	0
 10598  0008A2  6E3F               	movwf	drawtext@bg+1,c
 10599  0008A4  0E00               	movlw	0
 10600  0008A6  6E3E               	movwf	drawtext@bg,c
 10601  0008A8  0E01               	movlw	1
 10602  0008AA  6E40               	movwf	drawtext@size,c
 10603  0008AC  0E06               	movlw	6
 10604  0008AE  EC64  F011         	call	_drawtext
 10605                           
 10606                           ;Main_Screen.c: 63: strcpy(txt, "HTR SW");
 10607  0008B2  C052  F011         	movff	_txt,strcpy@to
 10608  0008B6  C053  F012         	movff	_txt+1,strcpy@to+1
 10609  0008BA  0ED9               	movlw	low STR_17
 10610  0008BC  6E13               	movwf	strcpy@from,c
 10611  0008BE  0EFF               	movlw	high STR_17
 10612  0008C0  6E14               	movwf	strcpy@from+1,c
 10613  0008C2  ECA1  F01B         	call	_strcpy	;wreg free
 10614                           
 10615                           ;Main_Screen.c: 64: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
 10616  0008C6  0E78               	movlw	120
 10617  0008C8  6E39               	movwf	drawtext@y,c
 10618  0008CA  C052  F03A         	movff	_txt,drawtext@_text
 10619  0008CE  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10620  0008D2  0E00               	movlw	0
 10621  0008D4  6E3D               	movwf	drawtext@color+1,c
 10622  0008D6  0E1F               	movlw	31
 10623  0008D8  6E3C               	movwf	drawtext@color,c
 10624  0008DA  0E00               	movlw	0
 10625  0008DC  6E3F               	movwf	drawtext@bg+1,c
 10626  0008DE  0E00               	movlw	0
 10627  0008E0  6E3E               	movwf	drawtext@bg,c
 10628  0008E2  0E01               	movlw	1
 10629  0008E4  6E40               	movwf	drawtext@size,c
 10630  0008E6  0E55               	movlw	85
 10631  0008E8  EC64  F011         	call	_drawtext
 10632                           
 10633                           ;Main_Screen.c: 65: strcpy(txt, "DC");
 10634  0008EC  C052  F011         	movff	_txt,strcpy@to
 10635  0008F0  C053  F012         	movff	_txt+1,strcpy@to+1
 10636  0008F4  0EF9               	movlw	low STR_18
 10637  0008F6  6E13               	movwf	strcpy@from,c
 10638  0008F8  0EFF               	movlw	high STR_18
 10639  0008FA  6E14               	movwf	strcpy@from+1,c
 10640  0008FC  ECA1  F01B         	call	_strcpy	;wreg free
 10641                           
 10642                           ;Main_Screen.c: 66: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
 10643  000900  0E8C               	movlw	140
 10644  000902  6E39               	movwf	drawtext@y,c
 10645  000904  C052  F03A         	movff	_txt,drawtext@_text
 10646  000908  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10647  00090C  0EFF               	movlw	255
 10648  00090E  6E3D               	movwf	drawtext@color+1,c
 10649  000910  683C               	setf	drawtext@color,c
 10650  000912  0E00               	movlw	0
 10651  000914  6E3F               	movwf	drawtext@bg+1,c
 10652  000916  0E00               	movlw	0
 10653  000918  6E3E               	movwf	drawtext@bg,c
 10654  00091A  0E01               	movlw	1
 10655  00091C  6E40               	movwf	drawtext@size,c
 10656  00091E  0E0C               	movlw	12
 10657  000920  EC64  F011         	call	_drawtext
 10658                           
 10659                           ;Main_Screen.c: 67: strcpy(txt, "RM");
 10660  000924  C052  F011         	movff	_txt,strcpy@to
 10661  000928  C053  F012         	movff	_txt+1,strcpy@to+1
 10662  00092C  0EFC               	movlw	low STR_19
 10663  00092E  6E13               	movwf	strcpy@from,c
 10664  000930  0EFF               	movlw	high STR_19
 10665  000932  6E14               	movwf	strcpy@from+1,c
 10666  000934  ECA1  F01B         	call	_strcpy	;wreg free
 10667                           
 10668                           ;Main_Screen.c: 68: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
 10669  000938  0E8C               	movlw	140
 10670  00093A  6E39               	movwf	drawtext@y,c
 10671  00093C  C052  F03A         	movff	_txt,drawtext@_text
 10672  000940  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10673  000944  0EFF               	movlw	255
 10674  000946  6E3D               	movwf	drawtext@color+1,c
 10675  000948  683C               	setf	drawtext@color,c
 10676  00094A  0E00               	movlw	0
 10677  00094C  6E3F               	movwf	drawtext@bg+1,c
 10678  00094E  0E00               	movlw	0
 10679  000950  6E3E               	movwf	drawtext@bg,c
 10680  000952  0E01               	movlw	1
 10681  000954  6E40               	movwf	drawtext@size,c
 10682  000956  0E21               	movlw	33
 10683  000958  EC64  F011         	call	_drawtext
 10684                           
 10685                           ;Main_Screen.c: 69: strcpy(txt, "Volt");
 10686  00095C  C052  F011         	movff	_txt,strcpy@to
 10687  000960  C053  F012         	movff	_txt+1,strcpy@to+1
 10688  000964  0EE5               	movlw	low STR_20
 10689  000966  6E13               	movwf	strcpy@from,c
 10690  000968  0EFF               	movlw	high STR_20
 10691  00096A  6E14               	movwf	strcpy@from+1,c
 10692  00096C  ECA1  F01B         	call	_strcpy	;wreg free
 10693                           
 10694                           ;Main_Screen.c: 70: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
 10695  000970  0E8C               	movlw	140
 10696  000972  6E39               	movwf	drawtext@y,c
 10697  000974  C052  F03A         	movff	_txt,drawtext@_text
 10698  000978  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10699  00097C  0EFF               	movlw	255
 10700  00097E  6E3D               	movwf	drawtext@color+1,c
 10701  000980  683C               	setf	drawtext@color,c
 10702  000982  0E00               	movlw	0
 10703  000984  6E3F               	movwf	drawtext@bg+1,c
 10704  000986  0E00               	movlw	0
 10705  000988  6E3E               	movwf	drawtext@bg,c
 10706  00098A  0E01               	movlw	1
 10707  00098C  6E40               	movwf	drawtext@size,c
 10708  00098E  0E32               	movlw	50
 10709  000990  EC64  F011         	call	_drawtext
 10710                           
 10711                           ;Main_Screen.c: 71: strcpy(txt, "RPM");
 10712  000994  C052  F011         	movff	_txt,strcpy@to
 10713  000998  C053  F012         	movff	_txt+1,strcpy@to+1
 10714  00099C  0EF2               	movlw	low STR_21
 10715  00099E  6E13               	movwf	strcpy@from,c
 10716  0009A0  0EFF               	movlw	high STR_21
 10717  0009A2  6E14               	movwf	strcpy@from+1,c
 10718  0009A4  ECA1  F01B         	call	_strcpy	;wreg free
 10719                           
 10720                           ;Main_Screen.c: 72: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
 10721  0009A8  0E8C               	movlw	140
 10722  0009AA  6E39               	movwf	drawtext@y,c
 10723  0009AC  C052  F03A         	movff	_txt,drawtext@_text
 10724  0009B0  C053  F03B         	movff	_txt+1,drawtext@_text+1
 10725  0009B4  0EFF               	movlw	255
 10726  0009B6  6E3D               	movwf	drawtext@color+1,c
 10727  0009B8  683C               	setf	drawtext@color,c
 10728  0009BA  0E00               	movlw	0
 10729  0009BC  6E3F               	movwf	drawtext@bg+1,c
 10730  0009BE  0E00               	movlw	0
 10731  0009C0  6E3E               	movwf	drawtext@bg,c
 10732  0009C2  0E01               	movlw	1
 10733  0009C4  6E40               	movwf	drawtext@size,c
 10734  0009C6  0E5F               	movlw	95
 10735  0009C8  EC64  F011         	call	_drawtext
 10736  0009CC  0012               	return		;funcret
 10737  0009CE                     __end_of_Initialize_Screen:
 10738                           	opt stack 0
 10739                           tblptru	equ	0xFF8
 10740                           tblptrh	equ	0xFF7
 10741                           tblptrl	equ	0xFF6
 10742                           tablat	equ	0xFF5
 10743                           prodh	equ	0xFF4
 10744                           prodl	equ	0xFF3
 10745                           intcon	equ	0xFF2
 10746                           intcon2	equ	0xFF1
 10747                           postinc0	equ	0xFEE
 10748                           wreg	equ	0xFE8
 10749                           postdec1	equ	0xFE5
 10750                           fsr1l	equ	0xFE1
 10751                           postinc2	equ	0xFDE
 10752                           fsr2h	equ	0xFDA
 10753                           fsr2l	equ	0xFD9
 10754                           status	equ	0xFD8
 10755                           
 10756 ;; *************** function _strcpy *****************
 10757 ;; Defined at:
 10758 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;  to              2   16[COMRAM] PTR unsigned char 
 10761 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10762 ;;  from            2   18[COMRAM] PTR const unsigned char 
 10763 ;;		 -> STR_38(5), STR_37(5), STR_36(12), STR_35(19), 
 10764 ;;		 -> STR_34(16), STR_33(10), STR_32(11), STR_31(19), 
 10765 ;;		 -> STR_29(5), STR_28(8), STR_27(8), STR_26(18), 
 10766 ;;		 -> STR_25(4), STR_24(4), STR_23(4), STR_22(4), 
 10767 ;;		 -> STR_21(4), STR_20(5), STR_19(3), STR_18(3), 
 10768 ;;		 -> STR_17(7), STR_16(13), STR_15(9), STR_14(11), 
 10769 ;;		 -> STR_13(5), STR_12(5), STR_11(2), STR_10(3), 
 10770 ;;		 -> STR_9(13), STR_8(20), 
 10771 ;; Auto vars:     Size  Location     Type
 10772 ;;  cp              2   20[COMRAM] PTR unsigned char 
 10773 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10774 ;; Return value:  Size  Location     Type
 10775 ;;                  2   16[COMRAM] PTR unsigned char 
 10776 ;; Registers used:
 10777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10778 ;; Tracked objects:
 10779 ;;		On entry : 0/0
 10780 ;;		On exit  : 0/0
 10781 ;;		Unchanged: 0/0
 10782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10783 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10784 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10786 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10787 ;;Total ram usage:        6 bytes
 10788 ;; Hardware stack levels used:    1
 10789 ;; Hardware stack levels required when called:    3
 10790 ;; This function calls:
 10791 ;;		Nothing
 10792 ;; This function is called by:
 10793 ;;		_Initialize_Screen
 10794 ;;		_Update_Screen
 10795 ;;		_Initialize_Setup_Alarm_Time_Screen
 10796 ;;		_Initialize_Setup_Heater_Screen
 10797 ;;		_Initialize_Setup_Time_Screen
 10798 ;; This function uses a non-reentrant model
 10799 ;;
 10800                           
 10801                           	psect	text51
 10802  003742                     __ptext51:
 10803                           	opt stack 0
 10804  003742                     _strcpy:
 10805                           	opt stack 26
 10806                           
 10807                           ;incstack = 0
 10808  003742  C011  F015         	movff	strcpy@to,strcpy@cp
 10809  003746  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
 10810  00374A  D005               	goto	l8446
 10811  00374C                     l8444:
 10812  00374C  4A15               	infsnz	strcpy@cp,f,c
 10813  00374E  2A16               	incf	strcpy@cp+1,f,c
 10814  003750  4A13               	infsnz	strcpy@from,f,c
 10815  003752  2A14               	incf	strcpy@from+1,f,c
 10816  003754  D000               	goto	l8446
 10817  003756                     l8446:
 10818  003756  C013  FFF6         	movff	strcpy@from,tblptrl
 10819  00375A  C014  FFF7         	movff	strcpy@from+1,tblptrh
 10820  00375E                     	if	0	;tblptru may be non-zero
 10821  00375E                     	endif
 10822  00375E                     	if	0	;tblptru may be non-zero
 10823  00375E                     	endif
 10824  00375E  C015  FFD9         	movff	strcpy@cp,fsr2l
 10825  003762  C016  FFDA         	movff	strcpy@cp+1,fsr2h
 10826  003766  0008               	tblrd		*
 10827  003768  CFF5 FFDF          	movff	tablat,indf2
 10828  00376C  50DF               	movf	indf2,w,c
 10829  00376E  A4D8               	btfss	status,2,c
 10830  003770  D7ED               	goto	l8444
 10831                           
 10832                           ;	Return value of _strcpy is never used
 10833  003772  0012               	return		;funcret
 10834  003774                     __end_of_strcpy:
 10835                           	opt stack 0
 10836                           tblptru	equ	0xFF8
 10837                           tblptrh	equ	0xFF7
 10838                           tblptrl	equ	0xFF6
 10839                           tablat	equ	0xFF5
 10840                           prodh	equ	0xFF4
 10841                           prodl	equ	0xFF3
 10842                           intcon	equ	0xFF2
 10843                           intcon2	equ	0xFF1
 10844                           postinc0	equ	0xFEE
 10845                           wreg	equ	0xFE8
 10846                           postdec1	equ	0xFE5
 10847                           fsr1l	equ	0xFE1
 10848                           indf2	equ	0xFDF
 10849                           postinc2	equ	0xFDE
 10850                           fsr2h	equ	0xFDA
 10851                           fsr2l	equ	0xFD9
 10852                           status	equ	0xFD8
 10853                           
 10854 ;; *************** function _fillScreen *****************
 10855 ;; Defined at:
 10856 ;;		line 619 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 10857 ;; Parameters:    Size  Location     Type
 10858 ;;  color           2   35[COMRAM] unsigned int 
 10859 ;; Auto vars:     Size  Location     Type
 10860 ;;		None
 10861 ;; Return value:  Size  Location     Type
 10862 ;;		None               void
 10863 ;; Registers used:
 10864 ;;		wreg, status,2, status,0, cstack
 10865 ;; Tracked objects:
 10866 ;;		On entry : 0/0
 10867 ;;		On exit  : 0/0
 10868 ;;		Unchanged: 0/0
 10869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10870 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10873 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10874 ;;Total ram usage:        2 bytes
 10875 ;; Hardware stack levels used:    1
 10876 ;; Hardware stack levels required when called:    7
 10877 ;; This function calls:
 10878 ;;		_fillRectangle
 10879 ;; This function is called by:
 10880 ;;		_Initialize_Screen
 10881 ;;		_Initialize_Setup_Alarm_Time_Screen
 10882 ;;		_Initialize_Setup_Heater_Screen
 10883 ;;		_Initialize_Setup_Time_Screen
 10884 ;; This function uses a non-reentrant model
 10885 ;;
 10886                           
 10887                           	psect	text52
 10888  0039C4                     __ptext52:
 10889                           	opt stack 0
 10890  0039C4                     _fillScreen:
 10891                           	opt stack 22
 10892                           
 10893                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
 10894                           
 10895                           ;incstack = 0
 10896  0039C4  0E00               	movlw	0
 10897  0039C6  6E18               	movwf	fillRectangle@y,c
 10898  0039C8  0E80               	movlw	128
 10899  0039CA  6E19               	movwf	fillRectangle@w,c
 10900  0039CC  0EA0               	movlw	160
 10901  0039CE  6E1A               	movwf	fillRectangle@h,c
 10902  0039D0  C024  F01B         	movff	fillScreen@color,fillRectangle@color
 10903  0039D4  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
 10904  0039D8  0E00               	movlw	0
 10905  0039DA  ECD5  F011         	call	_fillRectangle
 10906  0039DE  0012               	return		;funcret
 10907  0039E0                     __end_of_fillScreen:
 10908                           	opt stack 0
 10909                           tblptru	equ	0xFF8
 10910                           tblptrh	equ	0xFF7
 10911                           tblptrl	equ	0xFF6
 10912                           tablat	equ	0xFF5
 10913                           prodh	equ	0xFF4
 10914                           prodl	equ	0xFF3
 10915                           intcon	equ	0xFF2
 10916                           intcon2	equ	0xFF1
 10917                           postinc0	equ	0xFEE
 10918                           wreg	equ	0xFE8
 10919                           postdec1	equ	0xFE5
 10920                           fsr1l	equ	0xFE1
 10921                           indf2	equ	0xFDF
 10922                           postinc2	equ	0xFDE
 10923                           fsr2h	equ	0xFDA
 10924                           fsr2l	equ	0xFD9
 10925                           status	equ	0xFD8
 10926                           
 10927 ;; *************** function _fillRectangle *****************
 10928 ;; Defined at:
 10929 ;;		line 503 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 10930 ;; Parameters:    Size  Location     Type
 10931 ;;  x               1    wreg     unsigned char 
 10932 ;;  y               1   23[COMRAM] unsigned char 
 10933 ;;  w               1   24[COMRAM] unsigned char 
 10934 ;;  h               1   25[COMRAM] unsigned char 
 10935 ;;  color           2   26[COMRAM] unsigned int 
 10936 ;; Auto vars:     Size  Location     Type
 10937 ;;  x               1   34[COMRAM] unsigned char 
 10938 ;;  lo              1   33[COMRAM] unsigned char 
 10939 ;;  hi              1   32[COMRAM] unsigned char 
 10940 ;; Return value:  Size  Location     Type
 10941 ;;		None               void
 10942 ;; Registers used:
 10943 ;;		wreg, status,2, status,0, cstack
 10944 ;; Tracked objects:
 10945 ;;		On entry : 0/0
 10946 ;;		On exit  : 0/0
 10947 ;;		Unchanged: 0/0
 10948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10949 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10950 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10951 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10952 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10953 ;;Total ram usage:       12 bytes
 10954 ;; Hardware stack levels used:    1
 10955 ;; Hardware stack levels required when called:    6
 10956 ;; This function calls:
 10957 ;;		_setAddrWindow
 10958 ;;		_spiwrite
 10959 ;; This function is called by:
 10960 ;;		_fillScreen
 10961 ;; This function uses a non-reentrant model
 10962 ;;
 10963                           
 10964                           	psect	text53
 10965  0023AA                     __ptext53:
 10966                           	opt stack 0
 10967  0023AA                     _fillRectangle:
 10968                           	opt stack 22
 10969                           
 10970                           ;incstack = 0
 10971                           ;fillRectangle@x stored from wreg
 10972  0023AA  6E23               	movwf	fillRectangle@x,c
 10973                           
 10974                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
 10975                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
 10976  0023AC  0E80               	movlw	128
 10977  0023AE  6023               	cpfslt	fillRectangle@x,c
 10978  0023B0  D069               	goto	l1304
 10979  0023B2  0E9F               	movlw	159
 10980  0023B4  6418               	cpfsgt	fillRectangle@y,c
 10981  0023B6  D001               	goto	l8108
 10982                           
 10983                           ;ST7735_TFT.c: 507: return;
 10984  0023B8  D065               	goto	l1304
 10985  0023BA                     l8108:
 10986                           
 10987                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
 10988  0023BA  0EFF               	movlw	255
 10989  0023BC  6E1D               	movwf	??_fillRectangle& (0+255),c
 10990  0023BE  0EFF               	movlw	255
 10991  0023C0  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10992  0023C2  5019               	movf	fillRectangle@w,w,c
 10993  0023C4  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
 10994  0023C8  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10995  0023CA  261F               	addwf	??_fillRectangle+2,f,c
 10996  0023CC  0E00               	movlw	0
 10997  0023CE  2220               	addwfc	??_fillRectangle+3,f,c
 10998  0023D0  501D               	movf	??_fillRectangle,w,c
 10999  0023D2  261F               	addwf	??_fillRectangle+2,f,c
 11000  0023D4  501E               	movf	??_fillRectangle+1,w,c
 11001  0023D6  2220               	addwfc	??_fillRectangle+3,f,c
 11002  0023D8  BE20               	btfsc	??_fillRectangle+3,7,c
 11003  0023DA  D00A               	goto	l1305
 11004  0023DC  5020               	movf	??_fillRectangle+3,w,c
 11005  0023DE  E104               	bnz	u5480
 11006  0023E0  0E80               	movlw	128
 11007  0023E2  5C1F               	subwf	??_fillRectangle+2,w,c
 11008  0023E4  A0D8               	btfss	status,0,c
 11009  0023E6  D004               	goto	l1305
 11010  0023E8                     u5480:
 11011                           
 11012                           ;ST7735_TFT.c: 509: w = 128 - x;
 11013  0023E8  5023               	movf	fillRectangle@x,w,c
 11014  0023EA  0800               	sublw	0
 11015  0023EC  0F80               	addlw	128
 11016  0023EE  6E19               	movwf	fillRectangle@w,c
 11017  0023F0                     l1305:
 11018                           
 11019                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
 11020  0023F0  0EFF               	movlw	255
 11021  0023F2  6E1D               	movwf	??_fillRectangle& (0+255),c
 11022  0023F4  0EFF               	movlw	255
 11023  0023F6  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 11024  0023F8  501A               	movf	fillRectangle@h,w,c
 11025  0023FA  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
 11026  0023FE  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 11027  002400  261F               	addwf	??_fillRectangle+2,f,c
 11028  002402  0E00               	movlw	0
 11029  002404  2220               	addwfc	??_fillRectangle+3,f,c
 11030  002406  501D               	movf	??_fillRectangle,w,c
 11031  002408  261F               	addwf	??_fillRectangle+2,f,c
 11032  00240A  501E               	movf	??_fillRectangle+1,w,c
 11033  00240C  2220               	addwfc	??_fillRectangle+3,f,c
 11034  00240E  BE20               	btfsc	??_fillRectangle+3,7,c
 11035  002410  D00B               	goto	l8114
 11036  002412  5020               	movf	??_fillRectangle+3,w,c
 11037  002414  E104               	bnz	u5490
 11038  002416  0EA0               	movlw	160
 11039  002418  5C1F               	subwf	??_fillRectangle+2,w,c
 11040  00241A  A0D8               	btfss	status,0,c
 11041  00241C  D005               	goto	l8114
 11042  00241E                     u5490:
 11043                           
 11044                           ;ST7735_TFT.c: 511: h = 160 - y;
 11045  00241E  5018               	movf	fillRectangle@y,w,c
 11046  002420  0800               	sublw	0
 11047  002422  0FA0               	addlw	160
 11048  002424  6E1A               	movwf	fillRectangle@h,c
 11049  002426  D000               	goto	l8114
 11050  002428                     l8114:
 11051                           
 11052                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
 11053  002428  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
 11054  00242C  5023               	movf	fillRectangle@x,w,c
 11055  00242E  2419               	addwf	fillRectangle@w,w,c
 11056  002430  6E1D               	movwf	??_fillRectangle& (0+255),c
 11057  002432  041D               	decf	??_fillRectangle,w,c
 11058  002434  6E15               	movwf	setAddrWindow@x1,c
 11059  002436  5018               	movf	fillRectangle@y,w,c
 11060  002438  241A               	addwf	fillRectangle@h,w,c
 11061  00243A  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 11062  00243C  041E               	decf	??_fillRectangle+1,w,c
 11063  00243E  6E16               	movwf	setAddrWindow@y1,c
 11064  002440  5023               	movf	fillRectangle@x,w,c
 11065  002442  EC23  F019         	call	_setAddrWindow
 11066                           
 11067                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
 11068  002446  501C               	movf	fillRectangle@color+1,w,c
 11069  002448  6E21               	movwf	fillRectangle@hi,c
 11070  00244A  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
 11071                           
 11072                           ;ST7735_TFT.c: 514: PORTBbits.RB6 = 1;
 11073  00244E  8C81               	bsf	3969,6,c	;volatile
 11074                           
 11075                           ;ST7735_TFT.c: 515: PORTBbits.RB5 = 0;
 11076  002450  9A81               	bcf	3969,5,c	;volatile
 11077                           
 11078                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
 11079  002452  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
 11080  002456                     l8126:
 11081  002456  5018               	movf	fillRectangle@y,w,c
 11082  002458  B4D8               	btfsc	status,2,c
 11083  00245A  D013               	goto	l1308
 11084  00245C  D001               	goto	l1307
 11085  00245E  D011               	goto	l1308
 11086  002460                     l1307:
 11087                           
 11088                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
 11089  002460  C019  F023         	movff	fillRectangle@w,fillRectangle@x
 11090  002464                     l8130:
 11091  002464  5023               	movf	fillRectangle@x,w,c
 11092  002466  B4D8               	btfsc	status,2,c
 11093  002468  D00A               	goto	l8140
 11094  00246A  D001               	goto	l8134
 11095  00246C  D008               	goto	l8140
 11096  00246E                     l8134:
 11097                           
 11098                           ;ST7735_TFT.c: 519: spiwrite(hi);
 11099  00246E  5021               	movf	fillRectangle@hi,w,c
 11100  002470  EC59  F01D         	call	_spiwrite
 11101                           
 11102                           ;ST7735_TFT.c: 520: spiwrite(lo);
 11103  002474  5022               	movf	fillRectangle@lo,w,c
 11104  002476  EC59  F01D         	call	_spiwrite
 11105  00247A  0623               	decf	fillRectangle@x,f,c
 11106  00247C  D7F3               	goto	l8130
 11107  00247E                     l8140:
 11108  00247E  0618               	decf	fillRectangle@y,f,c
 11109  002480  D7EA               	goto	l8126
 11110  002482                     l1308:
 11111                           
 11112                           ;ST7735_TFT.c: 521: }
 11113                           ;ST7735_TFT.c: 522: }
 11114                           ;ST7735_TFT.c: 523: PORTBbits.RB5 = 1;
 11115  002482  8A81               	bsf	3969,5,c	;volatile
 11116  002484                     l1304:
 11117  002484  0012               	return		;funcret
 11118  002486                     __end_of_fillRectangle:
 11119                           	opt stack 0
 11120                           tblptru	equ	0xFF8
 11121                           tblptrh	equ	0xFF7
 11122                           tblptrl	equ	0xFF6
 11123                           tablat	equ	0xFF5
 11124                           prodh	equ	0xFF4
 11125                           prodl	equ	0xFF3
 11126                           intcon	equ	0xFF2
 11127                           intcon2	equ	0xFF1
 11128                           postinc0	equ	0xFEE
 11129                           wreg	equ	0xFE8
 11130                           postdec1	equ	0xFE5
 11131                           fsr1l	equ	0xFE1
 11132                           indf2	equ	0xFDF
 11133                           postinc2	equ	0xFDE
 11134                           fsr2h	equ	0xFDA
 11135                           fsr2l	equ	0xFD9
 11136                           status	equ	0xFD8
 11137                           
 11138 ;; *************** function _drawCircle *****************
 11139 ;; Defined at:
 11140 ;;		line 528 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 11141 ;; Parameters:    Size  Location     Type
 11142 ;;  x0              2   27[COMRAM] int 
 11143 ;;  y0              2   29[COMRAM] int 
 11144 ;;  r               2   31[COMRAM] int 
 11145 ;;  color           2   33[COMRAM] unsigned int 
 11146 ;; Auto vars:     Size  Location     Type
 11147 ;;  y               2   45[COMRAM] int 
 11148 ;;  x               2   43[COMRAM] int 
 11149 ;;  f               2   41[COMRAM] int 
 11150 ;;  ddF_y           2   39[COMRAM] int 
 11151 ;;  ddF_x           2   37[COMRAM] int 
 11152 ;; Return value:  Size  Location     Type
 11153 ;;		None               void
 11154 ;; Registers used:
 11155 ;;		wreg, status,2, status,0, cstack
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11161 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11162 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11163 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11164 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11165 ;;Total ram usage:       20 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    7
 11168 ;; This function calls:
 11169 ;;		_drawPixel
 11170 ;; This function is called by:
 11171 ;;		_Initialize_Screen
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           	psect	text54
 11176  00127C                     __ptext54:
 11177                           	opt stack 0
 11178  00127C                     _drawCircle:
 11179                           	opt stack 22
 11180                           
 11181                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
 11182                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 11183                           
 11184                           ;incstack = 0
 11185  00127C  C020  F024         	movff	drawCircle@r,??_drawCircle
 11186  001280  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 11187  001284  1E24               	comf	??_drawCircle,f,c
 11188  001286  1E25               	comf	??_drawCircle+1,f,c
 11189  001288  4A24               	infsnz	??_drawCircle,f,c
 11190  00128A  2A25               	incf	??_drawCircle+1,f,c
 11191  00128C  0E01               	movlw	1
 11192  00128E  2424               	addwf	??_drawCircle,w,c
 11193  001290  6E2A               	movwf	drawCircle@f,c
 11194  001292  0E00               	movlw	0
 11195  001294  2025               	addwfc	??_drawCircle+1,w,c
 11196  001296  6E2B               	movwf	drawCircle@f+1,c
 11197  001298  0E00               	movlw	0
 11198  00129A  6E27               	movwf	drawCircle@ddF_x+1,c
 11199  00129C  0E01               	movlw	1
 11200  00129E  6E26               	movwf	drawCircle@ddF_x,c
 11201  0012A0  C020  F024         	movff	drawCircle@r,??_drawCircle
 11202  0012A4  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 11203  0012A8  90D8               	bcf	status,0,c
 11204  0012AA  3624               	rlcf	??_drawCircle,f,c
 11205  0012AC  3625               	rlcf	??_drawCircle+1,f,c
 11206  0012AE  1E24               	comf	??_drawCircle,f,c
 11207  0012B0  1E25               	comf	??_drawCircle+1,f,c
 11208  0012B2  4A24               	infsnz	??_drawCircle,f,c
 11209  0012B4  2A25               	incf	??_drawCircle+1,f,c
 11210  0012B6  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
 11211  0012BA  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 11212  0012BE  0E00               	movlw	0
 11213  0012C0  6E2D               	movwf	drawCircle@x+1,c
 11214  0012C2  0E00               	movlw	0
 11215  0012C4  6E2C               	movwf	drawCircle@x,c
 11216  0012C6  C020  F02E         	movff	drawCircle@r,drawCircle@y
 11217  0012CA  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
 11218                           
 11219                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
 11220  0012CE  501E               	movf	drawCircle@y0,w,c
 11221  0012D0  2420               	addwf	drawCircle@r,w,c
 11222  0012D2  6E18               	movwf	drawPixel@y,c
 11223  0012D4  C022  F019         	movff	drawCircle@color,drawPixel@color
 11224  0012D8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11225  0012DC  501C               	movf	drawCircle@x0,w,c
 11226  0012DE  ECBA  F01B         	call	_drawPixel
 11227                           
 11228                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
 11229  0012E2  5020               	movf	drawCircle@r,w,c
 11230  0012E4  0800               	sublw	0
 11231  0012E6  241E               	addwf	drawCircle@y0,w,c
 11232  0012E8  6E18               	movwf	drawPixel@y,c
 11233  0012EA  C022  F019         	movff	drawCircle@color,drawPixel@color
 11234  0012EE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11235  0012F2  501C               	movf	drawCircle@x0,w,c
 11236  0012F4  ECBA  F01B         	call	_drawPixel
 11237                           
 11238                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
 11239  0012F8  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11240  0012FC  C022  F019         	movff	drawCircle@color,drawPixel@color
 11241  001300  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11242  001304  501C               	movf	drawCircle@x0,w,c
 11243  001306  2420               	addwf	drawCircle@r,w,c
 11244  001308  ECBA  F01B         	call	_drawPixel
 11245                           
 11246                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
 11247  00130C  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11248  001310  C022  F019         	movff	drawCircle@color,drawPixel@color
 11249  001314  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11250  001318  5020               	movf	drawCircle@r,w,c
 11251  00131A  0800               	sublw	0
 11252  00131C  241C               	addwf	drawCircle@x0,w,c
 11253  00131E  ECBA  F01B         	call	_drawPixel
 11254                           
 11255                           ;ST7735_TFT.c: 536: while (x < y) {
 11256  001322  D078               	goto	l8530
 11257  001324                     l8502:
 11258                           
 11259                           ;ST7735_TFT.c: 537: if (f >= 0) {
 11260  001324  BE2B               	btfsc	drawCircle@f+1,7,c
 11261  001326  D00B               	goto	l1315
 11262                           
 11263                           ;ST7735_TFT.c: 538: y--;
 11264  001328  062E               	decf	drawCircle@y,f,c
 11265  00132A  A0D8               	btfss	status,0,c
 11266  00132C  062F               	decf	drawCircle@y+1,f,c
 11267                           
 11268                           ;ST7735_TFT.c: 539: ddF_y += 2;
 11269  00132E  0E02               	movlw	2
 11270  001330  2628               	addwf	drawCircle@ddF_y,f,c
 11271  001332  0E00               	movlw	0
 11272  001334  2229               	addwfc	drawCircle@ddF_y+1,f,c
 11273                           
 11274                           ;ST7735_TFT.c: 540: f += ddF_y;
 11275  001336  5028               	movf	drawCircle@ddF_y,w,c
 11276  001338  262A               	addwf	drawCircle@f,f,c
 11277  00133A  5029               	movf	drawCircle@ddF_y+1,w,c
 11278  00133C  222B               	addwfc	drawCircle@f+1,f,c
 11279  00133E                     l1315:
 11280                           
 11281                           ;ST7735_TFT.c: 541: }
 11282                           ;ST7735_TFT.c: 542: x++;
 11283  00133E  4A2C               	infsnz	drawCircle@x,f,c
 11284  001340  2A2D               	incf	drawCircle@x+1,f,c
 11285                           
 11286                           ;ST7735_TFT.c: 543: ddF_x += 2;
 11287  001342  0E02               	movlw	2
 11288  001344  2626               	addwf	drawCircle@ddF_x,f,c
 11289  001346  0E00               	movlw	0
 11290  001348  2227               	addwfc	drawCircle@ddF_x+1,f,c
 11291                           
 11292                           ;ST7735_TFT.c: 544: f += ddF_x;
 11293  00134A  5026               	movf	drawCircle@ddF_x,w,c
 11294  00134C  262A               	addwf	drawCircle@f,f,c
 11295  00134E  5027               	movf	drawCircle@ddF_x+1,w,c
 11296  001350  222B               	addwfc	drawCircle@f+1,f,c
 11297                           
 11298                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
 11299  001352  501E               	movf	drawCircle@y0,w,c
 11300  001354  242E               	addwf	drawCircle@y,w,c
 11301  001356  6E18               	movwf	drawPixel@y,c
 11302  001358  C022  F019         	movff	drawCircle@color,drawPixel@color
 11303  00135C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11304  001360  501C               	movf	drawCircle@x0,w,c
 11305  001362  242C               	addwf	drawCircle@x,w,c
 11306  001364  ECBA  F01B         	call	_drawPixel
 11307                           
 11308                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
 11309  001368  501E               	movf	drawCircle@y0,w,c
 11310  00136A  242E               	addwf	drawCircle@y,w,c
 11311  00136C  6E18               	movwf	drawPixel@y,c
 11312  00136E  C022  F019         	movff	drawCircle@color,drawPixel@color
 11313  001372  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11314  001376  502C               	movf	drawCircle@x,w,c
 11315  001378  0800               	sublw	0
 11316  00137A  241C               	addwf	drawCircle@x0,w,c
 11317  00137C  ECBA  F01B         	call	_drawPixel
 11318                           
 11319                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
 11320  001380  502E               	movf	drawCircle@y,w,c
 11321  001382  0800               	sublw	0
 11322  001384  241E               	addwf	drawCircle@y0,w,c
 11323  001386  6E18               	movwf	drawPixel@y,c
 11324  001388  C022  F019         	movff	drawCircle@color,drawPixel@color
 11325  00138C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11326  001390  501C               	movf	drawCircle@x0,w,c
 11327  001392  242C               	addwf	drawCircle@x,w,c
 11328  001394  ECBA  F01B         	call	_drawPixel
 11329                           
 11330                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
 11331  001398  502E               	movf	drawCircle@y,w,c
 11332  00139A  0800               	sublw	0
 11333  00139C  241E               	addwf	drawCircle@y0,w,c
 11334  00139E  6E18               	movwf	drawPixel@y,c
 11335  0013A0  C022  F019         	movff	drawCircle@color,drawPixel@color
 11336  0013A4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11337  0013A8  502C               	movf	drawCircle@x,w,c
 11338  0013AA  0800               	sublw	0
 11339  0013AC  241C               	addwf	drawCircle@x0,w,c
 11340  0013AE  ECBA  F01B         	call	_drawPixel
 11341                           
 11342                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
 11343  0013B2  501E               	movf	drawCircle@y0,w,c
 11344  0013B4  242C               	addwf	drawCircle@x,w,c
 11345  0013B6  6E18               	movwf	drawPixel@y,c
 11346  0013B8  C022  F019         	movff	drawCircle@color,drawPixel@color
 11347  0013BC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11348  0013C0  501C               	movf	drawCircle@x0,w,c
 11349  0013C2  242E               	addwf	drawCircle@y,w,c
 11350  0013C4  ECBA  F01B         	call	_drawPixel
 11351                           
 11352                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
 11353  0013C8  501E               	movf	drawCircle@y0,w,c
 11354  0013CA  242C               	addwf	drawCircle@x,w,c
 11355  0013CC  6E18               	movwf	drawPixel@y,c
 11356  0013CE  C022  F019         	movff	drawCircle@color,drawPixel@color
 11357  0013D2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11358  0013D6  502E               	movf	drawCircle@y,w,c
 11359  0013D8  0800               	sublw	0
 11360  0013DA  241C               	addwf	drawCircle@x0,w,c
 11361  0013DC  ECBA  F01B         	call	_drawPixel
 11362                           
 11363                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
 11364  0013E0  502C               	movf	drawCircle@x,w,c
 11365  0013E2  0800               	sublw	0
 11366  0013E4  241E               	addwf	drawCircle@y0,w,c
 11367  0013E6  6E18               	movwf	drawPixel@y,c
 11368  0013E8  C022  F019         	movff	drawCircle@color,drawPixel@color
 11369  0013EC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11370  0013F0  501C               	movf	drawCircle@x0,w,c
 11371  0013F2  242E               	addwf	drawCircle@y,w,c
 11372  0013F4  ECBA  F01B         	call	_drawPixel
 11373                           
 11374                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
 11375  0013F8  502C               	movf	drawCircle@x,w,c
 11376  0013FA  0800               	sublw	0
 11377  0013FC  241E               	addwf	drawCircle@y0,w,c
 11378  0013FE  6E18               	movwf	drawPixel@y,c
 11379  001400  C022  F019         	movff	drawCircle@color,drawPixel@color
 11380  001404  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11381  001408  502E               	movf	drawCircle@y,w,c
 11382  00140A  0800               	sublw	0
 11383  00140C  241C               	addwf	drawCircle@x0,w,c
 11384  00140E  ECBA  F01B         	call	_drawPixel
 11385  001412  D000               	goto	l8530
 11386  001414                     l8530:
 11387  001414  502E               	movf	drawCircle@y,w,c
 11388  001416  5C2C               	subwf	drawCircle@x,w,c
 11389  001418  502D               	movf	drawCircle@x+1,w,c
 11390  00141A  0A80               	xorlw	128
 11391  00141C  6E24               	movwf	??_drawCircle& (0+255),c
 11392  00141E  502F               	movf	drawCircle@y+1,w,c
 11393  001420  0A80               	xorlw	128
 11394  001422  5824               	subwfb	??_drawCircle& (0+255),w,c
 11395  001424  A0D8               	btfss	status,0,c
 11396  001426  D77E               	goto	l8502
 11397  001428  0012               	return		;funcret
 11398  00142A                     __end_of_drawCircle:
 11399                           	opt stack 0
 11400                           tblptru	equ	0xFF8
 11401                           tblptrh	equ	0xFF7
 11402                           tblptrl	equ	0xFF6
 11403                           tablat	equ	0xFF5
 11404                           prodh	equ	0xFF4
 11405                           prodl	equ	0xFF3
 11406                           intcon	equ	0xFF2
 11407                           intcon2	equ	0xFF1
 11408                           postinc0	equ	0xFEE
 11409                           wreg	equ	0xFE8
 11410                           postdec1	equ	0xFE5
 11411                           fsr1l	equ	0xFE1
 11412                           indf2	equ	0xFDF
 11413                           postinc2	equ	0xFDE
 11414                           fsr2h	equ	0xFDA
 11415                           fsr2l	equ	0xFD9
 11416                           status	equ	0xFD8
 11417                           
 11418 ;; *************** function _TFT_GreenTab_Initialize *****************
 11419 ;; Defined at:
 11420 ;;		line 644 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 11421 ;; Parameters:    Size  Location     Type
 11422 ;;		None
 11423 ;; Auto vars:     Size  Location     Type
 11424 ;;		None
 11425 ;; Return value:  Size  Location     Type
 11426 ;;		None               void
 11427 ;; Registers used:
 11428 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11429 ;; Tracked objects:
 11430 ;;		On entry : 0/0
 11431 ;;		On exit  : 0/0
 11432 ;;		Unchanged: 0/0
 11433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11438 ;;Total ram usage:        0 bytes
 11439 ;; Hardware stack levels used:    1
 11440 ;; Hardware stack levels required when called:    6
 11441 ;; This function calls:
 11442 ;;		_Rcmd1
 11443 ;;		_Rcmd2red
 11444 ;;		_Rcmd3
 11445 ;;		_write_command
 11446 ;;		_write_data
 11447 ;; This function is called by:
 11448 ;;		_Initialize_Screen
 11449 ;; This function uses a non-reentrant model
 11450 ;;
 11451                           
 11452                           	psect	text55
 11453  003824                     __ptext55:
 11454                           	opt stack 0
 11455  003824                     _TFT_GreenTab_Initialize:
 11456                           	opt stack 23
 11457                           
 11458                           ;ST7735_TFT.c: 646: PORTBbits.RB5 = 1;
 11459                           
 11460                           ;incstack = 0
 11461  003824  8A81               	bsf	3969,5,c	;volatile
 11462                           
 11463                           ;ST7735_TFT.c: 647: PORTBbits.RB6 = 0;
 11464  003826  9C81               	bcf	3969,6,c	;volatile
 11465                           
 11466                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
 11467  003828  0E80               	movlw	128
 11468  00382A  6EC7               	movwf	4039,c	;volatile
 11469                           
 11470                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
 11471  00382C  0E30               	movlw	48
 11472  00382E  6EC6               	movwf	4038,c	;volatile
 11473                           
 11474                           ;ST7735_TFT.c: 653: Rcmd1();
 11475  003830  EC05  F00D         	call	_Rcmd1	;wreg free
 11476                           
 11477                           ;ST7735_TFT.c: 654: Rcmd2red();
 11478  003834  ECD0  F01A         	call	_Rcmd2red	;wreg free
 11479                           
 11480                           ;ST7735_TFT.c: 655: Rcmd3();
 11481  003838  EC8E  F00F         	call	_Rcmd3	;wreg free
 11482                           
 11483                           ;ST7735_TFT.c: 656: write_command(0x36);
 11484  00383C  0E36               	movlw	54
 11485  00383E  ECC4  F01D         	call	_write_command
 11486                           
 11487                           ;ST7735_TFT.c: 657: write_data(0xC0);
 11488  003842  0EC0               	movlw	192
 11489  003844  ECBC  F01D         	call	_write_data
 11490                           
 11491                           ;ST7735_TFT.c: 658: _tft_type = 1;
 11492  003848  0E01               	movlw	1
 11493  00384A  6E58               	movwf	__tft_type,c
 11494  00384C  0012               	return		;funcret
 11495  00384E                     __end_of_TFT_GreenTab_Initialize:
 11496                           	opt stack 0
 11497                           tblptru	equ	0xFF8
 11498                           tblptrh	equ	0xFF7
 11499                           tblptrl	equ	0xFF6
 11500                           tablat	equ	0xFF5
 11501                           prodh	equ	0xFF4
 11502                           prodl	equ	0xFF3
 11503                           intcon	equ	0xFF2
 11504                           intcon2	equ	0xFF1
 11505                           postinc0	equ	0xFEE
 11506                           wreg	equ	0xFE8
 11507                           postdec1	equ	0xFE5
 11508                           fsr1l	equ	0xFE1
 11509                           indf2	equ	0xFDF
 11510                           postinc2	equ	0xFDE
 11511                           fsr2h	equ	0xFDA
 11512                           fsr2l	equ	0xFD9
 11513                           status	equ	0xFD8
 11514                           
 11515 ;; *************** function _Rcmd3 *****************
 11516 ;; Defined at:
 11517 ;;		line 338 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 11518 ;; Parameters:    Size  Location     Type
 11519 ;;		None
 11520 ;; Auto vars:     Size  Location     Type
 11521 ;;		None
 11522 ;; Return value:  Size  Location     Type
 11523 ;;		None               void
 11524 ;; Registers used:
 11525 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11526 ;; Tracked objects:
 11527 ;;		On entry : 0/0
 11528 ;;		On exit  : 0/0
 11529 ;;		Unchanged: 0/0
 11530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11535 ;;Total ram usage:        0 bytes
 11536 ;; Hardware stack levels used:    1
 11537 ;; Hardware stack levels required when called:    5
 11538 ;; This function calls:
 11539 ;;		_delay_ms
 11540 ;;		_write_command
 11541 ;;		_write_data
 11542 ;; This function is called by:
 11543 ;;		_TFT_GreenTab_Initialize
 11544 ;;		_TFT_BlackTab_Initialize
 11545 ;; This function uses a non-reentrant model
 11546 ;;
 11547                           
 11548                           	psect	text56
 11549  001F1C                     __ptext56:
 11550                           	opt stack 0
 11551  001F1C                     _Rcmd3:
 11552                           	opt stack 23
 11553                           
 11554                           ;ST7735_TFT.c: 340: write_command(0xE0);
 11555                           
 11556                           ;incstack = 0
 11557  001F1C  0EE0               	movlw	224
 11558  001F1E  ECC4  F01D         	call	_write_command
 11559                           
 11560                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
 11561  001F22  0E02               	movlw	2
 11562  001F24  ECBC  F01D         	call	_write_data
 11563  001F28  0E1C               	movlw	28
 11564  001F2A  ECBC  F01D         	call	_write_data
 11565  001F2E  0E07               	movlw	7
 11566  001F30  ECBC  F01D         	call	_write_data
 11567  001F34  0E12               	movlw	18
 11568  001F36  ECBC  F01D         	call	_write_data
 11569                           
 11570                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 11571  001F3A  0E37               	movlw	55
 11572  001F3C  ECBC  F01D         	call	_write_data
 11573  001F40  0E32               	movlw	50
 11574  001F42  ECBC  F01D         	call	_write_data
 11575  001F46  0E29               	movlw	41
 11576  001F48  ECBC  F01D         	call	_write_data
 11577  001F4C  0E2D               	movlw	45
 11578  001F4E  ECBC  F01D         	call	_write_data
 11579                           
 11580                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 11581  001F52  0E29               	movlw	41
 11582  001F54  ECBC  F01D         	call	_write_data
 11583  001F58  0E25               	movlw	37
 11584  001F5A  ECBC  F01D         	call	_write_data
 11585  001F5E  0E2B               	movlw	43
 11586  001F60  ECBC  F01D         	call	_write_data
 11587  001F64  0E39               	movlw	57
 11588  001F66  ECBC  F01D         	call	_write_data
 11589                           
 11590                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 11591  001F6A  0E00               	movlw	0
 11592  001F6C  ECBC  F01D         	call	_write_data
 11593  001F70  0E01               	movlw	1
 11594  001F72  ECBC  F01D         	call	_write_data
 11595  001F76  0E03               	movlw	3
 11596  001F78  ECBC  F01D         	call	_write_data
 11597  001F7C  0E10               	movlw	16
 11598  001F7E  ECBC  F01D         	call	_write_data
 11599                           
 11600                           ;ST7735_TFT.c: 345: write_command(0xE1);
 11601  001F82  0EE1               	movlw	225
 11602  001F84  ECC4  F01D         	call	_write_command
 11603                           
 11604                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 11605  001F88  0E03               	movlw	3
 11606  001F8A  ECBC  F01D         	call	_write_data
 11607  001F8E  0E1D               	movlw	29
 11608  001F90  ECBC  F01D         	call	_write_data
 11609  001F94  0E07               	movlw	7
 11610  001F96  ECBC  F01D         	call	_write_data
 11611  001F9A  0E06               	movlw	6
 11612  001F9C  ECBC  F01D         	call	_write_data
 11613                           
 11614                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 11615  001FA0  0E2E               	movlw	46
 11616  001FA2  ECBC  F01D         	call	_write_data
 11617  001FA6  0E2C               	movlw	44
 11618  001FA8  ECBC  F01D         	call	_write_data
 11619  001FAC  0E29               	movlw	41
 11620  001FAE  ECBC  F01D         	call	_write_data
 11621  001FB2  0E2D               	movlw	45
 11622  001FB4  ECBC  F01D         	call	_write_data
 11623                           
 11624                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 11625  001FB8  0E2E               	movlw	46
 11626  001FBA  ECBC  F01D         	call	_write_data
 11627  001FBE  0E2E               	movlw	46
 11628  001FC0  ECBC  F01D         	call	_write_data
 11629  001FC4  0E37               	movlw	55
 11630  001FC6  ECBC  F01D         	call	_write_data
 11631  001FCA  0E3F               	movlw	63
 11632  001FCC  ECBC  F01D         	call	_write_data
 11633                           
 11634                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 11635  001FD0  0E00               	movlw	0
 11636  001FD2  ECBC  F01D         	call	_write_data
 11637  001FD6  0E00               	movlw	0
 11638  001FD8  ECBC  F01D         	call	_write_data
 11639  001FDC  0E02               	movlw	2
 11640  001FDE  ECBC  F01D         	call	_write_data
 11641  001FE2  0E10               	movlw	16
 11642  001FE4  ECBC  F01D         	call	_write_data
 11643                           
 11644                           ;ST7735_TFT.c: 350: write_command(0x13);
 11645  001FE8  0E13               	movlw	19
 11646  001FEA  ECC4  F01D         	call	_write_command
 11647                           
 11648                           ;ST7735_TFT.c: 351: delay_ms(10);
 11649  001FEE  0E00               	movlw	0
 11650  001FF0  6E18               	movwf	delay_ms@ms+1,c
 11651  001FF2  0E0A               	movlw	10
 11652  001FF4  6E17               	movwf	delay_ms@ms,c
 11653  001FF6  ECA0  F019         	call	_delay_ms	;wreg free
 11654                           
 11655                           ;ST7735_TFT.c: 352: write_command(0x29);
 11656  001FFA  0E29               	movlw	41
 11657  001FFC  ECC4  F01D         	call	_write_command
 11658                           
 11659                           ;ST7735_TFT.c: 353: delay_ms(100);
 11660  002000  0E00               	movlw	0
 11661  002002  6E18               	movwf	delay_ms@ms+1,c
 11662  002004  0E64               	movlw	100
 11663  002006  6E17               	movwf	delay_ms@ms,c
 11664  002008  ECA0  F019         	call	_delay_ms	;wreg free
 11665  00200C  0012               	return		;funcret
 11666  00200E                     __end_of_Rcmd3:
 11667                           	opt stack 0
 11668                           tblptru	equ	0xFF8
 11669                           tblptrh	equ	0xFF7
 11670                           tblptrl	equ	0xFF6
 11671                           tablat	equ	0xFF5
 11672                           prodh	equ	0xFF4
 11673                           prodl	equ	0xFF3
 11674                           intcon	equ	0xFF2
 11675                           intcon2	equ	0xFF1
 11676                           postinc0	equ	0xFEE
 11677                           wreg	equ	0xFE8
 11678                           postdec1	equ	0xFE5
 11679                           fsr1l	equ	0xFE1
 11680                           indf2	equ	0xFDF
 11681                           postinc2	equ	0xFDE
 11682                           fsr2h	equ	0xFDA
 11683                           fsr2l	equ	0xFD9
 11684                           status	equ	0xFD8
 11685                           
 11686 ;; *************** function _Rcmd2red *****************
 11687 ;; Defined at:
 11688 ;;		line 328 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 11689 ;; Parameters:    Size  Location     Type
 11690 ;;		None
 11691 ;; Auto vars:     Size  Location     Type
 11692 ;;		None
 11693 ;; Return value:  Size  Location     Type
 11694 ;;		None               void
 11695 ;; Registers used:
 11696 ;;		wreg, status,2, cstack
 11697 ;; Tracked objects:
 11698 ;;		On entry : 0/0
 11699 ;;		On exit  : 0/0
 11700 ;;		Unchanged: 0/0
 11701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11706 ;;Total ram usage:        0 bytes
 11707 ;; Hardware stack levels used:    1
 11708 ;; Hardware stack levels required when called:    5
 11709 ;; This function calls:
 11710 ;;		_write_command
 11711 ;;		_write_data
 11712 ;; This function is called by:
 11713 ;;		_TFT_GreenTab_Initialize
 11714 ;; This function uses a non-reentrant model
 11715 ;;
 11716                           
 11717                           	psect	text57
 11718  0035A0                     __ptext57:
 11719                           	opt stack 0
 11720  0035A0                     _Rcmd2red:
 11721                           	opt stack 23
 11722                           
 11723                           ;ST7735_TFT.c: 330: write_command(0x2A);
 11724                           
 11725                           ;incstack = 0
 11726  0035A0  0E2A               	movlw	42
 11727  0035A2  ECC4  F01D         	call	_write_command
 11728                           
 11729                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
 11730  0035A6  0E00               	movlw	0
 11731  0035A8  ECBC  F01D         	call	_write_data
 11732  0035AC  0E00               	movlw	0
 11733  0035AE  ECBC  F01D         	call	_write_data
 11734                           
 11735                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
 11736  0035B2  0E00               	movlw	0
 11737  0035B4  ECBC  F01D         	call	_write_data
 11738  0035B8  0E7F               	movlw	127
 11739  0035BA  ECBC  F01D         	call	_write_data
 11740                           
 11741                           ;ST7735_TFT.c: 333: write_command(0x2B);
 11742  0035BE  0E2B               	movlw	43
 11743  0035C0  ECC4  F01D         	call	_write_command
 11744                           
 11745                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
 11746  0035C4  0E00               	movlw	0
 11747  0035C6  ECBC  F01D         	call	_write_data
 11748  0035CA  0E00               	movlw	0
 11749  0035CC  ECBC  F01D         	call	_write_data
 11750                           
 11751                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
 11752  0035D0  0E00               	movlw	0
 11753  0035D2  ECBC  F01D         	call	_write_data
 11754  0035D6  0E9F               	movlw	159
 11755  0035D8  ECBC  F01D         	call	_write_data
 11756  0035DC  0012               	return		;funcret
 11757  0035DE                     __end_of_Rcmd2red:
 11758                           	opt stack 0
 11759                           tblptru	equ	0xFF8
 11760                           tblptrh	equ	0xFF7
 11761                           tblptrl	equ	0xFF6
 11762                           tablat	equ	0xFF5
 11763                           prodh	equ	0xFF4
 11764                           prodl	equ	0xFF3
 11765                           intcon	equ	0xFF2
 11766                           intcon2	equ	0xFF1
 11767                           postinc0	equ	0xFEE
 11768                           wreg	equ	0xFE8
 11769                           postdec1	equ	0xFE5
 11770                           fsr1l	equ	0xFE1
 11771                           indf2	equ	0xFDF
 11772                           postinc2	equ	0xFDE
 11773                           fsr2h	equ	0xFDA
 11774                           fsr2l	equ	0xFD9
 11775                           status	equ	0xFD8
 11776                           
 11777 ;; *************** function _Rcmd1 *****************
 11778 ;; Defined at:
 11779 ;;		line 281 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 11780 ;; Parameters:    Size  Location     Type
 11781 ;;		None
 11782 ;; Auto vars:     Size  Location     Type
 11783 ;;		None
 11784 ;; Return value:  Size  Location     Type
 11785 ;;		None               void
 11786 ;; Registers used:
 11787 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11788 ;; Tracked objects:
 11789 ;;		On entry : 0/0
 11790 ;;		On exit  : 0/0
 11791 ;;		Unchanged: 0/0
 11792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11797 ;;Total ram usage:        0 bytes
 11798 ;; Hardware stack levels used:    1
 11799 ;; Hardware stack levels required when called:    5
 11800 ;; This function calls:
 11801 ;;		_delay_ms
 11802 ;;		_write_command
 11803 ;;		_write_data
 11804 ;; This function is called by:
 11805 ;;		_TFT_GreenTab_Initialize
 11806 ;;		_TFT_BlackTab_Initialize
 11807 ;; This function uses a non-reentrant model
 11808 ;;
 11809                           
 11810                           	psect	text58
 11811  001A0A                     __ptext58:
 11812                           	opt stack 0
 11813  001A0A                     _Rcmd1:
 11814                           	opt stack 23
 11815                           
 11816                           ;ST7735_TFT.c: 283: write_command(0x01);
 11817                           
 11818                           ;incstack = 0
 11819  001A0A  0E01               	movlw	1
 11820  001A0C  ECC4  F01D         	call	_write_command
 11821                           
 11822                           ;ST7735_TFT.c: 284: delay_ms(150);
 11823  001A10  0E00               	movlw	0
 11824  001A12  6E18               	movwf	delay_ms@ms+1,c
 11825  001A14  0E96               	movlw	150
 11826  001A16  6E17               	movwf	delay_ms@ms,c
 11827  001A18  ECA0  F019         	call	_delay_ms	;wreg free
 11828                           
 11829                           ;ST7735_TFT.c: 285: write_command(0x11);
 11830  001A1C  0E11               	movlw	17
 11831  001A1E  ECC4  F01D         	call	_write_command
 11832                           
 11833                           ;ST7735_TFT.c: 286: delay_ms(500);
 11834  001A22  0E01               	movlw	1
 11835  001A24  6E18               	movwf	delay_ms@ms+1,c
 11836  001A26  0EF4               	movlw	244
 11837  001A28  6E17               	movwf	delay_ms@ms,c
 11838  001A2A  ECA0  F019         	call	_delay_ms	;wreg free
 11839                           
 11840                           ;ST7735_TFT.c: 287: write_command(0xB1);
 11841  001A2E  0EB1               	movlw	177
 11842  001A30  ECC4  F01D         	call	_write_command
 11843                           
 11844                           ;ST7735_TFT.c: 288: write_data(0x01);
 11845  001A34  0E01               	movlw	1
 11846  001A36  ECBC  F01D         	call	_write_data
 11847                           
 11848                           ;ST7735_TFT.c: 289: write_data(0x2C);
 11849  001A3A  0E2C               	movlw	44
 11850  001A3C  ECBC  F01D         	call	_write_data
 11851                           
 11852                           ;ST7735_TFT.c: 290: write_data(0x2D);
 11853  001A40  0E2D               	movlw	45
 11854  001A42  ECBC  F01D         	call	_write_data
 11855                           
 11856                           ;ST7735_TFT.c: 291: write_command(0xB2);
 11857  001A46  0EB2               	movlw	178
 11858  001A48  ECC4  F01D         	call	_write_command
 11859                           
 11860                           ;ST7735_TFT.c: 292: write_data(0x01);
 11861  001A4C  0E01               	movlw	1
 11862  001A4E  ECBC  F01D         	call	_write_data
 11863                           
 11864                           ;ST7735_TFT.c: 293: write_data(0x2C);
 11865  001A52  0E2C               	movlw	44
 11866  001A54  ECBC  F01D         	call	_write_data
 11867                           
 11868                           ;ST7735_TFT.c: 294: write_data(0x2D);
 11869  001A58  0E2D               	movlw	45
 11870  001A5A  ECBC  F01D         	call	_write_data
 11871                           
 11872                           ;ST7735_TFT.c: 295: write_command(0xB3);
 11873  001A5E  0EB3               	movlw	179
 11874  001A60  ECC4  F01D         	call	_write_command
 11875                           
 11876                           ;ST7735_TFT.c: 296: write_data(0x01);
 11877  001A64  0E01               	movlw	1
 11878  001A66  ECBC  F01D         	call	_write_data
 11879                           
 11880                           ;ST7735_TFT.c: 297: write_data(0x2C);
 11881  001A6A  0E2C               	movlw	44
 11882  001A6C  ECBC  F01D         	call	_write_data
 11883                           
 11884                           ;ST7735_TFT.c: 298: write_data(0x2D);
 11885  001A70  0E2D               	movlw	45
 11886  001A72  ECBC  F01D         	call	_write_data
 11887                           
 11888                           ;ST7735_TFT.c: 299: write_data(0x01);
 11889  001A76  0E01               	movlw	1
 11890  001A78  ECBC  F01D         	call	_write_data
 11891                           
 11892                           ;ST7735_TFT.c: 300: write_data(0x2C);
 11893  001A7C  0E2C               	movlw	44
 11894  001A7E  ECBC  F01D         	call	_write_data
 11895                           
 11896                           ;ST7735_TFT.c: 301: write_data(0x2D);
 11897  001A82  0E2D               	movlw	45
 11898  001A84  ECBC  F01D         	call	_write_data
 11899                           
 11900                           ;ST7735_TFT.c: 302: write_command(0xB4);
 11901  001A88  0EB4               	movlw	180
 11902  001A8A  ECC4  F01D         	call	_write_command
 11903                           
 11904                           ;ST7735_TFT.c: 303: write_data(0x07);
 11905  001A8E  0E07               	movlw	7
 11906  001A90  ECBC  F01D         	call	_write_data
 11907                           
 11908                           ;ST7735_TFT.c: 304: write_command(0xC0);
 11909  001A94  0EC0               	movlw	192
 11910  001A96  ECC4  F01D         	call	_write_command
 11911                           
 11912                           ;ST7735_TFT.c: 305: write_data(0xA2);
 11913  001A9A  0EA2               	movlw	162
 11914  001A9C  ECBC  F01D         	call	_write_data
 11915                           
 11916                           ;ST7735_TFT.c: 306: write_data(0x02);
 11917  001AA0  0E02               	movlw	2
 11918  001AA2  ECBC  F01D         	call	_write_data
 11919                           
 11920                           ;ST7735_TFT.c: 307: write_data(0x84);
 11921  001AA6  0E84               	movlw	132
 11922  001AA8  ECBC  F01D         	call	_write_data
 11923                           
 11924                           ;ST7735_TFT.c: 308: write_command(0xC1);
 11925  001AAC  0EC1               	movlw	193
 11926  001AAE  ECC4  F01D         	call	_write_command
 11927                           
 11928                           ;ST7735_TFT.c: 309: write_data(0xC5);
 11929  001AB2  0EC5               	movlw	197
 11930  001AB4  ECBC  F01D         	call	_write_data
 11931                           
 11932                           ;ST7735_TFT.c: 310: write_command(0xC2);
 11933  001AB8  0EC2               	movlw	194
 11934  001ABA  ECC4  F01D         	call	_write_command
 11935                           
 11936                           ;ST7735_TFT.c: 311: write_data(0x0A);
 11937  001ABE  0E0A               	movlw	10
 11938  001AC0  ECBC  F01D         	call	_write_data
 11939                           
 11940                           ;ST7735_TFT.c: 312: write_data(0x00);
 11941  001AC4  0E00               	movlw	0
 11942  001AC6  ECBC  F01D         	call	_write_data
 11943                           
 11944                           ;ST7735_TFT.c: 313: write_command(0xC3);
 11945  001ACA  0EC3               	movlw	195
 11946  001ACC  ECC4  F01D         	call	_write_command
 11947                           
 11948                           ;ST7735_TFT.c: 314: write_data(0x8A);
 11949  001AD0  0E8A               	movlw	138
 11950  001AD2  ECBC  F01D         	call	_write_data
 11951                           
 11952                           ;ST7735_TFT.c: 315: write_data(0x2A);
 11953  001AD6  0E2A               	movlw	42
 11954  001AD8  ECBC  F01D         	call	_write_data
 11955                           
 11956                           ;ST7735_TFT.c: 316: write_command(0xC4);
 11957  001ADC  0EC4               	movlw	196
 11958  001ADE  ECC4  F01D         	call	_write_command
 11959                           
 11960                           ;ST7735_TFT.c: 317: write_data(0x8A);
 11961  001AE2  0E8A               	movlw	138
 11962  001AE4  ECBC  F01D         	call	_write_data
 11963                           
 11964                           ;ST7735_TFT.c: 318: write_data(0xEE);
 11965  001AE8  0EEE               	movlw	238
 11966  001AEA  ECBC  F01D         	call	_write_data
 11967                           
 11968                           ;ST7735_TFT.c: 319: write_command(0xC5);
 11969  001AEE  0EC5               	movlw	197
 11970  001AF0  ECC4  F01D         	call	_write_command
 11971                           
 11972                           ;ST7735_TFT.c: 320: write_data(0x0E);
 11973  001AF4  0E0E               	movlw	14
 11974  001AF6  ECBC  F01D         	call	_write_data
 11975                           
 11976                           ;ST7735_TFT.c: 321: write_command(0x20);
 11977  001AFA  0E20               	movlw	32
 11978  001AFC  ECC4  F01D         	call	_write_command
 11979                           
 11980                           ;ST7735_TFT.c: 322: write_command(0x36);
 11981  001B00  0E36               	movlw	54
 11982  001B02  ECC4  F01D         	call	_write_command
 11983                           
 11984                           ;ST7735_TFT.c: 323: write_data(0xC8);
 11985  001B06  0EC8               	movlw	200
 11986  001B08  ECBC  F01D         	call	_write_data
 11987                           
 11988                           ;ST7735_TFT.c: 324: write_command(0x3A);
 11989  001B0C  0E3A               	movlw	58
 11990  001B0E  ECC4  F01D         	call	_write_command
 11991                           
 11992                           ;ST7735_TFT.c: 325: write_data(0x05);
 11993  001B12  0E05               	movlw	5
 11994  001B14  ECBC  F01D         	call	_write_data
 11995  001B18  0012               	return		;funcret
 11996  001B1A                     __end_of_Rcmd1:
 11997                           	opt stack 0
 11998                           tblptru	equ	0xFF8
 11999                           tblptrh	equ	0xFF7
 12000                           tblptrl	equ	0xFF6
 12001                           tablat	equ	0xFF5
 12002                           prodh	equ	0xFF4
 12003                           prodl	equ	0xFF3
 12004                           intcon	equ	0xFF2
 12005                           intcon2	equ	0xFF1
 12006                           postinc0	equ	0xFEE
 12007                           wreg	equ	0xFE8
 12008                           postdec1	equ	0xFE5
 12009                           fsr1l	equ	0xFE1
 12010                           indf2	equ	0xFDF
 12011                           postinc2	equ	0xFDE
 12012                           fsr2h	equ	0xFDA
 12013                           fsr2l	equ	0xFD9
 12014                           status	equ	0xFD8
 12015                           
 12016 ;; *************** function _LCD_Reset *****************
 12017 ;; Defined at:
 12018 ;;		line 217 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 12019 ;; Parameters:    Size  Location     Type
 12020 ;;		None
 12021 ;; Auto vars:     Size  Location     Type
 12022 ;;		None
 12023 ;; Return value:  Size  Location     Type
 12024 ;;		None               void
 12025 ;; Registers used:
 12026 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12027 ;; Tracked objects:
 12028 ;;		On entry : 0/0
 12029 ;;		On exit  : 0/0
 12030 ;;		Unchanged: 0/0
 12031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12036 ;;Total ram usage:        0 bytes
 12037 ;; Hardware stack levels used:    1
 12038 ;; Hardware stack levels required when called:    5
 12039 ;; This function calls:
 12040 ;;		_delay_ms
 12041 ;; This function is called by:
 12042 ;;		_Initialize_Screen
 12043 ;; This function uses a non-reentrant model
 12044 ;;
 12045                           
 12046                           	psect	text59
 12047  003AEC                     __ptext59:
 12048                           	opt stack 0
 12049  003AEC                     _LCD_Reset:
 12050                           	opt stack 24
 12051                           
 12052                           ;ST7735_TFT.c: 219: PORTCbits.RC1 = 0;
 12053                           
 12054                           ;incstack = 0
 12055  003AEC  9282               	bcf	3970,1,c	;volatile
 12056                           
 12057                           ;ST7735_TFT.c: 220: delay_ms(100);
 12058  003AEE  0E00               	movlw	0
 12059  003AF0  6E18               	movwf	delay_ms@ms+1,c
 12060  003AF2  0E64               	movlw	100
 12061  003AF4  6E17               	movwf	delay_ms@ms,c
 12062  003AF6  ECA0  F019         	call	_delay_ms	;wreg free
 12063                           
 12064                           ;ST7735_TFT.c: 221: PORTCbits.RC1 = 1;
 12065  003AFA  8282               	bsf	3970,1,c	;volatile
 12066  003AFC  0012               	return		;funcret
 12067  003AFE                     __end_of_LCD_Reset:
 12068                           	opt stack 0
 12069                           tblptru	equ	0xFF8
 12070                           tblptrh	equ	0xFF7
 12071                           tblptrl	equ	0xFF6
 12072                           tablat	equ	0xFF5
 12073                           prodh	equ	0xFF4
 12074                           prodl	equ	0xFF3
 12075                           intcon	equ	0xFF2
 12076                           intcon2	equ	0xFF1
 12077                           postinc0	equ	0xFEE
 12078                           wreg	equ	0xFE8
 12079                           postdec1	equ	0xFE5
 12080                           fsr1l	equ	0xFE1
 12081                           indf2	equ	0xFDF
 12082                           postinc2	equ	0xFDE
 12083                           fsr2h	equ	0xFDA
 12084                           fsr2l	equ	0xFD9
 12085                           status	equ	0xFD8
 12086                           
 12087 ;; *************** function _delay_ms *****************
 12088 ;; Defined at:
 12089 ;;		line 64 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 12090 ;; Parameters:    Size  Location     Type
 12091 ;;  ms              2   22[COMRAM] int 
 12092 ;; Auto vars:     Size  Location     Type
 12093 ;;  count           2   26[COMRAM] int 
 12094 ;; Return value:  Size  Location     Type
 12095 ;;		None               void
 12096 ;; Registers used:
 12097 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12098 ;; Tracked objects:
 12099 ;;		On entry : 0/0
 12100 ;;		On exit  : 0/0
 12101 ;;		Unchanged: 0/0
 12102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12103 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12104 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12105 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12106 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12107 ;;Total ram usage:        6 bytes
 12108 ;; Hardware stack levels used:    1
 12109 ;; Hardware stack levels required when called:    4
 12110 ;; This function calls:
 12111 ;;		___wmul
 12112 ;; This function is called by:
 12113 ;;		_LCD_Reset
 12114 ;;		_Rcmd1
 12115 ;;		_Rcmd3
 12116 ;;		_Bcmd
 12117 ;; This function uses a non-reentrant model
 12118 ;;
 12119                           
 12120                           	psect	text60
 12121  003340                     __ptext60:
 12122                           	opt stack 0
 12123  003340                     _delay_ms:
 12124                           	opt stack 23
 12125                           
 12126                           ;ST7735_TFT.c: 70: int count;
 12127                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
 12128                           
 12129                           ;incstack = 0
 12130  003340  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 12131  003344  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 12132  003348  0E00               	movlw	0
 12133  00334A  6E14               	movwf	___wmul@multiplicand+1,c
 12134  00334C  0E7D               	movlw	125
 12135  00334E  6E13               	movwf	___wmul@multiplicand,c
 12136  003350  EC27  F01C         	call	___wmul	;wreg free
 12137  003354  C011  F01B         	movff	?___wmul,delay_ms@count
 12138  003358  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
 12139                           
 12140                           ;ST7735_TFT.c: 72: count = (0xffff - count);
 12141  00335C  C01B  F019         	movff	delay_ms@count,??_delay_ms
 12142  003360  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
 12143  003364  1E19               	comf	??_delay_ms,f,c
 12144  003366  1E1A               	comf	??_delay_ms+1,f,c
 12145  003368  4A19               	infsnz	??_delay_ms,f,c
 12146  00336A  2A1A               	incf	??_delay_ms+1,f,c
 12147  00336C  0EFF               	movlw	255
 12148  00336E  2419               	addwf	??_delay_ms,w,c
 12149  003370  6E1B               	movwf	delay_ms@count,c
 12150  003372  0EFF               	movlw	255
 12151  003374  201A               	addwfc	??_delay_ms+1,w,c
 12152  003376  6E1C               	movwf	delay_ms@count+1,c
 12153                           
 12154                           ;ST7735_TFT.c: 74: T0CON = 0x03;
 12155  003378  0E03               	movlw	3
 12156  00337A  6ED5               	movwf	4053,c	;volatile
 12157                           
 12158                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
 12159  00337C  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
 12160                           
 12161                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
 12162  003380  501C               	movf	delay_ms@count+1,w,c
 12163  003382  6ED7               	movwf	4055,c	;volatile
 12164                           
 12165                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
 12166  003384  94F2               	bcf	intcon,2,c	;volatile
 12167                           
 12168                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
 12169  003386  8ED5               	bsf	4053,7,c	;volatile
 12170                           
 12171                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
 12172  003388  D000               	goto	l1191
 12173  00338A                     l1191:
 12174  00338A  A4F2               	btfss	intcon,2,c	;volatile
 12175  00338C  D7FE               	goto	l1191
 12176                           
 12177                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
 12178  00338E  9ED5               	bcf	4053,7,c	;volatile
 12179  003390  0012               	return		;funcret
 12180  003392                     __end_of_delay_ms:
 12181                           	opt stack 0
 12182                           tblptru	equ	0xFF8
 12183                           tblptrh	equ	0xFF7
 12184                           tblptrl	equ	0xFF6
 12185                           tablat	equ	0xFF5
 12186                           prodh	equ	0xFF4
 12187                           prodl	equ	0xFF3
 12188                           intcon	equ	0xFF2
 12189                           intcon2	equ	0xFF1
 12190                           postinc0	equ	0xFEE
 12191                           wreg	equ	0xFE8
 12192                           postdec1	equ	0xFE5
 12193                           fsr1l	equ	0xFE1
 12194                           indf2	equ	0xFDF
 12195                           postinc2	equ	0xFDE
 12196                           fsr2h	equ	0xFDA
 12197                           fsr2l	equ	0xFD9
 12198                           status	equ	0xFD8
 12199                           
 12200 ;; *************** function _DS3231_Write_Alarm_Time *****************
 12201 ;; Defined at:
 12202 ;;		line 169 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Support.c"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;		None
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;  Address         1   10[BANK1 ] unsigned char 
 12207 ;;  Device          1    9[BANK1 ] unsigned char 
 12208 ;; Return value:  Size  Location     Type
 12209 ;;		None               void
 12210 ;; Registers used:
 12211 ;;		wreg, status,2, status,0, cstack
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12218 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12220 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12221 ;;Total ram usage:        2 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    7
 12224 ;; This function calls:
 12225 ;;		_DS3231_Read_Time
 12226 ;;		_I2C_Start
 12227 ;;		_I2C_Stop
 12228 ;;		_I2C_Write
 12229 ;;		_dec_2_bcd
 12230 ;; This function is called by:
 12231 ;;		_Do_Save_New_Alarm_Time
 12232 ;; This function uses a non-reentrant model
 12233 ;;
 12234                           
 12235                           	psect	text61
 12236  002DA2                     __ptext61:
 12237                           	opt stack 0
 12238  002DA2                     _DS3231_Write_Alarm_Time:
 12239                           	opt stack 21
 12240                           
 12241                           ;I2C_Support.c: 171: DS3231_Read_Time();
 12242                           
 12243                           ;incstack = 0
 12244  002DA2  EC67  F018         	call	_DS3231_Read_Time	;wreg free
 12245                           
 12246                           ;I2C_Support.c: 172: alarm_date = day;
 12247  002DA6  C05D  F059         	movff	_day,_alarm_date
 12248                           
 12249                           ;I2C_Support.c: 173: char Device = 0x68;
 12250  002DAA  0E68               	movlw	104
 12251  002DAC  0101               	movlb	1	; () banked
 12252  002DAE  6F46               	movwf	DS3231_Write_Alarm_Time@Device& (0+255),b
 12253                           
 12254                           ; BSR set to: 1
 12255                           ;I2C_Support.c: 174: char Address = 0x07;
 12256  002DB0  0E07               	movlw	7
 12257  002DB2  0101               	movlb	1	; () banked
 12258  002DB4  6F47               	movwf	DS3231_Write_Alarm_Time@Address& (0+255),b
 12259                           
 12260                           ;I2C_Support.c: 175: alarm_hour = dec_2_bcd(setup_alarm_hour);
 12261  002DB6  5064               	movf	_setup_alarm_hour,w,c
 12262  002DB8  ECFC  F017         	call	_dec_2_bcd
 12263  002DBC  0101               	movlb	1	; () banked
 12264  002DBE  513F               	movf	?_dec_2_bcd& (0+255),w,b
 12265  002DC0  6E5A               	movwf	_alarm_hour,c
 12266                           
 12267                           ;I2C_Support.c: 176: alarm_minute = dec_2_bcd(setup_alarm_minute);
 12268  002DC2  5065               	movf	_setup_alarm_minute,w,c
 12269  002DC4  ECFC  F017         	call	_dec_2_bcd
 12270  002DC8  0101               	movlb	1	; () banked
 12271  002DCA  513F               	movf	?_dec_2_bcd& (0+255),w,b
 12272  002DCC  6E5B               	movwf	_alarm_minute,c
 12273                           
 12274                           ;I2C_Support.c: 177: alarm_second = dec_2_bcd(setup_alarm_second);
 12275  002DCE  5066               	movf	_setup_alarm_second,w,c
 12276  002DD0  ECFC  F017         	call	_dec_2_bcd
 12277  002DD4  0101               	movlb	1	; () banked
 12278  002DD6  513F               	movf	?_dec_2_bcd& (0+255),w,b
 12279  002DD8  6E5C               	movwf	_alarm_second,c
 12280                           
 12281                           ; BSR set to: 1
 12282                           ;I2C_Support.c: 178: alarm_second = alarm_second & 0x7f;
 12283  002DDA  505C               	movf	_alarm_second,w,c
 12284  002DDC  0B7F               	andlw	127
 12285  002DDE  6E5C               	movwf	_alarm_second,c
 12286                           
 12287                           ; BSR set to: 1
 12288                           ;I2C_Support.c: 179: alarm_minute = alarm_minute & 0x7f;
 12289  002DE0  505B               	movf	_alarm_minute,w,c
 12290  002DE2  0B7F               	andlw	127
 12291  002DE4  6E5B               	movwf	_alarm_minute,c
 12292                           
 12293                           ; BSR set to: 1
 12294                           ;I2C_Support.c: 180: alarm_hour = alarm_hour & 0x7f;
 12295  002DE6  505A               	movf	_alarm_hour,w,c
 12296  002DE8  0B7F               	andlw	127
 12297  002DEA  6E5A               	movwf	_alarm_hour,c
 12298                           
 12299                           ; BSR set to: 1
 12300                           ;I2C_Support.c: 181: alarm_date = alarm_date | 0x80;
 12301  002DEC  5059               	movf	_alarm_date,w,c
 12302  002DEE  0980               	iorlw	128
 12303  002DF0  6E59               	movwf	_alarm_date,c
 12304                           
 12305                           ; BSR set to: 1
 12306                           ;I2C_Support.c: 182: I2C_Start();
 12307  002DF2  EC9A  F01D         	call	_I2C_Start	;wreg free
 12308                           
 12309                           ;I2C_Support.c: 183: I2C_Write((Device << 1) | 0);
 12310  002DF6  0101               	movlb	1	; () banked
 12311  002DF8  5146               	movf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 12312  002DFA  2546               	addwf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 12313  002DFC  EC0E  F01B         	call	_I2C_Write
 12314                           
 12315                           ;I2C_Support.c: 184: I2C_Write(Address);
 12316  002E00  0101               	movlb	1	; () banked
 12317  002E02  5147               	movf	DS3231_Write_Alarm_Time@Address& (0+255),w,b
 12318  002E04  EC0E  F01B         	call	_I2C_Write
 12319                           
 12320                           ;I2C_Support.c: 186: I2C_Write(alarm_second);
 12321  002E08  505C               	movf	_alarm_second,w,c
 12322  002E0A  EC0E  F01B         	call	_I2C_Write
 12323                           
 12324                           ;I2C_Support.c: 187: I2C_Write(alarm_minute);
 12325  002E0E  505B               	movf	_alarm_minute,w,c
 12326  002E10  EC0E  F01B         	call	_I2C_Write
 12327                           
 12328                           ;I2C_Support.c: 188: I2C_Write(alarm_hour);
 12329  002E14  505A               	movf	_alarm_hour,w,c
 12330  002E16  EC0E  F01B         	call	_I2C_Write
 12331                           
 12332                           ;I2C_Support.c: 189: I2C_Write(alarm_date);
 12333  002E1A  5059               	movf	_alarm_date,w,c
 12334  002E1C  EC0E  F01B         	call	_I2C_Write
 12335                           
 12336                           ;I2C_Support.c: 190: I2C_Stop();
 12337  002E20  EC91  F01D         	call	_I2C_Stop	;wreg free
 12338  002E24  0012               	return		;funcret
 12339  002E26                     __end_of_DS3231_Write_Alarm_Time:
 12340                           	opt stack 0
 12341                           tblptru	equ	0xFF8
 12342                           tblptrh	equ	0xFF7
 12343                           tblptrl	equ	0xFF6
 12344                           tablat	equ	0xFF5
 12345                           prodh	equ	0xFF4
 12346                           prodl	equ	0xFF3
 12347                           intcon	equ	0xFF2
 12348                           intcon2	equ	0xFF1
 12349                           postinc0	equ	0xFEE
 12350                           wreg	equ	0xFE8
 12351                           postdec1	equ	0xFE5
 12352                           fsr1l	equ	0xFE1
 12353                           indf2	equ	0xFDF
 12354                           postinc2	equ	0xFDE
 12355                           fsr2h	equ	0xFDA
 12356                           fsr2l	equ	0xFD9
 12357                           status	equ	0xFD8
 12358                           
 12359 ;; *************** function _dec_2_bcd *****************
 12360 ;; Defined at:
 12361 ;;		line 56 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
 12362 ;; Parameters:    Size  Location     Type
 12363 ;;  dec             1    wreg     unsigned char 
 12364 ;; Auto vars:     Size  Location     Type
 12365 ;;  dec             1    8[BANK1 ] unsigned char 
 12366 ;;  bcd             2    6[BANK1 ] int 
 12367 ;; Return value:  Size  Location     Type
 12368 ;;                  2    2[BANK1 ] int 
 12369 ;; Registers used:
 12370 ;;		wreg, status,2, status,0, cstack
 12371 ;; Tracked objects:
 12372 ;;		On entry : 0/0
 12373 ;;		On exit  : 0/0
 12374 ;;		Unchanged: 0/0
 12375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12376 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12377 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12378 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12379 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12380 ;;Total ram usage:        7 bytes
 12381 ;; Hardware stack levels used:    1
 12382 ;; Hardware stack levels required when called:    4
 12383 ;; This function calls:
 12384 ;;		___awdiv
 12385 ;;		___awmod
 12386 ;; This function is called by:
 12387 ;;		_DS3231_Write_Time
 12388 ;;		_DS3231_Write_Alarm_Time
 12389 ;; This function uses a non-reentrant model
 12390 ;;
 12391                           
 12392                           	psect	text62
 12393  002FF8                     __ptext62:
 12394                           	opt stack 0
 12395  002FF8                     _dec_2_bcd:
 12396                           	opt stack 23
 12397                           
 12398                           ;incstack = 0
 12399                           ;dec_2_bcd@dec stored from wreg
 12400  002FF8  0101               	movlb	1	; () banked
 12401  002FFA  6F45               	movwf	dec_2_bcd@dec& (0+255),b
 12402                           
 12403                           ; BSR set to: 1
 12404                           ;utils.c: 58: int bcd;
 12405                           ;utils.c: 59: bcd = ((dec / 10) << 4) + (dec % 10);
 12406  002FFC  C145  F017         	movff	dec_2_bcd@dec,___awdiv@dividend
 12407  003000  6A18               	clrf	___awdiv@dividend+1,c
 12408  003002  0E00               	movlw	0
 12409  003004  6E1A               	movwf	___awdiv@divisor+1,c
 12410  003006  0E0A               	movlw	10
 12411  003008  6E19               	movwf	___awdiv@divisor,c
 12412  00300A  EC27  F015         	call	___awdiv	;wreg free
 12413  00300E  C017  F141         	movff	?___awdiv,??_dec_2_bcd
 12414  003012  C018  F142         	movff	?___awdiv+1,??_dec_2_bcd+1
 12415  003016  0101               	movlb	1	; () banked
 12416  003018  3B41               	swapf	??_dec_2_bcd& (0+255),f,b
 12417  00301A  3B42               	swapf	(??_dec_2_bcd+1)& (0+255),f,b
 12418  00301C  0EF0               	movlw	240
 12419  00301E  1742               	andwf	(??_dec_2_bcd+1)& (0+255),f,b
 12420  003020  5141               	movf	??_dec_2_bcd& (0+255),w,b
 12421  003022  0B0F               	andlw	15
 12422  003024  1342               	iorwf	(??_dec_2_bcd+1)& (0+255),f,b
 12423  003026  0EF0               	movlw	240
 12424  003028  1741               	andwf	??_dec_2_bcd& (0+255),f,b
 12425  00302A  C145  F0FB         	movff	dec_2_bcd@dec,___awmod@dividend
 12426  00302E  0100               	movlb	0	; () banked
 12427  003030  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
 12428  003032  0E00               	movlw	0
 12429  003034  0100               	movlb	0	; () banked
 12430  003036  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
 12431  003038  0E0A               	movlw	10
 12432  00303A  6FFD               	movwf	___awmod@divisor& (0+255),b
 12433  00303C  EC31  F014         	call	___awmod	;wreg free
 12434  003040  0100               	movlb	0	; () banked
 12435  003042  51FB               	movf	?___awmod& (0+255),w,b
 12436  003044  0101               	movlb	1	; () banked
 12437  003046  2541               	addwf	??_dec_2_bcd& (0+255),w,b
 12438  003048  0101               	movlb	1	; () banked
 12439  00304A  6F43               	movwf	dec_2_bcd@bcd& (0+255),b
 12440  00304C  0100               	movlb	0	; () banked
 12441  00304E  51FC               	movf	(?___awmod+1)& (0+255),w,b
 12442  003050  0101               	movlb	1	; () banked
 12443  003052  2142               	addwfc	(??_dec_2_bcd+1)& (0+255),w,b
 12444  003054  0101               	movlb	1	; () banked
 12445  003056  6F44               	movwf	(dec_2_bcd@bcd+1)& (0+255),b
 12446                           
 12447                           ; BSR set to: 1
 12448                           ;utils.c: 60: return bcd;
 12449  003058  C143  F13F         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 12450  00305C  C144  F140         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 12451  003060  D000               	goto	l1091
 12452  003062                     l1091:
 12453                           
 12454                           ; BSR set to: 1
 12455  003062  0012               	return		;funcret
 12456  003064                     __end_of_dec_2_bcd:
 12457                           	opt stack 0
 12458                           tblptru	equ	0xFF8
 12459                           tblptrh	equ	0xFF7
 12460                           tblptrl	equ	0xFF6
 12461                           tablat	equ	0xFF5
 12462                           prodh	equ	0xFF4
 12463                           prodl	equ	0xFF3
 12464                           intcon	equ	0xFF2
 12465                           intcon2	equ	0xFF1
 12466                           postinc0	equ	0xFEE
 12467                           wreg	equ	0xFE8
 12468                           postdec1	equ	0xFE5
 12469                           fsr1l	equ	0xFE1
 12470                           indf2	equ	0xFDF
 12471                           postinc2	equ	0xFDE
 12472                           fsr2h	equ	0xFDA
 12473                           fsr2l	equ	0xFD9
 12474                           status	equ	0xFD8
 12475                           
 12476 ;; *************** function _DS3231_Read_Time *****************
 12477 ;; Defined at:
 12478 ;;		line 45 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Support.c"
 12479 ;; Parameters:    Size  Location     Type
 12480 ;;		None
 12481 ;; Auto vars:     Size  Location     Type
 12482 ;;  Device          1   20[COMRAM] unsigned char 
 12483 ;;  Address         1   19[COMRAM] unsigned char 
 12484 ;; Return value:  Size  Location     Type
 12485 ;;		None               void
 12486 ;; Registers used:
 12487 ;;		wreg, status,2, status,0, cstack
 12488 ;; Tracked objects:
 12489 ;;		On entry : 0/0
 12490 ;;		On exit  : 0/0
 12491 ;;		Unchanged: 0/0
 12492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12497 ;;Total ram usage:        2 bytes
 12498 ;; Hardware stack levels used:    1
 12499 ;; Hardware stack levels required when called:    6
 12500 ;; This function calls:
 12501 ;;		_I2C_ReStart
 12502 ;;		_I2C_Read
 12503 ;;		_I2C_Start
 12504 ;;		_I2C_Stop
 12505 ;;		_I2C_Write
 12506 ;; This function is called by:
 12507 ;;		_main
 12508 ;;		_Exit_Setup_Alarm_Time
 12509 ;;		_Do_Save_New_Alarm_Time
 12510 ;;		_Do_Setup_Time
 12511 ;;		_Do_Save_New_Time
 12512 ;;		_Exit_Time_Setup
 12513 ;;		_DS3231_Write_Alarm_Time
 12514 ;;		_Exit_Setup_Heater_Temp
 12515 ;;		_Do_Save_New_Heater_Temp
 12516 ;; This function uses a non-reentrant model
 12517 ;;
 12518                           
 12519                           	psect	text63
 12520  0030CE                     __ptext63:
 12521                           	opt stack 0
 12522  0030CE                     _DS3231_Read_Time:
 12523                           	opt stack 22
 12524                           
 12525                           ;I2C_Support.c: 47: char Device = 0x68;
 12526                           
 12527                           ; BSR set to: 1
 12528                           ;incstack = 0
 12529  0030CE  0E68               	movlw	104
 12530  0030D0  6E15               	movwf	DS3231_Read_Time@Device,c
 12531                           
 12532                           ;I2C_Support.c: 48: char Address = 0x00;
 12533  0030D2  0E00               	movlw	0
 12534  0030D4  6E14               	movwf	DS3231_Read_Time@Address,c
 12535                           
 12536                           ;I2C_Support.c: 50: I2C_Start();
 12537  0030D6  EC9A  F01D         	call	_I2C_Start	;wreg free
 12538                           
 12539                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 12540  0030DA  5015               	movf	DS3231_Read_Time@Device,w,c
 12541  0030DC  2415               	addwf	DS3231_Read_Time@Device,w,c
 12542  0030DE  EC0E  F01B         	call	_I2C_Write
 12543                           
 12544                           ;I2C_Support.c: 52: I2C_Write(Address);
 12545  0030E2  5014               	movf	DS3231_Read_Time@Address,w,c
 12546  0030E4  EC0E  F01B         	call	_I2C_Write
 12547                           
 12548                           ;I2C_Support.c: 53: I2C_ReStart();
 12549  0030E8  EC44  F01D         	call	_I2C_ReStart	;wreg free
 12550                           
 12551                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 12552  0030EC  80D8               	bsf	status,0,c
 12553  0030EE  3415               	rlcf	DS3231_Read_Time@Device,w,c
 12554  0030F0  EC0E  F01B         	call	_I2C_Write
 12555                           
 12556                           ;I2C_Support.c: 55: second = I2C_Read(1);
 12557  0030F4  0E01               	movlw	1
 12558  0030F6  ECAC  F01A         	call	_I2C_Read
 12559  0030FA  6E63               	movwf	_second,c
 12560                           
 12561                           ;I2C_Support.c: 56: minute = I2C_Read(1);
 12562  0030FC  0E01               	movlw	1
 12563  0030FE  ECAC  F01A         	call	_I2C_Read
 12564  003102  6E61               	movwf	_minute,c
 12565                           
 12566                           ;I2C_Support.c: 57: hour = I2C_Read(1);
 12567  003104  0E01               	movlw	1
 12568  003106  ECAC  F01A         	call	_I2C_Read
 12569  00310A  6E60               	movwf	_hour,c
 12570                           
 12571                           ;I2C_Support.c: 58: dow = I2C_Read(1);
 12572  00310C  0E01               	movlw	1
 12573  00310E  ECAC  F01A         	call	_I2C_Read
 12574  003112  0100               	movlb	0	; () banked
 12575  003114  6FF8               	movwf	_dow& (0+255),b
 12576                           
 12577                           ; BSR set to: 0
 12578                           ;I2C_Support.c: 59: day = I2C_Read(1);
 12579  003116  0E01               	movlw	1
 12580  003118  ECAC  F01A         	call	_I2C_Read
 12581  00311C  6E5D               	movwf	_day,c
 12582                           
 12583                           ;I2C_Support.c: 60: month = I2C_Read(1);
 12584  00311E  0E01               	movlw	1
 12585  003120  ECAC  F01A         	call	_I2C_Read
 12586  003124  6E62               	movwf	_month,c
 12587                           
 12588                           ;I2C_Support.c: 61: year = I2C_Read(0);
 12589  003126  0E00               	movlw	0
 12590  003128  ECAC  F01A         	call	_I2C_Read
 12591  00312C  6E6D               	movwf	_year,c
 12592                           
 12593                           ;I2C_Support.c: 62: I2C_Stop();
 12594  00312E  EC91  F01D         	call	_I2C_Stop	;wreg free
 12595  003132  0012               	return		;funcret
 12596  003134                     __end_of_DS3231_Read_Time:
 12597                           	opt stack 0
 12598                           tblptru	equ	0xFF8
 12599                           tblptrh	equ	0xFF7
 12600                           tblptrl	equ	0xFF6
 12601                           tablat	equ	0xFF5
 12602                           prodh	equ	0xFF4
 12603                           prodl	equ	0xFF3
 12604                           intcon	equ	0xFF2
 12605                           intcon2	equ	0xFF1
 12606                           postinc0	equ	0xFEE
 12607                           wreg	equ	0xFE8
 12608                           postdec1	equ	0xFE5
 12609                           fsr1l	equ	0xFE1
 12610                           indf2	equ	0xFDF
 12611                           postinc2	equ	0xFDE
 12612                           fsr2h	equ	0xFDA
 12613                           fsr2l	equ	0xFD9
 12614                           status	equ	0xFD8
 12615                           
 12616 ;; *************** function _DS3231_Read_Alarm_Time *****************
 12617 ;; Defined at:
 12618 ;;		line 115 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Support.c"
 12619 ;; Parameters:    Size  Location     Type
 12620 ;;		None
 12621 ;; Auto vars:     Size  Location     Type
 12622 ;;  Device          1   20[COMRAM] unsigned char 
 12623 ;;  Address         1   19[COMRAM] unsigned char 
 12624 ;; Return value:  Size  Location     Type
 12625 ;;		None               void
 12626 ;; Registers used:
 12627 ;;		wreg, status,2, status,0, cstack
 12628 ;; Tracked objects:
 12629 ;;		On entry : 0/0
 12630 ;;		On exit  : 0/0
 12631 ;;		Unchanged: 0/0
 12632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12636 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12637 ;;Total ram usage:        2 bytes
 12638 ;; Hardware stack levels used:    1
 12639 ;; Hardware stack levels required when called:    6
 12640 ;; This function calls:
 12641 ;;		_I2C_ReStart
 12642 ;;		_I2C_Read
 12643 ;;		_I2C_Start
 12644 ;;		_I2C_Stop
 12645 ;;		_I2C_Write
 12646 ;; This function is called by:
 12647 ;;		_main
 12648 ;;		_Do_Setup_Alarm_Time
 12649 ;;		_Do_Save_New_Alarm_Time
 12650 ;; This function uses a non-reentrant model
 12651 ;;
 12652                           
 12653                           	psect	text64
 12654  00342E                     __ptext64:
 12655                           	opt stack 0
 12656  00342E                     _DS3231_Read_Alarm_Time:
 12657                           	opt stack 22
 12658                           
 12659                           ;I2C_Support.c: 117: char Device = 0x68;
 12660                           
 12661                           ;incstack = 0
 12662  00342E  0E68               	movlw	104
 12663  003430  6E15               	movwf	DS3231_Read_Alarm_Time@Device,c
 12664                           
 12665                           ;I2C_Support.c: 118: char Address = 0x07;
 12666  003432  0E07               	movlw	7
 12667  003434  6E14               	movwf	DS3231_Read_Alarm_Time@Address,c
 12668                           
 12669                           ;I2C_Support.c: 119: I2C_Start();
 12670  003436  EC9A  F01D         	call	_I2C_Start	;wreg free
 12671                           
 12672                           ;I2C_Support.c: 120: I2C_Write((Device << 1) | 0);
 12673  00343A  5015               	movf	DS3231_Read_Alarm_Time@Device,w,c
 12674  00343C  2415               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 12675  00343E  EC0E  F01B         	call	_I2C_Write
 12676                           
 12677                           ;I2C_Support.c: 121: I2C_Write(Address);
 12678  003442  5014               	movf	DS3231_Read_Alarm_Time@Address,w,c
 12679  003444  EC0E  F01B         	call	_I2C_Write
 12680                           
 12681                           ;I2C_Support.c: 122: I2C_ReStart();
 12682  003448  EC44  F01D         	call	_I2C_ReStart	;wreg free
 12683                           
 12684                           ;I2C_Support.c: 123: I2C_Write((Device << 1) | 1);
 12685  00344C  80D8               	bsf	status,0,c
 12686  00344E  3415               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 12687  003450  EC0E  F01B         	call	_I2C_Write
 12688                           
 12689                           ;I2C_Support.c: 124: alarm_second = I2C_Read(1);
 12690  003454  0E01               	movlw	1
 12691  003456  ECAC  F01A         	call	_I2C_Read
 12692  00345A  6E5C               	movwf	_alarm_second,c
 12693                           
 12694                           ;I2C_Support.c: 125: alarm_minute = I2C_Read(1);
 12695  00345C  0E01               	movlw	1
 12696  00345E  ECAC  F01A         	call	_I2C_Read
 12697  003462  6E5B               	movwf	_alarm_minute,c
 12698                           
 12699                           ;I2C_Support.c: 126: alarm_hour = I2C_Read(1);
 12700  003464  0E01               	movlw	1
 12701  003466  ECAC  F01A         	call	_I2C_Read
 12702  00346A  6E5A               	movwf	_alarm_hour,c
 12703                           
 12704                           ;I2C_Support.c: 127: alarm_date = I2C_Read(0);
 12705  00346C  0E00               	movlw	0
 12706  00346E  ECAC  F01A         	call	_I2C_Read
 12707  003472  6E59               	movwf	_alarm_date,c
 12708                           
 12709                           ;I2C_Support.c: 128: I2C_Stop();
 12710  003474  EC91  F01D         	call	_I2C_Stop	;wreg free
 12711  003478  0012               	return		;funcret
 12712  00347A                     __end_of_DS3231_Read_Alarm_Time:
 12713                           	opt stack 0
 12714                           tblptru	equ	0xFF8
 12715                           tblptrh	equ	0xFF7
 12716                           tblptrl	equ	0xFF6
 12717                           tablat	equ	0xFF5
 12718                           prodh	equ	0xFF4
 12719                           prodl	equ	0xFF3
 12720                           intcon	equ	0xFF2
 12721                           intcon2	equ	0xFF1
 12722                           postinc0	equ	0xFEE
 12723                           wreg	equ	0xFE8
 12724                           postdec1	equ	0xFE5
 12725                           fsr1l	equ	0xFE1
 12726                           indf2	equ	0xFDF
 12727                           postinc2	equ	0xFDE
 12728                           fsr2h	equ	0xFDA
 12729                           fsr2l	equ	0xFD9
 12730                           status	equ	0xFD8
 12731                           
 12732 ;; *************** function _Do_Beep_Good *****************
 12733 ;; Defined at:
 12734 ;;		line 73 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
 12735 ;; Parameters:    Size  Location     Type
 12736 ;;		None
 12737 ;; Auto vars:     Size  Location     Type
 12738 ;;		None
 12739 ;; Return value:  Size  Location     Type
 12740 ;;		None               void
 12741 ;; Registers used:
 12742 ;;		wreg, status,2, cstack
 12743 ;; Tracked objects:
 12744 ;;		On entry : 0/0
 12745 ;;		On exit  : 0/0
 12746 ;;		Unchanged: 0/0
 12747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12752 ;;Total ram usage:        0 bytes
 12753 ;; Hardware stack levels used:    1
 12754 ;; Hardware stack levels required when called:    4
 12755 ;; This function calls:
 12756 ;;		_Activate_Buzzer_2KHz
 12757 ;; This function is called by:
 12758 ;;		_main
 12759 ;;		_Do_Setup_Alarm_Time
 12760 ;;		_Do_Setup_Heater_Temp
 12761 ;;		_Do_Setup_Time
 12762 ;; This function uses a non-reentrant model
 12763 ;;
 12764                           
 12765                           	psect	text65
 12766  003C22                     __ptext65:
 12767                           	opt stack 0
 12768  003C22                     _Do_Beep_Good:
 12769                           	opt stack 25
 12770                           
 12771                           ;utils.c: 75: Activate_Buzzer_2KHz();
 12772                           
 12773                           ;incstack = 0
 12774  003C22  EC7F  F01D         	call	_Activate_Buzzer_2KHz	;wreg free
 12775  003C26  0012               	return		;funcret
 12776  003C28                     __end_of_Do_Beep_Good:
 12777                           	opt stack 0
 12778                           tblptru	equ	0xFF8
 12779                           tblptrh	equ	0xFF7
 12780                           tblptrl	equ	0xFF6
 12781                           tablat	equ	0xFF5
 12782                           prodh	equ	0xFF4
 12783                           prodl	equ	0xFF3
 12784                           intcon	equ	0xFF2
 12785                           intcon2	equ	0xFF1
 12786                           postinc0	equ	0xFEE
 12787                           wreg	equ	0xFE8
 12788                           postdec1	equ	0xFE5
 12789                           fsr1l	equ	0xFE1
 12790                           indf2	equ	0xFDF
 12791                           postinc2	equ	0xFDE
 12792                           fsr2h	equ	0xFDA
 12793                           fsr2l	equ	0xFD9
 12794                           status	equ	0xFD8
 12795                           
 12796 ;; *************** function _Activate_Buzzer_2KHz *****************
 12797 ;; Defined at:
 12798 ;;		line 106 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;		None
 12801 ;; Auto vars:     Size  Location     Type
 12802 ;;		None
 12803 ;; Return value:  Size  Location     Type
 12804 ;;		None               void
 12805 ;; Registers used:
 12806 ;;		wreg, status,2
 12807 ;; Tracked objects:
 12808 ;;		On entry : 0/0
 12809 ;;		On exit  : 0/0
 12810 ;;		Unchanged: 0/0
 12811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;Total ram usage:        0 bytes
 12817 ;; Hardware stack levels used:    1
 12818 ;; Hardware stack levels required when called:    3
 12819 ;; This function calls:
 12820 ;;		Nothing
 12821 ;; This function is called by:
 12822 ;;		_Do_Beep_Good
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           	psect	text66
 12827  003AFE                     __ptext66:
 12828                           	opt stack 0
 12829  003AFE                     _Activate_Buzzer_2KHz:
 12830                           	opt stack 25
 12831                           
 12832                           ;utils.c: 109: PR2 = 0b11111001 ;
 12833                           
 12834                           ;incstack = 0
 12835  003AFE  0EF9               	movlw	249
 12836  003B00  6ECB               	movwf	4043,c	;volatile
 12837                           
 12838                           ;utils.c: 110: T2CON = 0b00000101 ;
 12839  003B02  0E05               	movlw	5
 12840  003B04  6ECA               	movwf	4042,c	;volatile
 12841                           
 12842                           ;utils.c: 111: CCPR2L = 0b01111100 ;
 12843  003B06  0E7C               	movlw	124
 12844  003B08  6EBB               	movwf	4027,c	;volatile
 12845                           
 12846                           ;utils.c: 112: CCP2CON = 0b00111100 ;
 12847  003B0A  0E3C               	movlw	60
 12848  003B0C  6EBA               	movwf	4026,c	;volatile
 12849  003B0E  0012               	return		;funcret
 12850  003B10                     __end_of_Activate_Buzzer_2KHz:
 12851                           	opt stack 0
 12852                           tblptru	equ	0xFF8
 12853                           tblptrh	equ	0xFF7
 12854                           tblptrl	equ	0xFF6
 12855                           tablat	equ	0xFF5
 12856                           prodh	equ	0xFF4
 12857                           prodl	equ	0xFF3
 12858                           intcon	equ	0xFF2
 12859                           intcon2	equ	0xFF1
 12860                           postinc0	equ	0xFEE
 12861                           wreg	equ	0xFE8
 12862                           postdec1	equ	0xFE5
 12863                           fsr1l	equ	0xFE1
 12864                           indf2	equ	0xFDF
 12865                           postinc2	equ	0xFDE
 12866                           fsr2h	equ	0xFDA
 12867                           fsr2l	equ	0xFD9
 12868                           status	equ	0xFD8
 12869                           
 12870 ;; *************** function _Do_Beep_Bad *****************
 12871 ;; Defined at:
 12872 ;;		line 78 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
 12873 ;; Parameters:    Size  Location     Type
 12874 ;;		None
 12875 ;; Auto vars:     Size  Location     Type
 12876 ;;		None
 12877 ;; Return value:  Size  Location     Type
 12878 ;;		None               void
 12879 ;; Registers used:
 12880 ;;		wreg, status,2, cstack
 12881 ;; Tracked objects:
 12882 ;;		On entry : 0/0
 12883 ;;		On exit  : 0/0
 12884 ;;		Unchanged: 0/0
 12885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12890 ;;Total ram usage:        0 bytes
 12891 ;; Hardware stack levels used:    1
 12892 ;; Hardware stack levels required when called:    4
 12893 ;; This function calls:
 12894 ;;		_Activate_Buzzer_500Hz
 12895 ;; This function is called by:
 12896 ;;		_main
 12897 ;;		_Do_Setup_Alarm_Time
 12898 ;;		_Do_Setup_Heater_Temp
 12899 ;;		_Do_Setup_Time
 12900 ;; This function uses a non-reentrant model
 12901 ;;
 12902                           
 12903                           	psect	text67
 12904  003C28                     __ptext67:
 12905                           	opt stack 0
 12906  003C28                     _Do_Beep_Bad:
 12907                           	opt stack 25
 12908                           
 12909                           ;utils.c: 80: Activate_Buzzer_500Hz();
 12910                           
 12911                           ;incstack = 0
 12912  003C28  EC88  F01D         	call	_Activate_Buzzer_500Hz	;wreg free
 12913  003C2C  0012               	return		;funcret
 12914  003C2E                     __end_of_Do_Beep_Bad:
 12915                           	opt stack 0
 12916                           tblptru	equ	0xFF8
 12917                           tblptrh	equ	0xFF7
 12918                           tblptrl	equ	0xFF6
 12919                           tablat	equ	0xFF5
 12920                           prodh	equ	0xFF4
 12921                           prodl	equ	0xFF3
 12922                           intcon	equ	0xFF2
 12923                           intcon2	equ	0xFF1
 12924                           postinc0	equ	0xFEE
 12925                           wreg	equ	0xFE8
 12926                           postdec1	equ	0xFE5
 12927                           fsr1l	equ	0xFE1
 12928                           indf2	equ	0xFDF
 12929                           postinc2	equ	0xFDE
 12930                           fsr2h	equ	0xFDA
 12931                           fsr2l	equ	0xFD9
 12932                           status	equ	0xFD8
 12933                           
 12934 ;; *************** function _Activate_Buzzer_500Hz *****************
 12935 ;; Defined at:
 12936 ;;		line 97 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
 12937 ;; Parameters:    Size  Location     Type
 12938 ;;		None
 12939 ;; Auto vars:     Size  Location     Type
 12940 ;;		None
 12941 ;; Return value:  Size  Location     Type
 12942 ;;		None               void
 12943 ;; Registers used:
 12944 ;;		wreg, status,2
 12945 ;; Tracked objects:
 12946 ;;		On entry : 0/0
 12947 ;;		On exit  : 0/0
 12948 ;;		Unchanged: 0/0
 12949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12954 ;;Total ram usage:        0 bytes
 12955 ;; Hardware stack levels used:    1
 12956 ;; Hardware stack levels required when called:    3
 12957 ;; This function calls:
 12958 ;;		Nothing
 12959 ;; This function is called by:
 12960 ;;		_Do_Beep_Bad
 12961 ;; This function uses a non-reentrant model
 12962 ;;
 12963                           
 12964                           	psect	text68
 12965  003B10                     __ptext68:
 12966                           	opt stack 0
 12967  003B10                     _Activate_Buzzer_500Hz:
 12968                           	opt stack 25
 12969                           
 12970                           ;utils.c: 100: PR2 = 0b11111001 ;
 12971                           
 12972                           ;incstack = 0
 12973  003B10  0EF9               	movlw	249
 12974  003B12  6ECB               	movwf	4043,c	;volatile
 12975                           
 12976                           ;utils.c: 101: T2CON = 0b00000111 ;
 12977  003B14  0E07               	movlw	7
 12978  003B16  6ECA               	movwf	4042,c	;volatile
 12979                           
 12980                           ;utils.c: 102: CCPR2L = 0b01111100 ;
 12981  003B18  0E7C               	movlw	124
 12982  003B1A  6EBB               	movwf	4027,c	;volatile
 12983                           
 12984                           ;utils.c: 103: CCP2CON = 0b00111100 ;
 12985  003B1C  0E3C               	movlw	60
 12986  003B1E  6EBA               	movwf	4026,c	;volatile
 12987  003B20  0012               	return		;funcret
 12988  003B22                     __end_of_Activate_Buzzer_500Hz:
 12989                           	opt stack 0
 12990                           tblptru	equ	0xFF8
 12991                           tblptrh	equ	0xFF7
 12992                           tblptrl	equ	0xFF6
 12993                           tablat	equ	0xFF5
 12994                           prodh	equ	0xFF4
 12995                           prodl	equ	0xFF3
 12996                           intcon	equ	0xFF2
 12997                           intcon2	equ	0xFF1
 12998                           postinc0	equ	0xFEE
 12999                           wreg	equ	0xFE8
 13000                           postdec1	equ	0xFE5
 13001                           fsr1l	equ	0xFE1
 13002                           indf2	equ	0xFDF
 13003                           postinc2	equ	0xFDE
 13004                           fsr2h	equ	0xFDA
 13005                           fsr2l	equ	0xFD9
 13006                           status	equ	0xFD8
 13007                           
 13008 ;; *************** function _Decrease_Alarm_Time *****************
 13009 ;; Defined at:
 13010 ;;		line 89 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Alarm_Time.c"
 13011 ;; Parameters:    Size  Location     Type
 13012 ;;		None
 13013 ;; Auto vars:     Size  Location     Type
 13014 ;;		None
 13015 ;; Return value:  Size  Location     Type
 13016 ;;		None               void
 13017 ;; Registers used:
 13018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13019 ;; Tracked objects:
 13020 ;;		On entry : 0/0
 13021 ;;		On exit  : 0/0
 13022 ;;		Unchanged: 0/0
 13023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13028 ;;Total ram usage:        0 bytes
 13029 ;; Hardware stack levels used:    1
 13030 ;; Hardware stack levels required when called:   11
 13031 ;; This function calls:
 13032 ;;		_Update_Setup_Alarm_Time_Screen
 13033 ;; This function is called by:
 13034 ;;		_Do_Setup_Alarm_Time
 13035 ;; This function uses a non-reentrant model
 13036 ;;
 13037                           
 13038                           	psect	text69
 13039  0033E0                     __ptext69:
 13040                           	opt stack 0
 13041  0033E0                     _Decrease_Alarm_Time:
 13042                           	opt stack 18
 13043                           
 13044                           ;Setup_Alarm_Time.c: 91: switch (Select_Alarm_Field)
 13045                           
 13046                           ;incstack = 0
 13047  0033E0  D018               	goto	l9156
 13048  0033E2                     l9136:
 13049                           
 13050                           ;Setup_Alarm_Time.c: 94: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 13051  0033E2  5064               	movf	_setup_alarm_hour,w,c
 13052  0033E4  A4D8               	btfss	status,2,c
 13053  0033E6  D003               	goto	l9140
 13054  0033E8  0E17               	movlw	23
 13055  0033EA  6E64               	movwf	_setup_alarm_hour,c
 13056  0033EC  D01D               	goto	l9158
 13057  0033EE                     l9140:
 13058                           
 13059                           ;Setup_Alarm_Time.c: 95: else --setup_alarm_hour;
 13060  0033EE  0664               	decf	_setup_alarm_hour,f,c
 13061                           
 13062                           ;Setup_Alarm_Time.c: 96: break;
 13063  0033F0  D01B               	goto	l9158
 13064  0033F2                     l9142:
 13065                           
 13066                           ;Setup_Alarm_Time.c: 100: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 13067  0033F2  5065               	movf	_setup_alarm_minute,w,c
 13068  0033F4  A4D8               	btfss	status,2,c
 13069  0033F6  D003               	goto	l9146
 13070  0033F8  0E3B               	movlw	59
 13071  0033FA  6E65               	movwf	_setup_alarm_minute,c
 13072  0033FC  D015               	goto	l9158
 13073  0033FE                     l9146:
 13074                           
 13075                           ;Setup_Alarm_Time.c: 101: else --setup_alarm_minute;
 13076  0033FE  0665               	decf	_setup_alarm_minute,f,c
 13077                           
 13078                           ;Setup_Alarm_Time.c: 102: break;
 13079  003400  D013               	goto	l9158
 13080  003402                     l9148:
 13081                           
 13082                           ;Setup_Alarm_Time.c: 106: if (setup_alarm_second == 0) setup_alarm_second = 59;
 13083  003402  5066               	movf	_setup_alarm_second,w,c
 13084  003404  A4D8               	btfss	status,2,c
 13085  003406  D003               	goto	l9152
 13086  003408  0E3B               	movlw	59
 13087  00340A  6E66               	movwf	_setup_alarm_second,c
 13088  00340C  D00D               	goto	l9158
 13089  00340E                     l9152:
 13090                           
 13091                           ;Setup_Alarm_Time.c: 107: else --setup_alarm_second;
 13092  00340E  0666               	decf	_setup_alarm_second,f,c
 13093                           
 13094                           ;Setup_Alarm_Time.c: 112: }
 13095                           
 13096                           ;Setup_Alarm_Time.c: 111: break;
 13097                           
 13098                           ;Setup_Alarm_Time.c: 110: default:
 13099                           
 13100                           ;Setup_Alarm_Time.c: 108: break;
 13101  003410  D00B               	goto	l9158
 13102  003412                     l9156:
 13103  003412  5056               	movf	_Select_Alarm_Field,w,c
 13104                           
 13105                           ; Switch size 1, requested type "space"
 13106                           ; Number of cases is 3, Range of values is 0 to 2
 13107                           ; switch strategies available:
 13108                           ; Name         Instructions Cycles
 13109                           ; simple_byte           10     6 (average)
 13110                           ;	Chosen strategy is simple_byte
 13111  003414  0A00               	xorlw	0	; case 0
 13112  003416  B4D8               	btfsc	status,2,c
 13113  003418  D7E4               	goto	l9136
 13114  00341A  0A01               	xorlw	1	; case 1
 13115  00341C  B4D8               	btfsc	status,2,c
 13116  00341E  D7E9               	goto	l9142
 13117  003420  0A03               	xorlw	3	; case 2
 13118  003422  B4D8               	btfsc	status,2,c
 13119  003424  D7EE               	goto	l9148
 13120  003426  D000               	goto	l9158
 13121  003428                     l9158:
 13122                           
 13123                           ;Setup_Alarm_Time.c: 113: Update_Setup_Alarm_Time_Screen();
 13124  003428  EC07  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 13125  00342C  0012               	return		;funcret
 13126  00342E                     __end_of_Decrease_Alarm_Time:
 13127                           	opt stack 0
 13128                           tblptru	equ	0xFF8
 13129                           tblptrh	equ	0xFF7
 13130                           tblptrl	equ	0xFF6
 13131                           tablat	equ	0xFF5
 13132                           prodh	equ	0xFF4
 13133                           prodl	equ	0xFF3
 13134                           intcon	equ	0xFF2
 13135                           intcon2	equ	0xFF1
 13136                           postinc0	equ	0xFEE
 13137                           wreg	equ	0xFE8
 13138                           postdec1	equ	0xFE5
 13139                           fsr1l	equ	0xFE1
 13140                           indf2	equ	0xFDF
 13141                           postinc2	equ	0xFDE
 13142                           fsr2h	equ	0xFDA
 13143                           fsr2l	equ	0xFD9
 13144                           status	equ	0xFD8
 13145                           
 13146 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 13147 ;; Defined at:
 13148 ;;		line 167 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Setup_Alarm_Time.c
      +"
 13149 ;; Parameters:    Size  Location     Type
 13150 ;;		None
 13151 ;; Auto vars:     Size  Location     Type
 13152 ;;		None
 13153 ;; Return value:  Size  Location     Type
 13154 ;;		None               void
 13155 ;; Registers used:
 13156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13157 ;; Tracked objects:
 13158 ;;		On entry : 0/0
 13159 ;;		On exit  : 0/0
 13160 ;;		Unchanged: 0/0
 13161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13166 ;;Total ram usage:        0 bytes
 13167 ;; Hardware stack levels used:    1
 13168 ;; Hardware stack levels required when called:   10
 13169 ;; This function calls:
 13170 ;;		___awdiv
 13171 ;;		___awmod
 13172 ;;		_drawtext
 13173 ;;		_printf
 13174 ;; This function is called by:
 13175 ;;		_Do_Setup_Alarm_Time
 13176 ;;		_Increase_Alarm_Time
 13177 ;;		_Decrease_Alarm_Time
 13178 ;; This function uses a non-reentrant model
 13179 ;;
 13180                           
 13181                           	psect	text70
 13182  00200E                     __ptext70:
 13183                           	opt stack 0
 13184  00200E                     _Update_Setup_Alarm_Time_Screen:
 13185                           	opt stack 19
 13186                           
 13187                           ;Setup_Alarm_Time.c: 169: printf ("%x:%x:%x\r\n", setup_alarm_hour,setup_alarm_minute,se
      +                          tup_alarm_second);
 13188                           
 13189                           ;incstack = 0
 13190  00200E  0EA0               	movlw	low STR_30
 13191  002010  6E1D               	movwf	printf@f,c
 13192  002012  0EFF               	movlw	high STR_30
 13193  002014  6E1E               	movwf	printf@f+1,c
 13194  002016  C064  F01F         	movff	_setup_alarm_hour,?_printf+2
 13195  00201A  6A20               	clrf	?_printf+3,c
 13196  00201C  C065  F021         	movff	_setup_alarm_minute,?_printf+4
 13197  002020  6A22               	clrf	?_printf+5,c
 13198  002022  C066  F023         	movff	_setup_alarm_second,?_printf+6
 13199  002026  6A24               	clrf	?_printf+7,c
 13200  002028  ECE7  F004         	call	_printf	;wreg free
 13201                           
 13202                           ;Setup_Alarm_Time.c: 170: setup_alarm_time[0] = (setup_alarm_hour / 10) + '0';
 13203  00202C  C064  F017         	movff	_setup_alarm_hour,___awdiv@dividend
 13204  002030  6A18               	clrf	___awdiv@dividend+1,c
 13205  002032  0E00               	movlw	0
 13206  002034  6E1A               	movwf	___awdiv@divisor+1,c
 13207  002036  0E0A               	movlw	10
 13208  002038  6E19               	movwf	___awdiv@divisor,c
 13209  00203A  EC27  F015         	call	___awdiv	;wreg free
 13210  00203E  5017               	movf	?___awdiv,w,c
 13211  002040  0F30               	addlw	48
 13212  002042  0100               	movlb	0	; () banked
 13213  002044  6F94               	movwf	_setup_alarm_time& (0+255),b
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;Setup_Alarm_Time.c: 171: setup_alarm_time[1] = (setup_alarm_hour % 10) + '0';
 13217  002046  C064  F0FB         	movff	_setup_alarm_hour,___awmod@dividend
 13218  00204A  0100               	movlb	0	; () banked
 13219  00204C  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
 13220  00204E  0E00               	movlw	0
 13221  002050  0100               	movlb	0	; () banked
 13222  002052  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
 13223  002054  0E0A               	movlw	10
 13224  002056  6FFD               	movwf	___awmod@divisor& (0+255),b
 13225  002058  EC31  F014         	call	___awmod	;wreg free
 13226  00205C  0100               	movlb	0	; () banked
 13227  00205E  51FB               	movf	?___awmod& (0+255),w,b
 13228  002060  0F30               	addlw	48
 13229  002062  0100               	movlb	0	; () banked
 13230  002064  6F95               	movwf	(_setup_alarm_time+1)& (0+255),b
 13231                           
 13232                           ; BSR set to: 0
 13233                           ;Setup_Alarm_Time.c: 172: setup_alarm_time[3] = (setup_alarm_minute / 10) + '0';
 13234  002066  C065  F017         	movff	_setup_alarm_minute,___awdiv@dividend
 13235  00206A  6A18               	clrf	___awdiv@dividend+1,c
 13236  00206C  0E00               	movlw	0
 13237  00206E  6E1A               	movwf	___awdiv@divisor+1,c
 13238  002070  0E0A               	movlw	10
 13239  002072  6E19               	movwf	___awdiv@divisor,c
 13240  002074  EC27  F015         	call	___awdiv	;wreg free
 13241  002078  5017               	movf	?___awdiv,w,c
 13242  00207A  0F30               	addlw	48
 13243  00207C  0100               	movlb	0	; () banked
 13244  00207E  6F97               	movwf	(_setup_alarm_time+3)& (0+255),b
 13245                           
 13246                           ; BSR set to: 0
 13247                           ;Setup_Alarm_Time.c: 173: setup_alarm_time[4] = (setup_alarm_minute % 10) + '0';
 13248  002080  C065  F0FB         	movff	_setup_alarm_minute,___awmod@dividend
 13249  002084  0100               	movlb	0	; () banked
 13250  002086  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
 13251  002088  0E00               	movlw	0
 13252  00208A  0100               	movlb	0	; () banked
 13253  00208C  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
 13254  00208E  0E0A               	movlw	10
 13255  002090  6FFD               	movwf	___awmod@divisor& (0+255),b
 13256  002092  EC31  F014         	call	___awmod	;wreg free
 13257  002096  0100               	movlb	0	; () banked
 13258  002098  51FB               	movf	?___awmod& (0+255),w,b
 13259  00209A  0F30               	addlw	48
 13260  00209C  0100               	movlb	0	; () banked
 13261  00209E  6F98               	movwf	(_setup_alarm_time+4)& (0+255),b
 13262                           
 13263                           ; BSR set to: 0
 13264                           ;Setup_Alarm_Time.c: 174: setup_alarm_time[6] = (setup_alarm_second / 10) + '0';
 13265  0020A0  C066  F017         	movff	_setup_alarm_second,___awdiv@dividend
 13266  0020A4  6A18               	clrf	___awdiv@dividend+1,c
 13267  0020A6  0E00               	movlw	0
 13268  0020A8  6E1A               	movwf	___awdiv@divisor+1,c
 13269  0020AA  0E0A               	movlw	10
 13270  0020AC  6E19               	movwf	___awdiv@divisor,c
 13271  0020AE  EC27  F015         	call	___awdiv	;wreg free
 13272  0020B2  5017               	movf	?___awdiv,w,c
 13273  0020B4  0F30               	addlw	48
 13274  0020B6  0100               	movlb	0	; () banked
 13275  0020B8  6F9A               	movwf	(_setup_alarm_time+6)& (0+255),b
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;Setup_Alarm_Time.c: 175: setup_alarm_time[7] = (setup_alarm_second % 10) + '0';
 13279  0020BA  C066  F0FB         	movff	_setup_alarm_second,___awmod@dividend
 13280  0020BE  0100               	movlb	0	; () banked
 13281  0020C0  6BFC               	clrf	(___awmod@dividend+1)& (0+255),b
 13282  0020C2  0E00               	movlw	0
 13283  0020C4  0100               	movlb	0	; () banked
 13284  0020C6  6FFE               	movwf	(___awmod@divisor+1)& (0+255),b
 13285  0020C8  0E0A               	movlw	10
 13286  0020CA  6FFD               	movwf	___awmod@divisor& (0+255),b
 13287  0020CC  EC31  F014         	call	___awmod	;wreg free
 13288  0020D0  0100               	movlb	0	; () banked
 13289  0020D2  51FB               	movf	?___awmod& (0+255),w,b
 13290  0020D4  0F30               	addlw	48
 13291  0020D6  0100               	movlb	0	; () banked
 13292  0020D8  6F9B               	movwf	(_setup_alarm_time+7)& (0+255),b
 13293                           
 13294                           ;Setup_Alarm_Time.c: 176: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 13295  0020DA  0E34               	movlw	52
 13296  0020DC  6E39               	movwf	drawtext@y,c
 13297  0020DE  0E94               	movlw	low _setup_alarm_time
 13298  0020E0  6E3A               	movwf	drawtext@_text,c
 13299  0020E2  0E00               	movlw	high _setup_alarm_time
 13300  0020E4  6E3B               	movwf	drawtext@_text+1,c
 13301  0020E6  0E07               	movlw	7
 13302  0020E8  6E3D               	movwf	drawtext@color+1,c
 13303  0020EA  683C               	setf	drawtext@color,c
 13304  0020EC  0E00               	movlw	0
 13305  0020EE  6E3F               	movwf	drawtext@bg+1,c
 13306  0020F0  0E00               	movlw	0
 13307  0020F2  6E3E               	movwf	drawtext@bg,c
 13308  0020F4  0E02               	movlw	2
 13309  0020F6  6E40               	movwf	drawtext@size,c
 13310  0020F8  0E0F               	movlw	15
 13311  0020FA  EC64  F011         	call	_drawtext
 13312  0020FE  0012               	return		;funcret
 13313  002100                     __end_of_Update_Setup_Alarm_Time_Screen:
 13314                           	opt stack 0
 13315                           tblptru	equ	0xFF8
 13316                           tblptrh	equ	0xFF7
 13317                           tblptrl	equ	0xFF6
 13318                           tablat	equ	0xFF5
 13319                           prodh	equ	0xFF4
 13320                           prodl	equ	0xFF3
 13321                           intcon	equ	0xFF2
 13322                           intcon2	equ	0xFF1
 13323                           postinc0	equ	0xFEE
 13324                           wreg	equ	0xFE8
 13325                           postdec1	equ	0xFE5
 13326                           fsr1l	equ	0xFE1
 13327                           indf2	equ	0xFDF
 13328                           postinc2	equ	0xFDE
 13329                           fsr2h	equ	0xFDA
 13330                           fsr2l	equ	0xFD9
 13331                           status	equ	0xFD8
 13332                           
 13333 ;; *************** function _drawtext *****************
 13334 ;; Defined at:
 13335 ;;		line 474 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 13336 ;; Parameters:    Size  Location     Type
 13337 ;;  x               1    wreg     unsigned char 
 13338 ;;  y               1   56[COMRAM] unsigned char 
 13339 ;;  _text           2   57[COMRAM] PTR unsigned char 
 13340 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 13341 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 13342 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 13343 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 13344 ;;		 -> tempC(4), 
 13345 ;;  color           2   59[COMRAM] unsigned int 
 13346 ;;  bg              2   61[COMRAM] unsigned int 
 13347 ;;  size            1   63[COMRAM] unsigned char 
 13348 ;; Auto vars:     Size  Location     Type
 13349 ;;  x               1   66[COMRAM] unsigned char 
 13350 ;;  i               2   69[COMRAM] unsigned int 
 13351 ;;  textsize        2   67[COMRAM] unsigned int 
 13352 ;;  cursor_x        1   72[COMRAM] unsigned char 
 13353 ;;  cursor_y        1   71[COMRAM] unsigned char 
 13354 ;; Return value:  Size  Location     Type
 13355 ;;		None               void
 13356 ;; Registers used:
 13357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13358 ;; Tracked objects:
 13359 ;;		On entry : 0/0
 13360 ;;		On exit  : 0/0
 13361 ;;		Unchanged: 0/0
 13362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13363 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13364 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13365 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13366 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13367 ;;Total ram usage:       17 bytes
 13368 ;; Hardware stack levels used:    1
 13369 ;; Hardware stack levels required when called:    9
 13370 ;; This function calls:
 13371 ;;		_drawChar
 13372 ;;		_strlen
 13373 ;; This function is called by:
 13374 ;;		_Initialize_Screen
 13375 ;;		_Update_Screen
 13376 ;;		_Initialize_Setup_Alarm_Time_Screen
 13377 ;;		_Update_Setup_Alarm_Time_Screen
 13378 ;;		_Initialize_Setup_Heater_Screen
 13379 ;;		_Update_Setup_Heater_Screen
 13380 ;;		_Initialize_Setup_Time_Screen
 13381 ;;		_Update_Setup_Time_Screen
 13382 ;; This function uses a non-reentrant model
 13383 ;;
 13384                           
 13385                           	psect	text71
 13386  0022C8                     __ptext71:
 13387                           	opt stack 0
 13388  0022C8                     _drawtext:
 13389                           	opt stack 20
 13390                           
 13391                           ;incstack = 0
 13392                           ;drawtext@x stored from wreg
 13393  0022C8  6E43               	movwf	drawtext@x,c
 13394                           
 13395                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
 13396                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
 13397                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
 13398  0022CA  C043  F049         	movff	drawtext@x,drawtext@cursor_x
 13399  0022CE  C039  F048         	movff	drawtext@y,drawtext@cursor_y
 13400                           
 13401                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
 13402  0022D2  C03A  F011         	movff	drawtext@_text,strlen@s
 13403  0022D6  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 13404  0022DA  ECEF  F01A         	call	_strlen	;wreg free
 13405  0022DE  C011  F044         	movff	?_strlen,drawtext@textsize
 13406  0022E2  C012  F045         	movff	?_strlen+1,drawtext@textsize+1
 13407                           
 13408                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
 13409  0022E6  0E00               	movlw	0
 13410  0022E8  6E47               	movwf	drawtext@i+1,c
 13411  0022EA  0E00               	movlw	0
 13412  0022EC  6E46               	movwf	drawtext@i,c
 13413  0022EE  D056               	goto	l8482
 13414  0022F0                     l8456:
 13415                           
 13416                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
 13417  0022F0  0100               	movlb	0	; () banked
 13418  0022F2  5181               	movf	_wrap& (0+255),w,b
 13419  0022F4  0100               	movlb	0	; () banked
 13420  0022F6  B4D8               	btfsc	status,2,c
 13421  0022F8  D02C               	goto	l8472
 13422                           
 13423                           ; BSR set to: 0
 13424  0022FA  5040               	movf	drawtext@size,w,c
 13425  0022FC  0D05               	mullw	5
 13426  0022FE  5049               	movf	drawtext@cursor_x,w,c
 13427  002300  6E41               	movwf	??_drawtext& (0+255),c
 13428  002302  6A42               	clrf	(??_drawtext+1)& (0+255),c
 13429  002304  50F3               	movf	prodl,w,c
 13430  002306  2641               	addwf	??_drawtext,f,c
 13431  002308  50F4               	movf	prodh,w,c
 13432  00230A  2242               	addwfc	??_drawtext+1,f,c
 13433  00230C  BE42               	btfsc	??_drawtext+1,7,c
 13434  00230E  D021               	goto	l8472
 13435  002310  5042               	movf	??_drawtext+1,w,c
 13436  002312  E104               	bnz	u5990
 13437  002314  0E81               	movlw	129
 13438  002316  5C41               	subwf	??_drawtext,w,c
 13439  002318  A0D8               	btfss	status,0,c
 13440  00231A  D01B               	goto	l8472
 13441  00231C                     u5990:
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;ST7735_TFT.c: 482: cursor_x = 0;
 13445  00231C  0E00               	movlw	0
 13446  00231E  6E49               	movwf	drawtext@cursor_x,c
 13447                           
 13448                           ; BSR set to: 0
 13449                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
 13450  002320  5040               	movf	drawtext@size,w,c
 13451  002322  0D07               	mullw	7
 13452  002324  50F3               	movf	prodl,w,c
 13453  002326  2448               	addwf	drawtext@cursor_y,w,c
 13454  002328  0F03               	addlw	3
 13455  00232A  6E48               	movwf	drawtext@cursor_y,c
 13456                           
 13457                           ; BSR set to: 0
 13458                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
 13459  00232C  0EA0               	movlw	160
 13460  00232E  6448               	cpfsgt	drawtext@cursor_y,c
 13461  002330  D003               	goto	l8468
 13462                           
 13463                           ; BSR set to: 0
 13464  002332  0EA0               	movlw	160
 13465  002334  6E48               	movwf	drawtext@cursor_y,c
 13466  002336  D000               	goto	l8468
 13467  002338                     l8468:
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
 13471  002338  5046               	movf	drawtext@i,w,c
 13472  00233A  243A               	addwf	drawtext@_text,w,c
 13473  00233C  6ED9               	movwf	fsr2l,c
 13474  00233E  5047               	movf	drawtext@i+1,w,c
 13475  002340  203B               	addwfc	drawtext@_text+1,w,c
 13476  002342  6EDA               	movwf	fsr2h,c
 13477  002344  0E20               	movlw	32
 13478  002346  18DE               	xorwf	postinc2,w,c
 13479  002348  B4D8               	btfsc	status,2,c
 13480  00234A  D025               	goto	l8480
 13481  00234C  D002               	goto	l8472
 13482                           
 13483                           ; BSR set to: 0
 13484  00234E  D023               	goto	l8480
 13485                           
 13486                           ; BSR set to: 0
 13487  002350  D000               	goto	l8472
 13488  002352                     l8472:
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 13492  002352  C048  F02E         	movff	drawtext@cursor_y,drawChar@y
 13493  002356  5046               	movf	drawtext@i,w,c
 13494  002358  243A               	addwf	drawtext@_text,w,c
 13495  00235A  6ED9               	movwf	fsr2l,c
 13496  00235C  5047               	movf	drawtext@i+1,w,c
 13497  00235E  203B               	addwfc	drawtext@_text+1,w,c
 13498  002360  6EDA               	movwf	fsr2h,c
 13499  002362  50DF               	movf	indf2,w,c
 13500  002364  6E2F               	movwf	drawChar@c,c
 13501  002366  C03C  F030         	movff	drawtext@color,drawChar@color
 13502  00236A  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 13503  00236E  C03E  F032         	movff	drawtext@bg,drawChar@bg
 13504  002372  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 13505  002376  C040  F034         	movff	drawtext@size,drawChar@size
 13506  00237A  5049               	movf	drawtext@cursor_x,w,c
 13507  00237C  EC5A  F00C         	call	_drawChar
 13508                           
 13509                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
 13510  002380  5040               	movf	drawtext@size,w,c
 13511  002382  0D06               	mullw	6
 13512  002384  50F3               	movf	prodl,w,c
 13513  002386  2449               	addwf	drawtext@cursor_x,w,c
 13514  002388  6E49               	movwf	drawtext@cursor_x,c
 13515                           
 13516                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
 13517  00238A  0E80               	movlw	128
 13518  00238C  6449               	cpfsgt	drawtext@cursor_x,c
 13519  00238E  D003               	goto	l8480
 13520  002390  0E80               	movlw	128
 13521  002392  6E49               	movwf	drawtext@cursor_x,c
 13522  002394  D000               	goto	l8480
 13523  002396                     l8480:
 13524  002396  4A46               	infsnz	drawtext@i,f,c
 13525  002398  2A47               	incf	drawtext@i+1,f,c
 13526  00239A  D000               	goto	l8482
 13527  00239C                     l8482:
 13528  00239C  5044               	movf	drawtext@textsize,w,c
 13529  00239E  5C46               	subwf	drawtext@i,w,c
 13530  0023A0  5045               	movf	drawtext@textsize+1,w,c
 13531  0023A2  5847               	subwfb	drawtext@i+1,w,c
 13532  0023A4  A0D8               	btfss	status,0,c
 13533  0023A6  D7A4               	goto	l8456
 13534  0023A8  0012               	return		;funcret
 13535  0023AA                     __end_of_drawtext:
 13536                           	opt stack 0
 13537                           tblptru	equ	0xFF8
 13538                           tblptrh	equ	0xFF7
 13539                           tblptrl	equ	0xFF6
 13540                           tablat	equ	0xFF5
 13541                           prodh	equ	0xFF4
 13542                           prodl	equ	0xFF3
 13543                           intcon	equ	0xFF2
 13544                           intcon2	equ	0xFF1
 13545                           postinc0	equ	0xFEE
 13546                           wreg	equ	0xFE8
 13547                           postdec1	equ	0xFE5
 13548                           fsr1l	equ	0xFE1
 13549                           indf2	equ	0xFDF
 13550                           postinc2	equ	0xFDE
 13551                           fsr2h	equ	0xFDA
 13552                           fsr2l	equ	0xFD9
 13553                           status	equ	0xFD8
 13554                           
 13555 ;; *************** function _strlen *****************
 13556 ;; Defined at:
 13557 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 13558 ;; Parameters:    Size  Location     Type
 13559 ;;  s               2   16[COMRAM] PTR const unsigned char 
 13560 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 13561 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 13562 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 13563 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 13564 ;;		 -> tempC(4), 
 13565 ;; Auto vars:     Size  Location     Type
 13566 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 13567 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 13568 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 13569 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 13570 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 13571 ;;		 -> tempC(4), 
 13572 ;; Return value:  Size  Location     Type
 13573 ;;                  2   16[COMRAM] unsigned int 
 13574 ;; Registers used:
 13575 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13576 ;; Tracked objects:
 13577 ;;		On entry : 0/0
 13578 ;;		On exit  : 0/0
 13579 ;;		Unchanged: 0/0
 13580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13581 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13582 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13583 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13584 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13585 ;;Total ram usage:        6 bytes
 13586 ;; Hardware stack levels used:    1
 13587 ;; Hardware stack levels required when called:    3
 13588 ;; This function calls:
 13589 ;;		Nothing
 13590 ;; This function is called by:
 13591 ;;		_drawtext
 13592 ;; This function uses a non-reentrant model
 13593 ;;
 13594                           
 13595                           	psect	text72
 13596  0035DE                     __ptext72:
 13597                           	opt stack 0
 13598  0035DE                     _strlen:
 13599                           	opt stack 25
 13600                           
 13601                           ;incstack = 0
 13602  0035DE  C011  F015         	movff	strlen@s,strlen@cp
 13603  0035E2  C012  F016         	movff	strlen@s+1,strlen@cp+1
 13604  0035E6  D003               	goto	l8098
 13605  0035E8                     l8096:
 13606  0035E8  4A15               	infsnz	strlen@cp,f,c
 13607  0035EA  2A16               	incf	strlen@cp+1,f,c
 13608  0035EC  D000               	goto	l8098
 13609  0035EE                     l8098:
 13610  0035EE  C015  FFD9         	movff	strlen@cp,fsr2l
 13611  0035F2  C016  FFDA         	movff	strlen@cp+1,fsr2h
 13612  0035F6  50DF               	movf	indf2,w,c
 13613  0035F8  A4D8               	btfss	status,2,c
 13614  0035FA  D7F6               	goto	l8096
 13615  0035FC  C011  F013         	movff	strlen@s,??_strlen
 13616  003600  C012  F014         	movff	strlen@s+1,??_strlen+1
 13617  003604  1E13               	comf	??_strlen,f,c
 13618  003606  1E14               	comf	??_strlen+1,f,c
 13619  003608  4A13               	infsnz	??_strlen,f,c
 13620  00360A  2A14               	incf	??_strlen+1,f,c
 13621  00360C  5015               	movf	strlen@cp,w,c
 13622  00360E  2413               	addwf	??_strlen,w,c
 13623  003610  6E11               	movwf	?_strlen,c
 13624  003612  5016               	movf	strlen@cp+1,w,c
 13625  003614  2014               	addwfc	??_strlen+1,w,c
 13626  003616  6E12               	movwf	?_strlen+1,c
 13627  003618  D000               	goto	l2032
 13628  00361A                     l2032:
 13629  00361A  0012               	return		;funcret
 13630  00361C                     __end_of_strlen:
 13631                           	opt stack 0
 13632                           tblptru	equ	0xFF8
 13633                           tblptrh	equ	0xFF7
 13634                           tblptrl	equ	0xFF6
 13635                           tablat	equ	0xFF5
 13636                           prodh	equ	0xFF4
 13637                           prodl	equ	0xFF3
 13638                           intcon	equ	0xFF2
 13639                           intcon2	equ	0xFF1
 13640                           postinc0	equ	0xFEE
 13641                           wreg	equ	0xFE8
 13642                           postdec1	equ	0xFE5
 13643                           fsr1l	equ	0xFE1
 13644                           indf2	equ	0xFDF
 13645                           postinc2	equ	0xFDE
 13646                           fsr2h	equ	0xFDA
 13647                           fsr2l	equ	0xFD9
 13648                           status	equ	0xFD8
 13649                           
 13650 ;; *************** function _drawChar *****************
 13651 ;; Defined at:
 13652 ;;		line 447 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 13653 ;; Parameters:    Size  Location     Type
 13654 ;;  x               1    wreg     unsigned char 
 13655 ;;  y               1   45[COMRAM] unsigned char 
 13656 ;;  c               1   46[COMRAM] unsigned char 
 13657 ;;  color           2   47[COMRAM] unsigned int 
 13658 ;;  bg              2   49[COMRAM] unsigned int 
 13659 ;;  size            1   51[COMRAM] unsigned char 
 13660 ;; Auto vars:     Size  Location     Type
 13661 ;;  x               1   53[COMRAM] unsigned char 
 13662 ;;  line            1   52[COMRAM] unsigned char 
 13663 ;;  i               1   55[COMRAM] unsigned char 
 13664 ;;  j               1   54[COMRAM] unsigned char 
 13665 ;; Return value:  Size  Location     Type
 13666 ;;		None               void
 13667 ;; Registers used:
 13668 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 0/0
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13674 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;Total ram usage:       11 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; Hardware stack levels required when called:    8
 13681 ;; This function calls:
 13682 ;;		___wmul
 13683 ;;		_drawPixel
 13684 ;;		_fillRect
 13685 ;; This function is called by:
 13686 ;;		_drawtext
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           	psect	text73
 13691  0018B4                     __ptext73:
 13692                           	opt stack 0
 13693  0018B4                     _drawChar:
 13694                           	opt stack 20
 13695                           
 13696                           ;incstack = 0
 13697                           ;drawChar@x stored from wreg
 13698  0018B4  6E36               	movwf	drawChar@x,c
 13699                           
 13700                           ;ST7735_TFT.c: 449: char i, j;
 13701                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
 13702  0018B6  0E80               	movlw	128
 13703  0018B8  6036               	cpfslt	drawChar@x,c
 13704  0018BA  D0A6               	goto	l1267
 13705  0018BC  0E9F               	movlw	159
 13706  0018BE  642E               	cpfsgt	drawChar@y,c
 13707  0018C0  D001               	goto	l8044
 13708                           
 13709                           ;ST7735_TFT.c: 451: return;
 13710  0018C2  D0A2               	goto	l1267
 13711  0018C4                     l8044:
 13712                           
 13713                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
 13714  0018C4  5034               	movf	drawChar@size,w,c
 13715  0018C6  A4D8               	btfss	status,2,c
 13716  0018C8  D003               	goto	l8048
 13717  0018CA  0E01               	movlw	1
 13718  0018CC  6E34               	movwf	drawChar@size,c
 13719  0018CE  D000               	goto	l8048
 13720  0018D0                     l8048:
 13721                           
 13722                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
 13723  0018D0  0E1F               	movlw	31
 13724  0018D2  642F               	cpfsgt	drawChar@c,c
 13725  0018D4  D004               	goto	l8052
 13726  0018D6  0E7E               	movlw	126
 13727  0018D8  642F               	cpfsgt	drawChar@c,c
 13728  0018DA  D003               	goto	l1269
 13729  0018DC  D000               	goto	l8052
 13730  0018DE                     l8052:
 13731                           
 13732                           ;ST7735_TFT.c: 454: c = '?';
 13733  0018DE  0E3F               	movlw	63
 13734  0018E0  6E2F               	movwf	drawChar@c,c
 13735  0018E2                     l1269:
 13736                           
 13737                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
 13738  0018E2  0E00               	movlw	0
 13739  0018E4  6E38               	movwf	drawChar@i,c
 13740  0018E6                     l8054:
 13741  0018E6  0E04               	movlw	4
 13742  0018E8  6438               	cpfsgt	drawChar@i,c
 13743  0018EA  D001               	goto	l8058
 13744  0018EC  D08D               	goto	l1267
 13745  0018EE                     l8058:
 13746                           
 13747                           ;ST7735_TFT.c: 456: unsigned char line;
 13748                           ;ST7735_TFT.c: 457: if(c < 'S')
 13749  0018EE  0E53               	movlw	83
 13750  0018F0  602F               	cpfslt	drawChar@c,c
 13751  0018F2  D015               	goto	l8062
 13752                           
 13753                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
 13754  0018F4  0EE0               	movlw	224
 13755  0018F6  242F               	addwf	drawChar@c,w,c
 13756  0018F8  6E11               	movwf	___wmul@multiplier,c
 13757  0018FA  6A12               	clrf	___wmul@multiplier+1,c
 13758  0018FC  0EFF               	movlw	255
 13759  0018FE  2212               	addwfc	___wmul@multiplier+1,f,c
 13760  001900  0E00               	movlw	0
 13761  001902  6E14               	movwf	___wmul@multiplicand+1,c
 13762  001904  0E05               	movlw	5
 13763  001906  6E13               	movwf	___wmul@multiplicand,c
 13764  001908  EC27  F01C         	call	___wmul	;wreg free
 13765  00190C  5038               	movf	drawChar@i,w,c
 13766  00190E  2611               	addwf	?___wmul,f,c
 13767  001910  0E00               	movlw	0
 13768  001912  2212               	addwfc	?___wmul+1,f,c
 13769  001914  0E97               	movlw	low _font
 13770  001916  2411               	addwf	?___wmul,w,c
 13771  001918  6EF6               	movwf	tblptrl,c
 13772  00191A  0EFC               	movlw	high _font
 13773  00191C  D014               	goto	L13
 13774  00191E                     l8062:
 13775                           
 13776                           ;ST7735_TFT.c: 459: else
 13777                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
 13778  00191E  0EAD               	movlw	173
 13779  001920  242F               	addwf	drawChar@c,w,c
 13780  001922  6E11               	movwf	___wmul@multiplier,c
 13781  001924  6A12               	clrf	___wmul@multiplier+1,c
 13782  001926  0EFF               	movlw	255
 13783  001928  2212               	addwfc	___wmul@multiplier+1,f,c
 13784  00192A  0E00               	movlw	0
 13785  00192C  6E14               	movwf	___wmul@multiplicand+1,c
 13786  00192E  0E05               	movlw	5
 13787  001930  6E13               	movwf	___wmul@multiplicand,c
 13788  001932  EC27  F01C         	call	___wmul	;wreg free
 13789  001936  5038               	movf	drawChar@i,w,c
 13790  001938  2611               	addwf	?___wmul,f,c
 13791  00193A  0E00               	movlw	0
 13792  00193C  2212               	addwfc	?___wmul+1,f,c
 13793  00193E  0E96               	movlw	low _font2
 13794  001940  2411               	addwf	?___wmul,w,c
 13795  001942  6EF6               	movwf	tblptrl,c
 13796  001944  0EFD               	movlw	high _font2
 13797  001946                     L13:
 13798  001946  2012               	addwfc	?___wmul+1,w,c
 13799  001948  6EF7               	movwf	tblptrh,c
 13800  00194A                     	if	0	;There are less than 3 active tblptr bytes
 13801  00194A                     	endif
 13802  00194A  0008               	tblrd		*
 13803  00194C  CFF5 F035          	movff	tablat,drawChar@line
 13804  001950  D000               	goto	l8064
 13805  001952                     l8064:
 13806                           
 13807                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
 13808  001952  0E00               	movlw	0
 13809  001954  6E37               	movwf	drawChar@j,c
 13810  001956                     l8066:
 13811  001956  0E06               	movlw	6
 13812  001958  6437               	cpfsgt	drawChar@j,c
 13813  00195A  D001               	goto	l1276
 13814  00195C  D053               	goto	l8090
 13815  00195E                     l1276:
 13816                           
 13817                           ;ST7735_TFT.c: 462: if(line & 0x01) {
 13818  00195E  A035               	btfss	drawChar@line,0,c
 13819  001960  D023               	goto	l8076
 13820                           
 13821                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
 13822  001962  0434               	decf	drawChar@size,w,c
 13823  001964  A4D8               	btfss	status,2,c
 13824  001966  D00C               	goto	l8074
 13825  001968  502E               	movf	drawChar@y,w,c
 13826  00196A  2437               	addwf	drawChar@j,w,c
 13827  00196C  6E18               	movwf	drawPixel@y,c
 13828  00196E  C030  F019         	movff	drawChar@color,drawPixel@color
 13829  001972  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 13830  001976  5036               	movf	drawChar@x,w,c
 13831  001978  2438               	addwf	drawChar@i,w,c
 13832  00197A  ECBA  F01B         	call	_drawPixel
 13833  00197E  D03E               	goto	l8084
 13834  001980                     l8074:
 13835                           
 13836                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
 13837  001980  5037               	movf	drawChar@j,w,c
 13838  001982  0234               	mulwf	drawChar@size,c
 13839  001984  50F3               	movf	prodl,w,c
 13840  001986  242E               	addwf	drawChar@y,w,c
 13841  001988  6E23               	movwf	fillRect@y,c
 13842  00198A  C034  F024         	movff	drawChar@size,fillRect@w
 13843  00198E  C034  F025         	movff	drawChar@size,fillRect@h
 13844  001992  C030  F026         	movff	drawChar@color,fillRect@color
 13845  001996  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 13846  00199A  5038               	movf	drawChar@i,w,c
 13847  00199C  0234               	mulwf	drawChar@size,c
 13848  00199E  50F3               	movf	prodl,w,c
 13849  0019A0  2436               	addwf	drawChar@x,w,c
 13850  0019A2  EC63  F01A         	call	_fillRect
 13851                           
 13852                           ;ST7735_TFT.c: 465: }
 13853  0019A6  D02A               	goto	l8084
 13854  0019A8                     l8076:
 13855                           
 13856                           ;ST7735_TFT.c: 466: else if(bg != color) {
 13857  0019A8  5030               	movf	drawChar@color,w,c
 13858  0019AA  1832               	xorwf	drawChar@bg,w,c
 13859  0019AC  E104               	bnz	u5410
 13860  0019AE  5031               	movf	drawChar@color+1,w,c
 13861  0019B0  1833               	xorwf	drawChar@bg+1,w,c
 13862  0019B2  B4D8               	btfsc	status,2,c
 13863  0019B4  D023               	goto	l8084
 13864  0019B6                     u5410:
 13865                           
 13866                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
 13867  0019B6  0434               	decf	drawChar@size,w,c
 13868  0019B8  A4D8               	btfss	status,2,c
 13869  0019BA  D00C               	goto	l8082
 13870  0019BC  502E               	movf	drawChar@y,w,c
 13871  0019BE  2437               	addwf	drawChar@j,w,c
 13872  0019C0  6E18               	movwf	drawPixel@y,c
 13873  0019C2  C032  F019         	movff	drawChar@bg,drawPixel@color
 13874  0019C6  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 13875  0019CA  5036               	movf	drawChar@x,w,c
 13876  0019CC  2438               	addwf	drawChar@i,w,c
 13877  0019CE  ECBA  F01B         	call	_drawPixel
 13878  0019D2  D014               	goto	l8084
 13879  0019D4                     l8082:
 13880                           
 13881                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
 13882  0019D4  5037               	movf	drawChar@j,w,c
 13883  0019D6  0234               	mulwf	drawChar@size,c
 13884  0019D8  50F3               	movf	prodl,w,c
 13885  0019DA  242E               	addwf	drawChar@y,w,c
 13886  0019DC  6E23               	movwf	fillRect@y,c
 13887  0019DE  C034  F024         	movff	drawChar@size,fillRect@w
 13888  0019E2  C034  F025         	movff	drawChar@size,fillRect@h
 13889  0019E6  C032  F026         	movff	drawChar@bg,fillRect@color
 13890  0019EA  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 13891  0019EE  5038               	movf	drawChar@i,w,c
 13892  0019F0  0234               	mulwf	drawChar@size,c
 13893  0019F2  50F3               	movf	prodl,w,c
 13894  0019F4  2436               	addwf	drawChar@x,w,c
 13895  0019F6  EC63  F01A         	call	_fillRect
 13896  0019FA  D000               	goto	l8084
 13897  0019FC                     l8084:
 13898  0019FC  2A37               	incf	drawChar@j,f,c
 13899  0019FE  90D8               	bcf	status,0,c
 13900  001A00  3235               	rrcf	drawChar@line,f,c
 13901  001A02  D7A9               	goto	l8066
 13902  001A04                     l8090:
 13903  001A04  2A38               	incf	drawChar@i,f,c
 13904  001A06  D76F               	goto	l8054
 13905  001A08                     l1267:
 13906  001A08  0012               	return		;funcret
 13907  001A0A                     __end_of_drawChar:
 13908                           	opt stack 0
 13909                           tblptru	equ	0xFF8
 13910                           tblptrh	equ	0xFF7
 13911                           tblptrl	equ	0xFF6
 13912                           tablat	equ	0xFF5
 13913                           prodh	equ	0xFF4
 13914                           prodl	equ	0xFF3
 13915                           intcon	equ	0xFF2
 13916                           intcon2	equ	0xFF1
 13917                           postinc0	equ	0xFEE
 13918                           wreg	equ	0xFE8
 13919                           postdec1	equ	0xFE5
 13920                           fsr1l	equ	0xFE1
 13921                           indf2	equ	0xFDF
 13922                           postinc2	equ	0xFDE
 13923                           fsr2h	equ	0xFDA
 13924                           fsr2l	equ	0xFD9
 13925                           status	equ	0xFD8
 13926                           
 13927 ;; *************** function _fillRect *****************
 13928 ;; Defined at:
 13929 ;;		line 437 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 13930 ;; Parameters:    Size  Location     Type
 13931 ;;  x               1    wreg     unsigned char 
 13932 ;;  y               1   34[COMRAM] unsigned char 
 13933 ;;  w               1   35[COMRAM] unsigned char 
 13934 ;;  h               1   36[COMRAM] unsigned char 
 13935 ;;  color           2   37[COMRAM] unsigned int 
 13936 ;; Auto vars:     Size  Location     Type
 13937 ;;  x               1   42[COMRAM] unsigned char 
 13938 ;;  i               2   43[COMRAM] int 
 13939 ;; Return value:  Size  Location     Type
 13940 ;;		None               void
 13941 ;; Registers used:
 13942 ;;		wreg, status,2, status,0, cstack
 13943 ;; Tracked objects:
 13944 ;;		On entry : 0/0
 13945 ;;		On exit  : 0/0
 13946 ;;		Unchanged: 0/0
 13947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13948 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;Total ram usage:       11 bytes
 13953 ;; Hardware stack levels used:    1
 13954 ;; Hardware stack levels required when called:    7
 13955 ;; This function calls:
 13956 ;;		_drawFastVLine
 13957 ;; This function is called by:
 13958 ;;		_Initialize_Setup_Alarm_Time_Screen
 13959 ;;		_Initialize_Setup_Time_Screen
 13960 ;;		_Update_Setup_Screen_Cursor_Forward
 13961 ;;		_Update_Setup_Screen_Cursor_Backward
 13962 ;;		_drawChar
 13963 ;; This function uses a non-reentrant model
 13964 ;;
 13965                           
 13966                           	psect	text74
 13967  0034C6                     __ptext74:
 13968                           	opt stack 0
 13969  0034C6                     _fillRect:
 13970                           	opt stack 20
 13971                           
 13972                           ;incstack = 0
 13973                           ;fillRect@x stored from wreg
 13974  0034C6  6E2B               	movwf	fillRect@x,c
 13975                           
 13976                           ;ST7735_TFT.c: 439: signed int i;
 13977                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
 13978  0034C8  C02B  F02C         	movff	fillRect@x,fillRect@i
 13979  0034CC  6A2D               	clrf	fillRect@i+1,c
 13980  0034CE  D00E               	goto	l7830
 13981  0034D0                     l7826:
 13982                           
 13983                           ;ST7735_TFT.c: 442: {
 13984                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
 13985  0034D0  C023  F018         	movff	fillRect@y,drawFastVLine@y
 13986  0034D4  C025  F019         	movff	fillRect@h,drawFastVLine@h
 13987  0034D8  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 13988  0034DC  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 13989  0034E0  502C               	movf	fillRect@i,w,c
 13990  0034E2  EC8D  F016         	call	_drawFastVLine
 13991  0034E6  4A2C               	infsnz	fillRect@i,f,c
 13992  0034E8  2A2D               	incf	fillRect@i+1,f,c
 13993  0034EA  D000               	goto	l7830
 13994  0034EC                     l7830:
 13995  0034EC  5024               	movf	fillRect@w,w,c
 13996  0034EE  C02B  F028         	movff	fillRect@x,??_fillRect
 13997  0034F2  6A29               	clrf	(??_fillRect+1)& (0+255),c
 13998  0034F4  2628               	addwf	??_fillRect,f,c
 13999  0034F6  0E00               	movlw	0
 14000  0034F8  2229               	addwfc	??_fillRect+1,f,c
 14001  0034FA  5028               	movf	??_fillRect,w,c
 14002  0034FC  5C2C               	subwf	fillRect@i,w,c
 14003  0034FE  502D               	movf	fillRect@i+1,w,c
 14004  003500  0A80               	xorlw	128
 14005  003502  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 14006  003504  5029               	movf	??_fillRect+1,w,c
 14007  003506  0A80               	xorlw	128
 14008  003508  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 14009  00350A  A0D8               	btfss	status,0,c
 14010  00350C  D7E1               	goto	l7826
 14011  00350E  0012               	return		;funcret
 14012  003510                     __end_of_fillRect:
 14013                           	opt stack 0
 14014                           tblptru	equ	0xFF8
 14015                           tblptrh	equ	0xFF7
 14016                           tblptrl	equ	0xFF6
 14017                           tablat	equ	0xFF5
 14018                           prodh	equ	0xFF4
 14019                           prodl	equ	0xFF3
 14020                           intcon	equ	0xFF2
 14021                           intcon2	equ	0xFF1
 14022                           postinc0	equ	0xFEE
 14023                           wreg	equ	0xFE8
 14024                           postdec1	equ	0xFE5
 14025                           fsr1l	equ	0xFE1
 14026                           indf2	equ	0xFDF
 14027                           postinc2	equ	0xFDE
 14028                           fsr2h	equ	0xFDA
 14029                           fsr2l	equ	0xFD9
 14030                           status	equ	0xFD8
 14031                           
 14032 ;; *************** function _drawFastVLine *****************
 14033 ;; Defined at:
 14034 ;;		line 416 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 14035 ;; Parameters:    Size  Location     Type
 14036 ;;  x               1    wreg     unsigned char 
 14037 ;;  y               1   23[COMRAM] unsigned char 
 14038 ;;  h               1   24[COMRAM] unsigned char 
 14039 ;;  color           2   25[COMRAM] unsigned int 
 14040 ;; Auto vars:     Size  Location     Type
 14041 ;;  x               1   33[COMRAM] unsigned char 
 14042 ;;  lo              1   32[COMRAM] unsigned char 
 14043 ;;  hi              1   31[COMRAM] unsigned char 
 14044 ;; Return value:  Size  Location     Type
 14045 ;;		None               void
 14046 ;; Registers used:
 14047 ;;		wreg, status,2, status,0, cstack
 14048 ;; Tracked objects:
 14049 ;;		On entry : 0/0
 14050 ;;		On exit  : 0/0
 14051 ;;		Unchanged: 0/0
 14052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14053 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14054 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14055 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14056 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14057 ;;Total ram usage:       11 bytes
 14058 ;; Hardware stack levels used:    1
 14059 ;; Hardware stack levels required when called:    6
 14060 ;; This function calls:
 14061 ;;		_setAddrWindow
 14062 ;;		_spiwrite
 14063 ;; This function is called by:
 14064 ;;		_fillRect
 14065 ;;		_fillCircleHelper
 14066 ;;		_fillCircle
 14067 ;;		_drawRect
 14068 ;; This function uses a non-reentrant model
 14069 ;;
 14070                           
 14071                           	psect	text75
 14072  002D1A                     __ptext75:
 14073                           	opt stack 0
 14074  002D1A                     _drawFastVLine:
 14075                           	opt stack 20
 14076                           
 14077                           ;incstack = 0
 14078                           ;drawFastVLine@x stored from wreg
 14079  002D1A  6E22               	movwf	drawFastVLine@x,c
 14080                           
 14081                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
 14082                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
 14083  002D1C  0E80               	movlw	128
 14084  002D1E  6022               	cpfslt	drawFastVLine@x,c
 14085  002D20  D03F               	goto	l1251
 14086  002D22  0E9F               	movlw	159
 14087  002D24  6418               	cpfsgt	drawFastVLine@y,c
 14088  002D26  D001               	goto	l7800
 14089                           
 14090                           ;ST7735_TFT.c: 420: return;
 14091  002D28  D03B               	goto	l1251
 14092  002D2A                     l7800:
 14093                           
 14094                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
 14095  002D2A  0EFF               	movlw	255
 14096  002D2C  6E1C               	movwf	??_drawFastVLine& (0+255),c
 14097  002D2E  0EFF               	movlw	255
 14098  002D30  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 14099  002D32  5019               	movf	drawFastVLine@h,w,c
 14100  002D34  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 14101  002D38  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 14102  002D3A  261E               	addwf	??_drawFastVLine+2,f,c
 14103  002D3C  0E00               	movlw	0
 14104  002D3E  221F               	addwfc	??_drawFastVLine+3,f,c
 14105  002D40  501C               	movf	??_drawFastVLine,w,c
 14106  002D42  261E               	addwf	??_drawFastVLine+2,f,c
 14107  002D44  501D               	movf	??_drawFastVLine+1,w,c
 14108  002D46  221F               	addwfc	??_drawFastVLine+3,f,c
 14109  002D48  BE1F               	btfsc	??_drawFastVLine+3,7,c
 14110  002D4A  D00B               	goto	l7804
 14111  002D4C  501F               	movf	??_drawFastVLine+3,w,c
 14112  002D4E  E104               	bnz	u5180
 14113  002D50  0EA0               	movlw	160
 14114  002D52  5C1E               	subwf	??_drawFastVLine+2,w,c
 14115  002D54  A0D8               	btfss	status,0,c
 14116  002D56  D005               	goto	l7804
 14117  002D58                     u5180:
 14118                           
 14119                           ;ST7735_TFT.c: 422: h = 160 - y;
 14120  002D58  5018               	movf	drawFastVLine@y,w,c
 14121  002D5A  0800               	sublw	0
 14122  002D5C  0FA0               	addlw	160
 14123  002D5E  6E19               	movwf	drawFastVLine@h,c
 14124  002D60  D000               	goto	l7804
 14125  002D62                     l7804:
 14126                           
 14127                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
 14128  002D62  501B               	movf	drawFastVLine@color+1,w,c
 14129  002D64  6E20               	movwf	drawFastVLine@hi,c
 14130  002D66  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 14131                           
 14132                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
 14133  002D6A  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 14134  002D6E  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 14135  002D72  5018               	movf	drawFastVLine@y,w,c
 14136  002D74  2419               	addwf	drawFastVLine@h,w,c
 14137  002D76  6E1C               	movwf	??_drawFastVLine& (0+255),c
 14138  002D78  041C               	decf	??_drawFastVLine,w,c
 14139  002D7A  6E16               	movwf	setAddrWindow@y1,c
 14140  002D7C  5022               	movf	drawFastVLine@x,w,c
 14141  002D7E  EC23  F019         	call	_setAddrWindow
 14142                           
 14143                           ;ST7735_TFT.c: 425: PORTBbits.RB6 = 1;
 14144  002D82  8C81               	bsf	3969,6,c	;volatile
 14145                           
 14146                           ;ST7735_TFT.c: 426: PORTBbits.RB5 = 0;
 14147  002D84  9A81               	bcf	3969,5,c	;volatile
 14148                           
 14149                           ;ST7735_TFT.c: 428: while (h--) {
 14150  002D86  D007               	goto	l7816
 14151  002D88                     l7814:
 14152                           
 14153                           ;ST7735_TFT.c: 429: spiwrite(hi);
 14154  002D88  5020               	movf	drawFastVLine@hi,w,c
 14155  002D8A  EC59  F01D         	call	_spiwrite
 14156                           
 14157                           ;ST7735_TFT.c: 430: spiwrite(lo);
 14158  002D8E  5021               	movf	drawFastVLine@lo,w,c
 14159  002D90  EC59  F01D         	call	_spiwrite
 14160  002D94  D000               	goto	l7816
 14161  002D96                     l7816:
 14162  002D96  0619               	decf	drawFastVLine@h,f,c
 14163  002D98  2819               	incf	drawFastVLine@h,w,c
 14164  002D9A  A4D8               	btfss	status,2,c
 14165  002D9C  D7F5               	goto	l7814
 14166                           
 14167                           ;ST7735_TFT.c: 431: }
 14168                           ;ST7735_TFT.c: 432: PORTBbits.RB5 = 1;
 14169  002D9E  8A81               	bsf	3969,5,c	;volatile
 14170  002DA0                     l1251:
 14171  002DA0  0012               	return		;funcret
 14172  002DA2                     __end_of_drawFastVLine:
 14173                           	opt stack 0
 14174                           tblptru	equ	0xFF8
 14175                           tblptrh	equ	0xFF7
 14176                           tblptrl	equ	0xFF6
 14177                           tablat	equ	0xFF5
 14178                           prodh	equ	0xFF4
 14179                           prodl	equ	0xFF3
 14180                           intcon	equ	0xFF2
 14181                           intcon2	equ	0xFF1
 14182                           postinc0	equ	0xFEE
 14183                           wreg	equ	0xFE8
 14184                           postdec1	equ	0xFE5
 14185                           fsr1l	equ	0xFE1
 14186                           indf2	equ	0xFDF
 14187                           postinc2	equ	0xFDE
 14188                           fsr2h	equ	0xFDA
 14189                           fsr2l	equ	0xFD9
 14190                           status	equ	0xFD8
 14191                           
 14192 ;; *************** function _drawPixel *****************
 14193 ;; Defined at:
 14194 ;;		line 407 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 14195 ;; Parameters:    Size  Location     Type
 14196 ;;  x               1    wreg     unsigned char 
 14197 ;;  y               1   23[COMRAM] unsigned char 
 14198 ;;  color           2   24[COMRAM] unsigned int 
 14199 ;; Auto vars:     Size  Location     Type
 14200 ;;  x               1   26[COMRAM] unsigned char 
 14201 ;; Return value:  Size  Location     Type
 14202 ;;		None               void
 14203 ;; Registers used:
 14204 ;;		wreg, status,2, status,0, cstack
 14205 ;; Tracked objects:
 14206 ;;		On entry : 0/0
 14207 ;;		On exit  : 0/0
 14208 ;;		Unchanged: 0/0
 14209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14210 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14213 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14214 ;;Total ram usage:        4 bytes
 14215 ;; Hardware stack levels used:    1
 14216 ;; Hardware stack levels required when called:    6
 14217 ;; This function calls:
 14218 ;;		_setAddrWindow
 14219 ;;		_write_data
 14220 ;; This function is called by:
 14221 ;;		_drawChar
 14222 ;;		_drawCircle
 14223 ;;		_drawCircleHelper
 14224 ;; This function uses a non-reentrant model
 14225 ;;
 14226                           
 14227                           	psect	text76
 14228  003774                     __ptext76:
 14229                           	opt stack 0
 14230  003774                     _drawPixel:
 14231                           	opt stack 21
 14232                           
 14233                           ;incstack = 0
 14234                           ;drawPixel@x stored from wreg
 14235  003774  6E1B               	movwf	drawPixel@x,c
 14236                           
 14237                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
 14238  003776  0E80               	movlw	128
 14239  003778  601B               	cpfslt	drawPixel@x,c
 14240  00377A  D013               	goto	l1245
 14241  00377C  0E9F               	movlw	159
 14242  00377E  6418               	cpfsgt	drawPixel@y,c
 14243  003780  D001               	goto	l7862
 14244                           
 14245                           ;ST7735_TFT.c: 410: return;
 14246  003782  D00F               	goto	l1245
 14247  003784                     l7862:
 14248                           
 14249                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
 14250  003784  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 14251  003788  281B               	incf	drawPixel@x,w,c
 14252  00378A  6E15               	movwf	setAddrWindow@x1,c
 14253  00378C  2818               	incf	drawPixel@y,w,c
 14254  00378E  6E16               	movwf	setAddrWindow@y1,c
 14255  003790  501B               	movf	drawPixel@x,w,c
 14256  003792  EC23  F019         	call	_setAddrWindow
 14257                           
 14258                           ;ST7735_TFT.c: 412: write_data(color >> 8);
 14259  003796  501A               	movf	drawPixel@color+1,w,c
 14260  003798  ECBC  F01D         	call	_write_data
 14261                           
 14262                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
 14263  00379C  5019               	movf	drawPixel@color,w,c
 14264  00379E  ECBC  F01D         	call	_write_data
 14265  0037A2                     l1245:
 14266  0037A2  0012               	return		;funcret
 14267  0037A4                     __end_of_drawPixel:
 14268                           	opt stack 0
 14269                           tblptru	equ	0xFF8
 14270                           tblptrh	equ	0xFF7
 14271                           tblptrl	equ	0xFF6
 14272                           tablat	equ	0xFF5
 14273                           prodh	equ	0xFF4
 14274                           prodl	equ	0xFF3
 14275                           intcon	equ	0xFF2
 14276                           intcon2	equ	0xFF1
 14277                           postinc0	equ	0xFEE
 14278                           wreg	equ	0xFE8
 14279                           postdec1	equ	0xFE5
 14280                           fsr1l	equ	0xFE1
 14281                           indf2	equ	0xFDF
 14282                           postinc2	equ	0xFDE
 14283                           fsr2h	equ	0xFDA
 14284                           fsr2l	equ	0xFD9
 14285                           status	equ	0xFD8
 14286                           
 14287 ;; *************** function _setAddrWindow *****************
 14288 ;; Defined at:
 14289 ;;		line 392 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 14290 ;; Parameters:    Size  Location     Type
 14291 ;;  x0              1    wreg     unsigned char 
 14292 ;;  y0              1   19[COMRAM] unsigned char 
 14293 ;;  x1              1   20[COMRAM] unsigned char 
 14294 ;;  y1              1   21[COMRAM] unsigned char 
 14295 ;; Auto vars:     Size  Location     Type
 14296 ;;  x0              1   22[COMRAM] unsigned char 
 14297 ;; Return value:  Size  Location     Type
 14298 ;;		None               void
 14299 ;; Registers used:
 14300 ;;		wreg, status,2, status,0, cstack
 14301 ;; Tracked objects:
 14302 ;;		On entry : 0/0
 14303 ;;		On exit  : 0/0
 14304 ;;		Unchanged: 0/0
 14305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14306 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14309 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14310 ;;Total ram usage:        4 bytes
 14311 ;; Hardware stack levels used:    1
 14312 ;; Hardware stack levels required when called:    5
 14313 ;; This function calls:
 14314 ;;		_write_command
 14315 ;;		_write_data
 14316 ;; This function is called by:
 14317 ;;		_drawPixel
 14318 ;;		_drawFastVLine
 14319 ;;		_fillRectangle
 14320 ;;		_drawFastHLine
 14321 ;; This function uses a non-reentrant model
 14322 ;;
 14323                           
 14324                           	psect	text77
 14325  003246                     __ptext77:
 14326                           	opt stack 0
 14327  003246                     _setAddrWindow:
 14328                           	opt stack 20
 14329                           
 14330                           ;incstack = 0
 14331                           ;setAddrWindow@x0 stored from wreg
 14332  003246  6E17               	movwf	setAddrWindow@x0,c
 14333                           
 14334                           ;ST7735_TFT.c: 394: write_command(0x2A);
 14335  003248  0E2A               	movlw	42
 14336  00324A  ECC4  F01D         	call	_write_command
 14337                           
 14338                           ;ST7735_TFT.c: 395: write_data(0);
 14339  00324E  0E00               	movlw	0
 14340  003250  ECBC  F01D         	call	_write_data
 14341                           
 14342                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
 14343  003254  5017               	movf	setAddrWindow@x0,w,c
 14344  003256  0100               	movlb	0	; () banked
 14345  003258  25F7               	addwf	_colstart& (0+255),w,b
 14346  00325A  ECBC  F01D         	call	_write_data
 14347                           
 14348                           ;ST7735_TFT.c: 397: write_data(0);
 14349  00325E  0E00               	movlw	0
 14350  003260  ECBC  F01D         	call	_write_data
 14351                           
 14352                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
 14353  003264  5015               	movf	setAddrWindow@x1,w,c
 14354  003266  0100               	movlb	0	; () banked
 14355  003268  25F7               	addwf	_colstart& (0+255),w,b
 14356  00326A  ECBC  F01D         	call	_write_data
 14357                           
 14358                           ;ST7735_TFT.c: 399: write_command(0x2B);
 14359  00326E  0E2B               	movlw	43
 14360  003270  ECC4  F01D         	call	_write_command
 14361                           
 14362                           ;ST7735_TFT.c: 400: write_data(0);
 14363  003274  0E00               	movlw	0
 14364  003276  ECBC  F01D         	call	_write_data
 14365                           
 14366                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
 14367  00327A  5014               	movf	setAddrWindow@y0,w,c
 14368  00327C  0100               	movlb	0	; () banked
 14369  00327E  25F9               	addwf	_rowstart& (0+255),w,b
 14370  003280  ECBC  F01D         	call	_write_data
 14371                           
 14372                           ;ST7735_TFT.c: 402: write_data(0);
 14373  003284  0E00               	movlw	0
 14374  003286  ECBC  F01D         	call	_write_data
 14375                           
 14376                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
 14377  00328A  5016               	movf	setAddrWindow@y1,w,c
 14378  00328C  0100               	movlb	0	; () banked
 14379  00328E  25F9               	addwf	_rowstart& (0+255),w,b
 14380  003290  ECBC  F01D         	call	_write_data
 14381                           
 14382                           ;ST7735_TFT.c: 404: write_command(0x2C);
 14383  003294  0E2C               	movlw	44
 14384  003296  ECC4  F01D         	call	_write_command
 14385  00329A  0012               	return		;funcret
 14386  00329C                     __end_of_setAddrWindow:
 14387                           	opt stack 0
 14388                           tblptru	equ	0xFF8
 14389                           tblptrh	equ	0xFF7
 14390                           tblptrl	equ	0xFF6
 14391                           tablat	equ	0xFF5
 14392                           prodh	equ	0xFF4
 14393                           prodl	equ	0xFF3
 14394                           intcon	equ	0xFF2
 14395                           intcon2	equ	0xFF1
 14396                           postinc0	equ	0xFEE
 14397                           wreg	equ	0xFE8
 14398                           postdec1	equ	0xFE5
 14399                           fsr1l	equ	0xFE1
 14400                           indf2	equ	0xFDF
 14401                           postinc2	equ	0xFDE
 14402                           fsr2h	equ	0xFDA
 14403                           fsr2l	equ	0xFD9
 14404                           status	equ	0xFD8
 14405                           
 14406 ;; *************** function _write_data *****************
 14407 ;; Defined at:
 14408 ;;		line 209 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 14409 ;; Parameters:    Size  Location     Type
 14410 ;;  data_           1    wreg     unsigned char 
 14411 ;; Auto vars:     Size  Location     Type
 14412 ;;  data_           1   18[COMRAM] unsigned char 
 14413 ;; Return value:  Size  Location     Type
 14414 ;;		None               void
 14415 ;; Registers used:
 14416 ;;		wreg, status,2, cstack
 14417 ;; Tracked objects:
 14418 ;;		On entry : 0/0
 14419 ;;		On exit  : 0/0
 14420 ;;		Unchanged: 0/0
 14421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14423 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14425 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14426 ;;Total ram usage:        1 bytes
 14427 ;; Hardware stack levels used:    1
 14428 ;; Hardware stack levels required when called:    4
 14429 ;; This function calls:
 14430 ;;		_spiwrite
 14431 ;; This function is called by:
 14432 ;;		_Rcmd1
 14433 ;;		_Rcmd2red
 14434 ;;		_Rcmd3
 14435 ;;		_setAddrWindow
 14436 ;;		_drawPixel
 14437 ;;		_TFT_GreenTab_Initialize
 14438 ;;		_Bcmd
 14439 ;;		_setScrollDefinition
 14440 ;;		_Rcmd2green
 14441 ;;		_VerticalScroll
 14442 ;; This function uses a non-reentrant model
 14443 ;;
 14444                           
 14445                           	psect	text78
 14446  003B78                     __ptext78:
 14447                           	opt stack 0
 14448  003B78                     _write_data:
 14449                           	opt stack 20
 14450                           
 14451                           ;incstack = 0
 14452                           ;write_data@data_ stored from wreg
 14453  003B78  6E13               	movwf	write_data@data_,c
 14454                           
 14455                           ;ST7735_TFT.c: 211: PORTBbits.RB5 = 0;
 14456  003B7A  9A81               	bcf	3969,5,c	;volatile
 14457                           
 14458                           ;ST7735_TFT.c: 212: PORTBbits.RB6 = 1;
 14459  003B7C  8C81               	bsf	3969,6,c	;volatile
 14460                           
 14461                           ;ST7735_TFT.c: 213: spiwrite(data_);
 14462  003B7E  5013               	movf	write_data@data_,w,c
 14463  003B80  EC59  F01D         	call	_spiwrite
 14464                           
 14465                           ;ST7735_TFT.c: 214: PORTBbits.RB5 = 1;
 14466  003B84  8A81               	bsf	3969,5,c	;volatile
 14467  003B86  0012               	return		;funcret
 14468  003B88                     __end_of_write_data:
 14469                           	opt stack 0
 14470                           tblptru	equ	0xFF8
 14471                           tblptrh	equ	0xFF7
 14472                           tblptrl	equ	0xFF6
 14473                           tablat	equ	0xFF5
 14474                           prodh	equ	0xFF4
 14475                           prodl	equ	0xFF3
 14476                           intcon	equ	0xFF2
 14477                           intcon2	equ	0xFF1
 14478                           postinc0	equ	0xFEE
 14479                           wreg	equ	0xFE8
 14480                           postdec1	equ	0xFE5
 14481                           fsr1l	equ	0xFE1
 14482                           indf2	equ	0xFDF
 14483                           postinc2	equ	0xFDE
 14484                           fsr2h	equ	0xFDA
 14485                           fsr2l	equ	0xFD9
 14486                           status	equ	0xFD8
 14487                           
 14488 ;; *************** function _write_command *****************
 14489 ;; Defined at:
 14490 ;;		line 198 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 14491 ;; Parameters:    Size  Location     Type
 14492 ;;  cmd_            1    wreg     unsigned char 
 14493 ;; Auto vars:     Size  Location     Type
 14494 ;;  cmd_            1   18[COMRAM] unsigned char 
 14495 ;; Return value:  Size  Location     Type
 14496 ;;		None               void
 14497 ;; Registers used:
 14498 ;;		wreg, status,2, cstack
 14499 ;; Tracked objects:
 14500 ;;		On entry : 0/0
 14501 ;;		On exit  : 0/0
 14502 ;;		Unchanged: 0/0
 14503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14507 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14508 ;;Total ram usage:        1 bytes
 14509 ;; Hardware stack levels used:    1
 14510 ;; Hardware stack levels required when called:    4
 14511 ;; This function calls:
 14512 ;;		_spiwrite
 14513 ;; This function is called by:
 14514 ;;		_Rcmd1
 14515 ;;		_Rcmd2red
 14516 ;;		_Rcmd3
 14517 ;;		_setAddrWindow
 14518 ;;		_TFT_GreenTab_Initialize
 14519 ;;		_Bcmd
 14520 ;;		_setScrollDefinition
 14521 ;;		_Rcmd2green
 14522 ;;		_VerticalScroll
 14523 ;; This function uses a non-reentrant model
 14524 ;;
 14525                           
 14526                           	psect	text79
 14527  003B88                     __ptext79:
 14528                           	opt stack 0
 14529  003B88                     _write_command:
 14530                           	opt stack 20
 14531                           
 14532                           ;incstack = 0
 14533                           ;write_command@cmd_ stored from wreg
 14534  003B88  6E13               	movwf	write_command@cmd_,c
 14535                           
 14536                           ;ST7735_TFT.c: 200: PORTBbits.RB5 = 0;
 14537  003B8A  9A81               	bcf	3969,5,c	;volatile
 14538                           
 14539                           ;ST7735_TFT.c: 202: PORTBbits.RB6 = 0;
 14540  003B8C  9C81               	bcf	3969,6,c	;volatile
 14541                           
 14542                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
 14543  003B8E  5013               	movf	write_command@cmd_,w,c
 14544  003B90  EC59  F01D         	call	_spiwrite
 14545                           
 14546                           ;ST7735_TFT.c: 205: PORTBbits.RB5 = 1;
 14547  003B94  8A81               	bsf	3969,5,c	;volatile
 14548  003B96  0012               	return		;funcret
 14549  003B98                     __end_of_write_command:
 14550                           	opt stack 0
 14551                           tblptru	equ	0xFF8
 14552                           tblptrh	equ	0xFF7
 14553                           tblptrl	equ	0xFF6
 14554                           tablat	equ	0xFF5
 14555                           prodh	equ	0xFF4
 14556                           prodl	equ	0xFF3
 14557                           intcon	equ	0xFF2
 14558                           intcon2	equ	0xFF1
 14559                           postinc0	equ	0xFEE
 14560                           wreg	equ	0xFE8
 14561                           postdec1	equ	0xFE5
 14562                           fsr1l	equ	0xFE1
 14563                           indf2	equ	0xFDF
 14564                           postinc2	equ	0xFDE
 14565                           fsr2h	equ	0xFDA
 14566                           fsr2l	equ	0xFD9
 14567                           status	equ	0xFD8
 14568                           
 14569 ;; *************** function _spiwrite *****************
 14570 ;; Defined at:
 14571 ;;		line 189 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/ST7735_TFT.c"
 14572 ;; Parameters:    Size  Location     Type
 14573 ;;  spidata         1    wreg     unsigned char 
 14574 ;; Auto vars:     Size  Location     Type
 14575 ;;  spidata         1   17[COMRAM] unsigned char 
 14576 ;;  x               1   16[COMRAM] unsigned char 
 14577 ;; Return value:  Size  Location     Type
 14578 ;;		None               void
 14579 ;; Registers used:
 14580 ;;		wreg
 14581 ;; Tracked objects:
 14582 ;;		On entry : 0/0
 14583 ;;		On exit  : 0/0
 14584 ;;		Unchanged: 0/0
 14585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14587 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14589 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14590 ;;Total ram usage:        2 bytes
 14591 ;; Hardware stack levels used:    1
 14592 ;; Hardware stack levels required when called:    3
 14593 ;; This function calls:
 14594 ;;		Nothing
 14595 ;; This function is called by:
 14596 ;;		_write_command
 14597 ;;		_write_data
 14598 ;;		_drawFastVLine
 14599 ;;		_fillRectangle
 14600 ;;		_drawFastHLine
 14601 ;; This function uses a non-reentrant model
 14602 ;;
 14603                           
 14604                           	psect	text80
 14605  003AB2                     __ptext80:
 14606                           	opt stack 0
 14607  003AB2                     _spiwrite:
 14608                           	opt stack 22
 14609                           
 14610                           ;incstack = 0
 14611                           ;spiwrite@spidata stored from wreg
 14612  003AB2  6E12               	movwf	spiwrite@spidata,c
 14613                           
 14614                           ;ST7735_TFT.c: 191: char x;
 14615                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
 14616  003AB4  969E               	bcf	3998,3,c	;volatile
 14617                           
 14618                           ;ST7735_TFT.c: 193: x = SSPBUF;
 14619  003AB6  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 14620                           
 14621                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
 14622  003ABA  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 14623                           
 14624                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
 14625  003ABE  D000               	goto	l1201
 14626  003AC0                     l1201:
 14627  003AC0  A0C7               	btfss	4039,0,c	;volatile
 14628  003AC2  D7FE               	goto	l1201
 14629  003AC4  0012               	return		;funcret
 14630  003AC6                     __end_of_spiwrite:
 14631                           	opt stack 0
 14632                           tblptru	equ	0xFF8
 14633                           tblptrh	equ	0xFF7
 14634                           tblptrl	equ	0xFF6
 14635                           tablat	equ	0xFF5
 14636                           prodh	equ	0xFF4
 14637                           prodl	equ	0xFF3
 14638                           intcon	equ	0xFF2
 14639                           intcon2	equ	0xFF1
 14640                           postinc0	equ	0xFEE
 14641                           wreg	equ	0xFE8
 14642                           postdec1	equ	0xFE5
 14643                           fsr1l	equ	0xFE1
 14644                           indf2	equ	0xFDF
 14645                           postinc2	equ	0xFDE
 14646                           fsr2h	equ	0xFDA
 14647                           fsr2l	equ	0xFD9
 14648                           status	equ	0xFD8
 14649                           
 14650 ;; *************** function ___awmod *****************
 14651 ;; Defined at:
 14652 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 14653 ;; Parameters:    Size  Location     Type
 14654 ;;  dividend        2    0[BANK0 ] int 
 14655 ;;  divisor         2    2[BANK0 ] int 
 14656 ;; Auto vars:     Size  Location     Type
 14657 ;;  sign            1    1[BANK1 ] unsigned char 
 14658 ;;  counter         1    0[BANK1 ] unsigned char 
 14659 ;; Return value:  Size  Location     Type
 14660 ;;                  2    0[BANK0 ] int 
 14661 ;; Registers used:
 14662 ;;		wreg, status,2, status,0
 14663 ;; Tracked objects:
 14664 ;;		On entry : 0/0
 14665 ;;		On exit  : 0/0
 14666 ;;		Unchanged: 0/0
 14667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14668 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14669 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14671 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14672 ;;Total ram usage:        6 bytes
 14673 ;; Hardware stack levels used:    1
 14674 ;; Hardware stack levels required when called:    3
 14675 ;; This function calls:
 14676 ;;		Nothing
 14677 ;; This function is called by:
 14678 ;;		_Update_Screen
 14679 ;;		_Update_Setup_Alarm_Time_Screen
 14680 ;;		_Update_Setup_Time_Screen
 14681 ;;		_dec_2_bcd
 14682 ;; This function uses a non-reentrant model
 14683 ;;
 14684                           
 14685                           	psect	text81
 14686  002862                     __ptext81:
 14687                           	opt stack 0
 14688  002862                     ___awmod:
 14689                           	opt stack 26
 14690                           
 14691                           ;incstack = 0
 14692  002862  0E00               	movlw	0
 14693  002864  0101               	movlb	1	; () banked
 14694  002866  6F3E               	movwf	___awmod@sign& (0+255),b
 14695                           
 14696                           ; BSR set to: 1
 14697  002868  0100               	movlb	0	; () banked
 14698  00286A  AFFC               	btfss	(___awmod@dividend+1)& (0+255),7,b
 14699  00286C  D009               	goto	l8232
 14700                           
 14701                           ; BSR set to: 0
 14702  00286E  0100               	movlb	0	; () banked
 14703  002870  6DFB               	negf	___awmod@dividend& (0+255),b
 14704  002872  1FFC               	comf	(___awmod@dividend+1)& (0+255),f,b
 14705  002874  B0D8               	btfsc	status,0,c
 14706  002876  2BFC               	incf	(___awmod@dividend+1)& (0+255),f,b
 14707                           
 14708                           ; BSR set to: 0
 14709  002878  0E01               	movlw	1
 14710  00287A  0101               	movlb	1	; () banked
 14711  00287C  6F3E               	movwf	___awmod@sign& (0+255),b
 14712  00287E  D000               	goto	l8232
 14713  002880                     l8232:
 14714  002880  0100               	movlb	0	; () banked
 14715  002882  AFFE               	btfss	(___awmod@divisor+1)& (0+255),7,b
 14716  002884  D006               	goto	l8236
 14717                           
 14718                           ; BSR set to: 0
 14719  002886  0100               	movlb	0	; () banked
 14720  002888  6DFD               	negf	___awmod@divisor& (0+255),b
 14721  00288A  1FFE               	comf	(___awmod@divisor+1)& (0+255),f,b
 14722  00288C  B0D8               	btfsc	status,0,c
 14723  00288E  2BFE               	incf	(___awmod@divisor+1)& (0+255),f,b
 14724  002890  D000               	goto	l8236
 14725  002892                     l8236:
 14726                           
 14727                           ; BSR set to: 0
 14728  002892  0100               	movlb	0	; () banked
 14729  002894  51FD               	movf	___awmod@divisor& (0+255),w,b
 14730  002896  0100               	movlb	0	; () banked
 14731  002898  11FE               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 14732  00289A  B4D8               	btfsc	status,2,c
 14733  00289C  D02B               	goto	l8252
 14734                           
 14735                           ; BSR set to: 0
 14736  00289E  0E01               	movlw	1
 14737  0028A0  0101               	movlb	1	; () banked
 14738  0028A2  6F3D               	movwf	___awmod@counter& (0+255),b
 14739  0028A4  D007               	goto	l8242
 14740  0028A6                     l8240:
 14741  0028A6  0100               	movlb	0	; () banked
 14742  0028A8  90D8               	bcf	status,0,c
 14743  0028AA  37FD               	rlcf	___awmod@divisor& (0+255),f,b
 14744  0028AC  37FE               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 14745  0028AE  0101               	movlb	1	; () banked
 14746  0028B0  2B3D               	incf	___awmod@counter& (0+255),f,b
 14747  0028B2  D000               	goto	l8242
 14748  0028B4                     l8242:
 14749                           
 14750                           ; BSR set to: 1
 14751  0028B4  0100               	movlb	0	; () banked
 14752  0028B6  BFFE               	btfsc	(___awmod@divisor+1)& (0+255),7,b
 14753  0028B8  D002               	goto	l8244
 14754  0028BA  D7F5               	goto	l8240
 14755                           
 14756                           ; BSR set to: 0
 14757  0028BC  D000               	goto	l8244
 14758  0028BE                     l8244:
 14759  0028BE  0100               	movlb	0	; () banked
 14760  0028C0  51FD               	movf	___awmod@divisor& (0+255),w,b
 14761  0028C2  0100               	movlb	0	; () banked
 14762  0028C4  5DFB               	subwf	___awmod@dividend& (0+255),w,b
 14763  0028C6  0100               	movlb	0	; () banked
 14764  0028C8  51FE               	movf	(___awmod@divisor+1)& (0+255),w,b
 14765  0028CA  0100               	movlb	0	; () banked
 14766  0028CC  59FC               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 14767  0028CE  A0D8               	btfss	status,0,c
 14768  0028D0  D009               	goto	l8248
 14769                           
 14770                           ; BSR set to: 0
 14771  0028D2  0100               	movlb	0	; () banked
 14772  0028D4  51FD               	movf	___awmod@divisor& (0+255),w,b
 14773  0028D6  0100               	movlb	0	; () banked
 14774  0028D8  5FFB               	subwf	___awmod@dividend& (0+255),f,b
 14775  0028DA  0100               	movlb	0	; () banked
 14776  0028DC  51FE               	movf	(___awmod@divisor+1)& (0+255),w,b
 14777  0028DE  0100               	movlb	0	; () banked
 14778  0028E0  5BFC               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 14779  0028E2  D000               	goto	l8248
 14780  0028E4                     l8248:
 14781                           
 14782                           ; BSR set to: 0
 14783  0028E4  0100               	movlb	0	; () banked
 14784  0028E6  90D8               	bcf	status,0,c
 14785  0028E8  33FE               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 14786  0028EA  33FD               	rrcf	___awmod@divisor& (0+255),f,b
 14787                           
 14788                           ; BSR set to: 0
 14789  0028EC  0101               	movlb	1	; () banked
 14790  0028EE  2F3D               	decfsz	___awmod@counter& (0+255),f,b
 14791  0028F0  D7E6               	goto	l8244
 14792                           
 14793                           ; BSR set to: 1
 14794  0028F2  D000               	goto	l8252
 14795  0028F4                     l8252:
 14796  0028F4  0101               	movlb	1	; () banked
 14797  0028F6  513E               	movf	___awmod@sign& (0+255),w,b
 14798  0028F8  0101               	movlb	1	; () banked
 14799  0028FA  B4D8               	btfsc	status,2,c
 14800  0028FC  D006               	goto	l8256
 14801                           
 14802                           ; BSR set to: 1
 14803  0028FE  0100               	movlb	0	; () banked
 14804  002900  6DFB               	negf	___awmod@dividend& (0+255),b
 14805  002902  1FFC               	comf	(___awmod@dividend+1)& (0+255),f,b
 14806  002904  B0D8               	btfsc	status,0,c
 14807  002906  2BFC               	incf	(___awmod@dividend+1)& (0+255),f,b
 14808  002908  D000               	goto	l8256
 14809  00290A                     l8256:
 14810  00290A  C0FB  F0FB         	movff	___awmod@dividend,?___awmod
 14811  00290E  C0FC  F0FC         	movff	___awmod@dividend+1,?___awmod+1
 14812  002912  D000               	goto	l1676
 14813  002914                     l1676:
 14814  002914  0012               	return		;funcret
 14815  002916                     __end_of___awmod:
 14816                           	opt stack 0
 14817                           tblptru	equ	0xFF8
 14818                           tblptrh	equ	0xFF7
 14819                           tblptrl	equ	0xFF6
 14820                           tablat	equ	0xFF5
 14821                           prodh	equ	0xFF4
 14822                           prodl	equ	0xFF3
 14823                           intcon	equ	0xFF2
 14824                           intcon2	equ	0xFF1
 14825                           postinc0	equ	0xFEE
 14826                           wreg	equ	0xFE8
 14827                           postdec1	equ	0xFE5
 14828                           fsr1l	equ	0xFE1
 14829                           indf2	equ	0xFDF
 14830                           postinc2	equ	0xFDE
 14831                           fsr2h	equ	0xFDA
 14832                           fsr2l	equ	0xFD9
 14833                           status	equ	0xFD8
 14834                           
 14835 ;; *************** function ___awdiv *****************
 14836 ;; Defined at:
 14837 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 14838 ;; Parameters:    Size  Location     Type
 14839 ;;  dividend        2   22[COMRAM] int 
 14840 ;;  divisor         2   24[COMRAM] int 
 14841 ;; Auto vars:     Size  Location     Type
 14842 ;;  quotient        2   28[COMRAM] int 
 14843 ;;  sign            1   27[COMRAM] unsigned char 
 14844 ;;  counter         1   26[COMRAM] unsigned char 
 14845 ;; Return value:  Size  Location     Type
 14846 ;;                  2   22[COMRAM] int 
 14847 ;; Registers used:
 14848 ;;		wreg, status,2, status,0
 14849 ;; Tracked objects:
 14850 ;;		On entry : 0/0
 14851 ;;		On exit  : 0/0
 14852 ;;		Unchanged: 0/0
 14853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14854 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14855 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14857 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14858 ;;Total ram usage:        8 bytes
 14859 ;; Hardware stack levels used:    1
 14860 ;; Hardware stack levels required when called:    3
 14861 ;; This function calls:
 14862 ;;		Nothing
 14863 ;; This function is called by:
 14864 ;;		_get_RPM
 14865 ;;		_main
 14866 ;;		_Update_Screen
 14867 ;;		_Update_Setup_Alarm_Time_Screen
 14868 ;;		_Update_Setup_Heater_Screen
 14869 ;;		_Update_Setup_Time_Screen
 14870 ;;		_dec_2_bcd
 14871 ;; This function uses a non-reentrant model
 14872 ;;
 14873                           
 14874                           	psect	text82
 14875  002A4E                     __ptext82:
 14876                           	opt stack 0
 14877  002A4E                     ___awdiv:
 14878                           	opt stack 26
 14879                           
 14880                           ;incstack = 0
 14881  002A4E  0E00               	movlw	0
 14882  002A50  6E1C               	movwf	___awdiv@sign,c
 14883  002A52  AE1A               	btfss	___awdiv@divisor+1,7,c
 14884  002A54  D007               	goto	l8188
 14885  002A56  6C19               	negf	___awdiv@divisor,c
 14886  002A58  1E1A               	comf	___awdiv@divisor+1,f,c
 14887  002A5A  B0D8               	btfsc	status,0,c
 14888  002A5C  2A1A               	incf	___awdiv@divisor+1,f,c
 14889  002A5E  0E01               	movlw	1
 14890  002A60  6E1C               	movwf	___awdiv@sign,c
 14891  002A62  D000               	goto	l8188
 14892  002A64                     l8188:
 14893  002A64  AE18               	btfss	___awdiv@dividend+1,7,c
 14894  002A66  D007               	goto	l8194
 14895  002A68  6C17               	negf	___awdiv@dividend,c
 14896  002A6A  1E18               	comf	___awdiv@dividend+1,f,c
 14897  002A6C  B0D8               	btfsc	status,0,c
 14898  002A6E  2A18               	incf	___awdiv@dividend+1,f,c
 14899  002A70  0E01               	movlw	1
 14900  002A72  1A1C               	xorwf	___awdiv@sign,f,c
 14901  002A74  D000               	goto	l8194
 14902  002A76                     l8194:
 14903  002A76  0E00               	movlw	0
 14904  002A78  6E1E               	movwf	___awdiv@quotient+1,c
 14905  002A7A  0E00               	movlw	0
 14906  002A7C  6E1D               	movwf	___awdiv@quotient,c
 14907  002A7E  5019               	movf	___awdiv@divisor,w,c
 14908  002A80  101A               	iorwf	___awdiv@divisor+1,w,c
 14909  002A82  B4D8               	btfsc	status,2,c
 14910  002A84  D021               	goto	l8216
 14911  002A86  0E01               	movlw	1
 14912  002A88  6E1B               	movwf	___awdiv@counter,c
 14913  002A8A  D005               	goto	l8202
 14914  002A8C                     l8200:
 14915  002A8C  90D8               	bcf	status,0,c
 14916  002A8E  3619               	rlcf	___awdiv@divisor,f,c
 14917  002A90  361A               	rlcf	___awdiv@divisor+1,f,c
 14918  002A92  2A1B               	incf	___awdiv@counter,f,c
 14919  002A94  D000               	goto	l8202
 14920  002A96                     l8202:
 14921  002A96  BE1A               	btfsc	___awdiv@divisor+1,7,c
 14922  002A98  D002               	goto	l8204
 14923  002A9A  D7F8               	goto	l8200
 14924  002A9C  D000               	goto	l8204
 14925  002A9E                     l8204:
 14926  002A9E  90D8               	bcf	status,0,c
 14927  002AA0  361D               	rlcf	___awdiv@quotient,f,c
 14928  002AA2  361E               	rlcf	___awdiv@quotient+1,f,c
 14929  002AA4  5019               	movf	___awdiv@divisor,w,c
 14930  002AA6  5C17               	subwf	___awdiv@dividend,w,c
 14931  002AA8  501A               	movf	___awdiv@divisor+1,w,c
 14932  002AAA  5818               	subwfb	___awdiv@dividend+1,w,c
 14933  002AAC  A0D8               	btfss	status,0,c
 14934  002AAE  D006               	goto	l8212
 14935  002AB0  5019               	movf	___awdiv@divisor,w,c
 14936  002AB2  5E17               	subwf	___awdiv@dividend,f,c
 14937  002AB4  501A               	movf	___awdiv@divisor+1,w,c
 14938  002AB6  5A18               	subwfb	___awdiv@dividend+1,f,c
 14939  002AB8  801D               	bsf	___awdiv@quotient,0,c
 14940  002ABA  D000               	goto	l8212
 14941  002ABC                     l8212:
 14942  002ABC  90D8               	bcf	status,0,c
 14943  002ABE  321A               	rrcf	___awdiv@divisor+1,f,c
 14944  002AC0  3219               	rrcf	___awdiv@divisor,f,c
 14945  002AC2  2E1B               	decfsz	___awdiv@counter,f,c
 14946  002AC4  D7EC               	goto	l8204
 14947  002AC6  D000               	goto	l8216
 14948  002AC8                     l8216:
 14949  002AC8  501C               	movf	___awdiv@sign,w,c
 14950  002ACA  B4D8               	btfsc	status,2,c
 14951  002ACC  D005               	goto	l8220
 14952  002ACE  6C1D               	negf	___awdiv@quotient,c
 14953  002AD0  1E1E               	comf	___awdiv@quotient+1,f,c
 14954  002AD2  B0D8               	btfsc	status,0,c
 14955  002AD4  2A1E               	incf	___awdiv@quotient+1,f,c
 14956  002AD6  D000               	goto	l8220
 14957  002AD8                     l8220:
 14958  002AD8  C01D  F017         	movff	___awdiv@quotient,?___awdiv
 14959  002ADC  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
 14960  002AE0  D000               	goto	l1663
 14961  002AE2                     l1663:
 14962  002AE2  0012               	return		;funcret
 14963  002AE4                     __end_of___awdiv:
 14964                           	opt stack 0
 14965                           tblptru	equ	0xFF8
 14966                           tblptrh	equ	0xFF7
 14967                           tblptrl	equ	0xFF6
 14968                           tablat	equ	0xFF5
 14969                           prodh	equ	0xFF4
 14970                           prodl	equ	0xFF3
 14971                           intcon	equ	0xFF2
 14972                           intcon2	equ	0xFF1
 14973                           postinc0	equ	0xFEE
 14974                           wreg	equ	0xFE8
 14975                           postdec1	equ	0xFE5
 14976                           fsr1l	equ	0xFE1
 14977                           indf2	equ	0xFDF
 14978                           postinc2	equ	0xFDE
 14979                           fsr2h	equ	0xFDA
 14980                           fsr2l	equ	0xFD9
 14981                           status	equ	0xFD8
 14982                           
 14983 ;; *************** function _Do_Init *****************
 14984 ;; Defined at:
 14985 ;;		line 96 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Main.c"
 14986 ;; Parameters:    Size  Location     Type
 14987 ;;		None
 14988 ;; Auto vars:     Size  Location     Type
 14989 ;;		None
 14990 ;; Return value:  Size  Location     Type
 14991 ;;		None               void
 14992 ;; Registers used:
 14993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14994 ;; Tracked objects:
 14995 ;;		On entry : 0/0
 14996 ;;		On exit  : 0/0
 14997 ;;		Unchanged: 0/0
 14998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15003 ;;Total ram usage:        0 bytes
 15004 ;; Hardware stack levels used:    1
 15005 ;; Hardware stack levels required when called:    7
 15006 ;; This function calls:
 15007 ;;		_DS1621_Init
 15008 ;;		_I2C_Init
 15009 ;;		_Init_ADC
 15010 ;;		_Init_Interrupt
 15011 ;;		_Turn_Off_Fan
 15012 ;;		_init_UART
 15013 ;; This function is called by:
 15014 ;;		_main
 15015 ;; This function uses a non-reentrant model
 15016 ;;
 15017                           
 15018                           	psect	text83
 15019  003134                     __ptext83:
 15020                           	opt stack 0
 15021  003134                     _Do_Init:
 15022                           	opt stack 23
 15023                           
 15024                           ;Main.c: 98: init_UART();
 15025                           
 15026                           ;incstack = 0
 15027  003134  EC63  F01D         	call	_init_UART	;wreg free
 15028                           
 15029                           ;Main.c: 99: Init_ADC();
 15030  003138  ECD3  F01D         	call	_Init_ADC	;wreg free
 15031                           
 15032                           ;Main.c: 100: OSCCON=0x70;
 15033  00313C  0E70               	movlw	112
 15034  00313E  6ED3               	movwf	4051,c	;volatile
 15035                           
 15036                           ;Main.c: 102: ADCON1=0x0E;
 15037  003140  0E0E               	movlw	14
 15038  003142  6EC1               	movwf	4033,c	;volatile
 15039                           
 15040                           ;Main.c: 103: TRISA = 0x11;
 15041  003144  0E11               	movlw	17
 15042  003146  6E92               	movwf	3986,c	;volatile
 15043                           
 15044                           ;Main.c: 104: TRISB = 0x07;
 15045  003148  0E07               	movlw	7
 15046  00314A  6E93               	movwf	3987,c	;volatile
 15047                           
 15048                           ;Main.c: 105: TRISC = 0x01;
 15049  00314C  0E01               	movlw	1
 15050  00314E  6E94               	movwf	3988,c	;volatile
 15051                           
 15052                           ;Main.c: 106: TRISD = 0x00;
 15053  003150  0E00               	movlw	0
 15054  003152  6E95               	movwf	3989,c	;volatile
 15055                           
 15056                           ;Main.c: 107: TRISE = 0x00;
 15057  003154  0E00               	movlw	0
 15058  003156  6E96               	movwf	3990,c	;volatile
 15059                           
 15060                           ;Main.c: 108: PORTE = 0x00;
 15061  003158  0E00               	movlw	0
 15062  00315A  6E84               	movwf	3972,c	;volatile
 15063                           
 15064                           ;Main.c: 110: HEATER = 0;
 15065  00315C  0E00               	movlw	0
 15066  00315E  6E54               	movwf	_HEATER,c
 15067                           
 15068                           ;Main.c: 111: RBPU=0;
 15069  003160  9EF1               	bcf	intcon2,7,c	;volatile
 15070                           
 15071                           ;Main.c: 113: TMR3L = 0x00;
 15072  003162  0E00               	movlw	0
 15073  003164  6EB2               	movwf	4018,c	;volatile
 15074                           
 15075                           ;Main.c: 114: T3CON = 0x03;
 15076  003166  0E03               	movlw	3
 15077  003168  6EB1               	movwf	4017,c	;volatile
 15078                           
 15079                           ;Main.c: 115: I2C_Init(100000);
 15080  00316A  0EA0               	movlw	160
 15081  00316C  6E11               	movwf	I2C_Init@c,c
 15082  00316E  0E86               	movlw	134
 15083  003170  6E12               	movwf	I2C_Init@c+1,c
 15084  003172  0E01               	movlw	1
 15085  003174  6E13               	movwf	I2C_Init@c+2,c
 15086  003176  0E00               	movlw	0
 15087  003178  6E14               	movwf	I2C_Init@c+3,c
 15088  00317A  ECE7  F01D         	call	_I2C_Init	;wreg free
 15089                           
 15090                           ;Main.c: 117: DS1621_Init();
 15091  00317E  ECC5  F01C         	call	_DS1621_Init	;wreg free
 15092                           
 15093                           ;Main.c: 118: Init_Interrupt();
 15094  003182  EC61  F01C         	call	_Init_Interrupt	;wreg free
 15095                           
 15096                           ;Main.c: 119: Turn_Off_Fan();
 15097  003186  EC39  F01D         	call	_Turn_Off_Fan	;wreg free
 15098                           
 15099                           ;Main.c: 120: heater_set_temp = 75;
 15100  00318A  0E4B               	movlw	75
 15101  00318C  6E6E               	movwf	_heater_set_temp,c
 15102  00318E  0012               	return		;funcret
 15103  003190                     __end_of_Do_Init:
 15104                           	opt stack 0
 15105                           tblptru	equ	0xFF8
 15106                           tblptrh	equ	0xFF7
 15107                           tblptrl	equ	0xFF6
 15108                           tablat	equ	0xFF5
 15109                           prodh	equ	0xFF4
 15110                           prodl	equ	0xFF3
 15111                           intcon	equ	0xFF2
 15112                           intcon2	equ	0xFF1
 15113                           postinc0	equ	0xFEE
 15114                           wreg	equ	0xFE8
 15115                           postdec1	equ	0xFE5
 15116                           fsr1l	equ	0xFE1
 15117                           indf2	equ	0xFDF
 15118                           postinc2	equ	0xFDE
 15119                           fsr2h	equ	0xFDA
 15120                           fsr2l	equ	0xFD9
 15121                           status	equ	0xFD8
 15122                           
 15123 ;; *************** function _init_UART *****************
 15124 ;; Defined at:
 15125 ;;		line 88 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Main.c"
 15126 ;; Parameters:    Size  Location     Type
 15127 ;;		None
 15128 ;; Auto vars:     Size  Location     Type
 15129 ;;		None
 15130 ;; Return value:  Size  Location     Type
 15131 ;;		None               void
 15132 ;; Registers used:
 15133 ;;		wreg, status,2, cstack
 15134 ;; Tracked objects:
 15135 ;;		On entry : 0/0
 15136 ;;		On exit  : 0/0
 15137 ;;		Unchanged: 0/0
 15138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15143 ;;Total ram usage:        0 bytes
 15144 ;; Hardware stack levels used:    1
 15145 ;; Hardware stack levels required when called:    4
 15146 ;; This function calls:
 15147 ;;		_OpenUSART
 15148 ;; This function is called by:
 15149 ;;		_Do_Init
 15150 ;; This function uses a non-reentrant model
 15151 ;;
 15152                           
 15153                           	psect	text84
 15154  003AC6                     __ptext84:
 15155                           	opt stack 0
 15156  003AC6                     _init_UART:
 15157                           	opt stack 25
 15158                           
 15159                           ;Main.c: 90: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 &
      +                           0b11111111, 25);
 15160                           
 15161                           ;incstack = 0
 15162  003AC6  0E00               	movlw	0
 15163  003AC8  6E12               	movwf	OpenUSART@spbrg+1,c
 15164  003ACA  0E19               	movlw	25
 15165  003ACC  6E11               	movwf	OpenUSART@spbrg,c
 15166  003ACE  0E3C               	movlw	60
 15167  003AD0  ECC4  F017         	call	_OpenUSART
 15168                           
 15169                           ;Main.c: 91: OSCCON = 0x70;
 15170  003AD4  0E70               	movlw	112
 15171  003AD6  6ED3               	movwf	4051,c	;volatile
 15172  003AD8  0012               	return		;funcret
 15173  003ADA                     __end_of_init_UART:
 15174                           	opt stack 0
 15175                           tblptru	equ	0xFF8
 15176                           tblptrh	equ	0xFF7
 15177                           tblptrl	equ	0xFF6
 15178                           tablat	equ	0xFF5
 15179                           prodh	equ	0xFF4
 15180                           prodl	equ	0xFF3
 15181                           intcon	equ	0xFF2
 15182                           intcon2	equ	0xFF1
 15183                           postinc0	equ	0xFEE
 15184                           wreg	equ	0xFE8
 15185                           postdec1	equ	0xFE5
 15186                           fsr1l	equ	0xFE1
 15187                           indf2	equ	0xFDF
 15188                           postinc2	equ	0xFDE
 15189                           fsr2h	equ	0xFDA
 15190                           fsr2l	equ	0xFD9
 15191                           status	equ	0xFD8
 15192                           
 15193 ;; *************** function _OpenUSART *****************
 15194 ;; Defined at:
 15195 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 15196 ;; Parameters:    Size  Location     Type
 15197 ;;  config          1    wreg     unsigned char 
 15198 ;;  spbrg           2   16[COMRAM] unsigned int 
 15199 ;; Auto vars:     Size  Location     Type
 15200 ;;  config          1   18[COMRAM] unsigned char 
 15201 ;; Return value:  Size  Location     Type
 15202 ;;		None               void
 15203 ;; Registers used:
 15204 ;;		wreg, status,2
 15205 ;; Tracked objects:
 15206 ;;		On entry : 0/0
 15207 ;;		On exit  : 0/0
 15208 ;;		Unchanged: 0/0
 15209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15210 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15213 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15214 ;;Total ram usage:        3 bytes
 15215 ;; Hardware stack levels used:    1
 15216 ;; Hardware stack levels required when called:    3
 15217 ;; This function calls:
 15218 ;;		Nothing
 15219 ;; This function is called by:
 15220 ;;		_init_UART
 15221 ;; This function uses a non-reentrant model
 15222 ;;
 15223                           
 15224                           	psect	text85
 15225  002F88                     __ptext85:
 15226                           	opt stack 0
 15227  002F88                     _OpenUSART:
 15228                           	opt stack 25
 15229                           
 15230                           ;incstack = 0
 15231                           ;OpenUSART@config stored from wreg
 15232  002F88  6E13               	movwf	OpenUSART@config,c
 15233  002F8A  0E00               	movlw	0
 15234  002F8C  6EAC               	movwf	4012,c	;volatile
 15235  002F8E  0E00               	movlw	0
 15236  002F90  6EAB               	movwf	4011,c	;volatile
 15237  002F92  A013               	btfss	OpenUSART@config,0,c
 15238  002F94  D002               	goto	l5946
 15239  002F96  88AC               	bsf	4012,4,c	;volatile
 15240  002F98  D000               	goto	l5946
 15241  002F9A                     l5946:
 15242  002F9A  A213               	btfss	OpenUSART@config,1,c
 15243  002F9C  D003               	goto	l5950
 15244  002F9E  8CAC               	bsf	4012,6,c	;volatile
 15245  002FA0  8CAB               	bsf	4011,6,c	;volatile
 15246  002FA2  D000               	goto	l5950
 15247  002FA4                     l5950:
 15248  002FA4  A413               	btfss	OpenUSART@config,2,c
 15249  002FA6  D002               	goto	l5954
 15250  002FA8  8EAC               	bsf	4012,7,c	;volatile
 15251  002FAA  D000               	goto	l5954
 15252  002FAC                     l5954:
 15253  002FAC  A613               	btfss	OpenUSART@config,3,c
 15254  002FAE  D002               	goto	l1458
 15255  002FB0  88AB               	bsf	4011,4,c	;volatile
 15256  002FB2  D002               	goto	l5958
 15257  002FB4                     l1458:
 15258  002FB4  8AAB               	bsf	4011,5,c	;volatile
 15259  002FB6  D000               	goto	l5958
 15260  002FB8                     l5958:
 15261  002FB8  B813               	btfsc	OpenUSART@config,4,c
 15262  002FBA  84AC               	bsf	4012,2,c	;volatile
 15263  002FBC  989E               	bcf	3998,4,c	;volatile
 15264  002FBE  AA13               	btfss	OpenUSART@config,5,c
 15265  002FC0  D002               	goto	l5966
 15266  002FC2  86AB               	bsf	4011,3,c	;volatile
 15267  002FC4  D000               	goto	l5966
 15268  002FC6                     l5966:
 15269  002FC6  AC13               	btfss	OpenUSART@config,6,c
 15270  002FC8  D002               	goto	l1462
 15271  002FCA  8A9D               	bsf	3997,5,c	;volatile
 15272  002FCC  D001               	goto	l1463
 15273  002FCE                     l1462:
 15274  002FCE  9A9D               	bcf	3997,5,c	;volatile
 15275  002FD0                     l1463:
 15276  002FD0  9A9E               	bcf	3998,5,c	;volatile
 15277  002FD2  AE13               	btfss	OpenUSART@config,7,c
 15278  002FD4  D002               	goto	l1464
 15279  002FD6  889D               	bsf	3997,4,c	;volatile
 15280  002FD8  D001               	goto	l1465
 15281  002FDA                     l1464:
 15282  002FDA  989D               	bcf	3997,4,c	;volatile
 15283  002FDC                     l1465:
 15284  002FDC  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 15285  002FE0  5012               	movf	OpenUSART@spbrg+1,w,c
 15286  002FE2  6EB0               	movwf	4016,c	;volatile
 15287  002FE4  8AAC               	bsf	4012,5,c	;volatile
 15288  002FE6  8EAB               	bsf	4011,7,c	;volatile
 15289  002FE8  9C94               	bcf	3988,6,c	;volatile
 15290  002FEA  8E94               	bsf	3988,7,c	;volatile
 15291  002FEC  B8AC               	btfsc	4012,4,c	;volatile
 15292  002FEE  BEAC               	btfsc	4012,7,c	;volatile
 15293  002FF0  D002               	goto	l1467
 15294  002FF2  8C94               	bsf	3988,6,c	;volatile
 15295  002FF4  D000               	goto	l1467
 15296  002FF6                     l1467:
 15297  002FF6  0012               	return		;funcret
 15298  002FF8                     __end_of_OpenUSART:
 15299                           	opt stack 0
 15300                           tblptru	equ	0xFF8
 15301                           tblptrh	equ	0xFF7
 15302                           tblptrl	equ	0xFF6
 15303                           tablat	equ	0xFF5
 15304                           prodh	equ	0xFF4
 15305                           prodl	equ	0xFF3
 15306                           intcon	equ	0xFF2
 15307                           intcon2	equ	0xFF1
 15308                           postinc0	equ	0xFEE
 15309                           wreg	equ	0xFE8
 15310                           postdec1	equ	0xFE5
 15311                           fsr1l	equ	0xFE1
 15312                           indf2	equ	0xFDF
 15313                           postinc2	equ	0xFDE
 15314                           fsr2h	equ	0xFDA
 15315                           fsr2l	equ	0xFD9
 15316                           status	equ	0xFD8
 15317                           
 15318 ;; *************** function _Turn_Off_Fan *****************
 15319 ;; Defined at:
 15320 ;;		line 85 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Fan_Support.c"
 15321 ;; Parameters:    Size  Location     Type
 15322 ;;		None
 15323 ;; Auto vars:     Size  Location     Type
 15324 ;;		None
 15325 ;; Return value:  Size  Location     Type
 15326 ;;		None               void
 15327 ;; Registers used:
 15328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15329 ;; Tracked objects:
 15330 ;;		On entry : 0/0
 15331 ;;		On exit  : 0/0
 15332 ;;		Unchanged: 0/0
 15333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15338 ;;Total ram usage:        0 bytes
 15339 ;; Hardware stack levels used:    1
 15340 ;; Hardware stack levels required when called:    5
 15341 ;; This function calls:
 15342 ;;		_printf
 15343 ;; This function is called by:
 15344 ;;		_Toggle_Heater
 15345 ;;		_Do_Init
 15346 ;; This function uses a non-reentrant model
 15347 ;;
 15348                           
 15349                           	psect	text86
 15350  003A72                     __ptext86:
 15351                           	opt stack 0
 15352  003A72                     _Turn_Off_Fan:
 15353                           	opt stack 24
 15354                           
 15355                           ;Fan_Support.c: 88: printf("Fan Turned Off\n");
 15356                           
 15357                           ;incstack = 0
 15358  003A72  0E50               	movlw	low STR_2
 15359  003A74  6E1D               	movwf	printf@f,c
 15360  003A76  0EFF               	movlw	high STR_2
 15361  003A78  6E1E               	movwf	printf@f+1,c
 15362  003A7A  ECE7  F004         	call	_printf	;wreg free
 15363                           
 15364                           ;Fan_Support.c: 89: HEATER = 0;
 15365  003A7E  0E00               	movlw	0
 15366  003A80  6E54               	movwf	_HEATER,c
 15367                           
 15368                           ;Fan_Support.c: 90: PORTAbits.RA4 = 0;
 15369  003A82  9880               	bcf	3968,4,c	;volatile
 15370                           
 15371                           ;Fan_Support.c: 91: PORTDbits.RD3 = 0;
 15372  003A84  9683               	bcf	3971,3,c	;volatile
 15373  003A86  0012               	return		;funcret
 15374  003A88                     __end_of_Turn_Off_Fan:
 15375                           	opt stack 0
 15376                           tblptru	equ	0xFF8
 15377                           tblptrh	equ	0xFF7
 15378                           tblptrl	equ	0xFF6
 15379                           tablat	equ	0xFF5
 15380                           prodh	equ	0xFF4
 15381                           prodl	equ	0xFF3
 15382                           intcon	equ	0xFF2
 15383                           intcon2	equ	0xFF1
 15384                           postinc0	equ	0xFEE
 15385                           wreg	equ	0xFE8
 15386                           postdec1	equ	0xFE5
 15387                           fsr1l	equ	0xFE1
 15388                           indf2	equ	0xFDF
 15389                           postinc2	equ	0xFDE
 15390                           fsr2h	equ	0xFDA
 15391                           fsr2l	equ	0xFD9
 15392                           status	equ	0xFD8
 15393                           
 15394 ;; *************** function _printf *****************
 15395 ;; Defined at:
 15396 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15397 ;; Parameters:    Size  Location     Type
 15398 ;;  f               2   28[COMRAM] PTR const unsigned char 
 15399 ;;		 -> STR_39(22), STR_30(11), STR_7(20), STR_6(24), 
 15400 ;;		 -> STR_5(21), STR_4(30), STR_3(15), STR_2(16), 
 15401 ;;		 -> STR_1(16), 
 15402 ;; Auto vars:     Size  Location     Type
 15403 ;;  idx             1   46[COMRAM] unsigned char 
 15404 ;;  tmpval          4    0        struct .
 15405 ;;  cp              3    0        PTR const unsigned char 
 15406 ;;  width           2   53[COMRAM] int 
 15407 ;;  val             2   50[COMRAM] unsigned int 
 15408 ;;  ap              2   47[COMRAM] PTR void [1]
 15409 ;;		 -> ?_printf(2), 
 15410 ;;  len             2    0        unsigned int 
 15411 ;;  c               1   55[COMRAM] char 
 15412 ;;  flag            1   52[COMRAM] unsigned char 
 15413 ;;  prec            1   49[COMRAM] char 
 15414 ;; Return value:  Size  Location     Type
 15415 ;;                  2   28[COMRAM] int 
 15416 ;; Registers used:
 15417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15418 ;; Tracked objects:
 15419 ;;		On entry : 0/0
 15420 ;;		On exit  : 0/0
 15421 ;;		Unchanged: 0/0
 15422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15423 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15424 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15425 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15426 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15427 ;;Total ram usage:       28 bytes
 15428 ;; Hardware stack levels used:    1
 15429 ;; Hardware stack levels required when called:    4
 15430 ;; This function calls:
 15431 ;;		___lwdiv
 15432 ;;		___lwmod
 15433 ;;		___wmul
 15434 ;;		_isdigit
 15435 ;;		_putch
 15436 ;; This function is called by:
 15437 ;;		_Toggle_Heater
 15438 ;;		_Turn_Off_Fan
 15439 ;;		_Turn_On_Fan
 15440 ;;		_main
 15441 ;;		_Update_Setup_Alarm_Time_Screen
 15442 ;;		_check_for_button_input
 15443 ;; This function uses a non-reentrant model
 15444 ;;
 15445                           
 15446                           	psect	text87
 15447  0009CE                     __ptext87:
 15448                           	opt stack 0
 15449  0009CE                     _printf:
 15450                           	opt stack 26
 15451                           
 15452                           ;doprnt.c: 466: va_list ap;
 15453                           ;doprnt.c: 499: signed char c;
 15454                           ;doprnt.c: 501: int width;
 15455                           ;doprnt.c: 506: signed char prec;
 15456                           ;doprnt.c: 508: unsigned char flag;
 15457                           ;doprnt.c: 523: union {
 15458                           ;doprnt.c: 524: unsigned long vd;
 15459                           ;doprnt.c: 525: double integ;
 15460                           ;doprnt.c: 526: } tmpval;
 15461                           ;doprnt.c: 528: unsigned int val;
 15462                           ;doprnt.c: 529: unsigned len;
 15463                           ;doprnt.c: 530: const char * cp;
 15464                           ;doprnt.c: 533: *ap = __va_start();
 15465                           
 15466                           ;incstack = 0
 15467  0009CE  0E1F               	movlw	low (?_printf+2)
 15468  0009D0  6E30               	movwf	printf@ap,c
 15469  0009D2  0E00               	movlw	high (?_printf+2)
 15470  0009D4  6E31               	movwf	printf@ap+1,c
 15471                           
 15472                           ;doprnt.c: 536: while(c = *f++) {
 15473  0009D6  D199               	goto	l8388
 15474  0009D8                     l8262:
 15475                           
 15476                           ;doprnt.c: 538: if(c != '%')
 15477  0009D8  0E25               	movlw	37
 15478  0009DA  1838               	xorwf	printf@c,w,c
 15479  0009DC  B4D8               	btfsc	status,2,c
 15480  0009DE  D004               	goto	l8266
 15481                           
 15482                           ;doprnt.c: 540: {
 15483                           ;doprnt.c: 541: (putch(c) );
 15484  0009E0  5038               	movf	printf@c,w,c
 15485  0009E2  ECCC  F01D         	call	_putch
 15486                           
 15487                           ;doprnt.c: 542: continue;
 15488  0009E6  D191               	goto	l8388
 15489  0009E8                     l8266:
 15490                           
 15491                           ;doprnt.c: 543: }
 15492                           ;doprnt.c: 546: width = 0;
 15493  0009E8  0E00               	movlw	0
 15494  0009EA  6E37               	movwf	printf@width+1,c
 15495  0009EC  0E00               	movlw	0
 15496  0009EE  6E36               	movwf	printf@width,c
 15497                           
 15498                           ;doprnt.c: 548: flag = 0;
 15499  0009F0  0E00               	movlw	0
 15500  0009F2  6E35               	movwf	printf@flag,c
 15501                           
 15502                           ;doprnt.c: 551: switch(*f) {
 15503                           
 15504                           ;doprnt.c: 550: for(;;) {
 15505  0009F4  D005               	goto	l8272
 15506  0009F6                     l8268:
 15507                           
 15508                           ;doprnt.c: 580: flag |= 0x04;
 15509  0009F6  8435               	bsf	printf@flag,2,c
 15510                           
 15511                           ;doprnt.c: 581: f++;
 15512  0009F8  4A1D               	infsnz	printf@f,f,c
 15513  0009FA  2A1E               	incf	printf@f+1,f,c
 15514                           
 15515                           ;doprnt.c: 582: continue;
 15516  0009FC  D001               	goto	l8272
 15517                           
 15518                           ;doprnt.c: 584: }
 15519  0009FE  D00B               	goto	l8274
 15520  000A00                     l8272:
 15521  000A00  C01D  FFF6         	movff	printf@f,tblptrl
 15522  000A04  C01E  FFF7         	movff	printf@f+1,tblptrh
 15523  000A08                     	if	0	;tblptru may be non-zero
 15524  000A08                     	endif
 15525  000A08                     	if	0	;tblptru may be non-zero
 15526  000A08                     	endif
 15527  000A08  0008               	tblrd		*
 15528  000A0A  50F5               	movf	tablat,w,c
 15529                           
 15530                           ; Switch size 1, requested type "space"
 15531                           ; Number of cases is 1, Range of values is 48 to 48
 15532                           ; switch strategies available:
 15533                           ; Name         Instructions Cycles
 15534                           ; simple_byte            4     3 (average)
 15535                           ;	Chosen strategy is simple_byte
 15536  000A0C  0A30               	xorlw	48	; case 48
 15537  000A0E  B4D8               	btfsc	status,2,c
 15538  000A10  D7F2               	goto	l8268
 15539                           
 15540                           ;doprnt.c: 585: break;
 15541  000A12  D001               	goto	l8274
 15542                           
 15543                           ;doprnt.c: 586: }
 15544  000A14  D7F5               	goto	l8272
 15545  000A16                     l8274:
 15546                           
 15547                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15548  000A16  C01D  FFF6         	movff	printf@f,tblptrl
 15549  000A1A  C01E  FFF7         	movff	printf@f+1,tblptrh
 15550  000A1E                     	if	0	;tblptru may be non-zero
 15551  000A1E                     	endif
 15552  000A1E                     	if	0	;tblptru may be non-zero
 15553  000A1E                     	endif
 15554  000A1E  0008               	tblrd		*
 15555  000A20  50F5               	movf	tablat,w,c
 15556  000A22  EC84  F01C         	call	_isdigit
 15557  000A26  A0D8               	btfss	status,0,c
 15558  000A28  D03B               	goto	l8290
 15559                           
 15560                           ;doprnt.c: 598: width = 0;
 15561  000A2A  0E00               	movlw	0
 15562  000A2C  6E37               	movwf	printf@width+1,c
 15563  000A2E  0E00               	movlw	0
 15564  000A30  6E36               	movwf	printf@width,c
 15565  000A32  D000               	goto	l8278
 15566  000A34                     l8278:
 15567                           
 15568                           ;doprnt.c: 600: width *= 10;
 15569  000A34  C036  F011         	movff	printf@width,___wmul@multiplier
 15570  000A38  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
 15571  000A3C  0E00               	movlw	0
 15572  000A3E  6E14               	movwf	___wmul@multiplicand+1,c
 15573  000A40  0E0A               	movlw	10
 15574  000A42  6E13               	movwf	___wmul@multiplicand,c
 15575  000A44  EC27  F01C         	call	___wmul	;wreg free
 15576  000A48  C011  F036         	movff	?___wmul,printf@width
 15577  000A4C  C012  F037         	movff	?___wmul+1,printf@width+1
 15578                           
 15579                           ;doprnt.c: 601: width += *f++ - '0';
 15580  000A50  0ED0               	movlw	208
 15581  000A52  6E2B               	movwf	??_printf& (0+255),c
 15582  000A54  0EFF               	movlw	255
 15583  000A56  6E2C               	movwf	(??_printf+1)& (0+255),c
 15584  000A58  C01D  FFF6         	movff	printf@f,tblptrl
 15585  000A5C  C01E  FFF7         	movff	printf@f+1,tblptrh
 15586  000A60                     	if	0	;tblptru may be non-zero
 15587  000A60                     	endif
 15588  000A60                     	if	0	;tblptru may be non-zero
 15589  000A60                     	endif
 15590  000A60  0008               	tblrd		*
 15591  000A62  50F5               	movf	tablat,w,c
 15592  000A64  6E2D               	movwf	(??_printf+2)& (0+255),c
 15593  000A66  6A2E               	clrf	(??_printf+3)& (0+255),c
 15594  000A68  502B               	movf	??_printf,w,c
 15595  000A6A  262D               	addwf	??_printf+2,f,c
 15596  000A6C  502C               	movf	??_printf+1,w,c
 15597  000A6E  222E               	addwfc	??_printf+3,f,c
 15598  000A70  502D               	movf	??_printf+2,w,c
 15599  000A72  2636               	addwf	printf@width,f,c
 15600  000A74  502E               	movf	??_printf+3,w,c
 15601  000A76  2237               	addwfc	printf@width+1,f,c
 15602  000A78  4A1D               	infsnz	printf@f,f,c
 15603  000A7A  2A1E               	incf	printf@f+1,f,c
 15604                           
 15605                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15606  000A7C  C01D  FFF6         	movff	printf@f,tblptrl
 15607  000A80  C01E  FFF7         	movff	printf@f+1,tblptrh
 15608  000A84                     	if	0	;tblptru may be non-zero
 15609  000A84                     	endif
 15610  000A84                     	if	0	;tblptru may be non-zero
 15611  000A84                     	endif
 15612  000A84  0008               	tblrd		*
 15613  000A86  50F5               	movf	tablat,w,c
 15614  000A88  EC84  F01C         	call	_isdigit
 15615  000A8C  A0D8               	btfss	status,0,c
 15616  000A8E  D008               	goto	l8290
 15617  000A90  D7D1               	goto	l8278
 15618                           
 15619                           ;doprnt.c: 608: }
 15620                           ;doprnt.c: 635: switch(c = *f++) {
 15621  000A92  D006               	goto	l8290
 15622                           
 15623                           ;doprnt.c: 638: goto alldone;
 15624                           
 15625                           ;doprnt.c: 637: case 0:
 15626  000A94  D148               	goto	l1434
 15627                           
 15628                           ;doprnt.c: 698: case 'i':
 15629                           ;doprnt.c: 699: break;
 15630                           
 15631                           ;doprnt.c: 697: case 'd':
 15632  000A96  D01B               	goto	l1397
 15633  000A98                     l8286:
 15634                           
 15635                           ;doprnt.c: 721: flag |= 0x80;
 15636  000A98  8E35               	bsf	printf@flag,7,c
 15637                           
 15638                           ;doprnt.c: 723: break;
 15639  000A9A  D019               	goto	l1397
 15640                           
 15641                           ;doprnt.c: 813: continue;
 15642                           
 15643                           ;doprnt.c: 802: default:
 15644  000A9C  D136               	goto	l8388
 15645                           
 15646                           ;doprnt.c: 822: }
 15647  000A9E  D017               	goto	l1397
 15648  000AA0                     l8290:
 15649  000AA0  C01D  FFF6         	movff	printf@f,tblptrl
 15650  000AA4  C01E  FFF7         	movff	printf@f+1,tblptrh
 15651  000AA8  4A1D               	infsnz	printf@f,f,c
 15652  000AAA  2A1E               	incf	printf@f+1,f,c
 15653  000AAC                     	if	0	;tblptru may be non-zero
 15654  000AAC                     	endif
 15655  000AAC                     	if	0	;tblptru may be non-zero
 15656  000AAC                     	endif
 15657  000AAC  0008               	tblrd		*
 15658  000AAE  CFF5 F038          	movff	tablat,printf@c
 15659  000AB2  5038               	movf	printf@c,w,c
 15660                           
 15661                           ; Switch size 1, requested type "space"
 15662                           ; Number of cases is 4, Range of values is 0 to 120
 15663                           ; switch strategies available:
 15664                           ; Name         Instructions Cycles
 15665                           ; simple_byte           13     7 (average)
 15666                           ;	Chosen strategy is simple_byte
 15667  000AB4  0A00               	xorlw	0	; case 0
 15668  000AB6  B4D8               	btfsc	status,2,c
 15669  000AB8  D136               	goto	l1434
 15670  000ABA  0A64               	xorlw	100	; case 100
 15671  000ABC  B4D8               	btfsc	status,2,c
 15672  000ABE  D007               	goto	l1397
 15673  000AC0  0A0D               	xorlw	13	; case 105
 15674  000AC2  B4D8               	btfsc	status,2,c
 15675  000AC4  D004               	goto	l1397
 15676  000AC6  0A11               	xorlw	17	; case 120
 15677  000AC8  B4D8               	btfsc	status,2,c
 15678  000ACA  D7E6               	goto	l8286
 15679  000ACC  D11E               	goto	l8388
 15680  000ACE                     l1397:
 15681                           
 15682                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 15683  000ACE  BE35               	btfsc	printf@flag,7,c
 15684  000AD0  D015               	goto	l8302
 15685                           
 15686                           ;doprnt.c: 1253: {
 15687                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15688  000AD2  C030  FFD9         	movff	printf@ap,fsr2l
 15689  000AD6  C031  FFDA         	movff	printf@ap+1,fsr2h
 15690  000ADA  CFDE F033          	movff	postinc2,printf@val
 15691  000ADE  CFDD F034          	movff	postdec2,printf@val+1
 15692  000AE2  0E02               	movlw	2
 15693  000AE4  2630               	addwf	printf@ap,f,c
 15694  000AE6  0E00               	movlw	0
 15695  000AE8  2231               	addwfc	printf@ap+1,f,c
 15696                           
 15697                           ;doprnt.c: 1261: if((int)val < 0) {
 15698  000AEA  AE34               	btfss	printf@val+1,7,c
 15699  000AEC  D04E               	goto	l8336
 15700                           
 15701                           ;doprnt.c: 1262: flag |= 0x03;
 15702  000AEE  0E03               	movlw	3
 15703  000AF0  1235               	iorwf	printf@flag,f,c
 15704                           
 15705                           ;doprnt.c: 1263: val = -val;
 15706  000AF2  6C33               	negf	printf@val,c
 15707  000AF4  1E34               	comf	printf@val+1,f,c
 15708  000AF6  B0D8               	btfsc	status,0,c
 15709  000AF8  2A34               	incf	printf@val+1,f,c
 15710                           
 15711                           ;doprnt.c: 1264: }
 15712                           ;doprnt.c: 1266: }
 15713  000AFA  D047               	goto	l8336
 15714  000AFC                     l8302:
 15715                           
 15716                           ;doprnt.c: 1268: else
 15717                           ;doprnt.c: 1273: {
 15718                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15719  000AFC  C030  FFD9         	movff	printf@ap,fsr2l
 15720  000B00  C031  FFDA         	movff	printf@ap+1,fsr2h
 15721  000B04  CFDE F033          	movff	postinc2,printf@val
 15722  000B08  CFDD F034          	movff	postdec2,printf@val+1
 15723  000B0C  0E02               	movlw	2
 15724  000B0E  2630               	addwf	printf@ap,f,c
 15725  000B10  0E00               	movlw	0
 15726  000B12  2231               	addwfc	printf@ap+1,f,c
 15727                           
 15728                           ;doprnt.c: 1287: }
 15729                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 15730  000B14  D03A               	goto	l8336
 15731  000B16                     l8306:
 15732                           
 15733                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15734  000B16  0E01               	movlw	1
 15735  000B18  6E38               	movwf	printf@c,c
 15736  000B1A                     l8308:
 15737  000B1A  0E05               	movlw	5
 15738  000B1C  1838               	xorwf	printf@c,w,c
 15739  000B1E  B4D8               	btfsc	status,2,c
 15740  000B20  D03D               	goto	l8338
 15741  000B22  D001               	goto	l8312
 15742  000B24  D03B               	goto	l8338
 15743  000B26                     l8312:
 15744                           
 15745                           ;doprnt.c: 1306: if(val < dpowers[c])
 15746  000B26  5038               	movf	printf@c,w,c
 15747  000B28  0D02               	mullw	2
 15748  000B2A  0E72               	movlw	low _dpowers
 15749  000B2C  24F3               	addwf	prodl,w,c
 15750  000B2E  6EF6               	movwf	tblptrl,c
 15751  000B30  0EFE               	movlw	high _dpowers
 15752  000B32  20F4               	addwfc	prodh,w,c
 15753  000B34  6EF7               	movwf	tblptrh,c
 15754  000B36                     	if	0	;There are less than 3 active tblptr bytes
 15755  000B36                     	endif
 15756  000B36  0009               	tblrd		*+
 15757  000B38  50F5               	movf	tablat,w,c
 15758  000B3A  5C33               	subwf	printf@val,w,c
 15759  000B3C  0009               	tblrd		*+
 15760  000B3E  50F5               	movf	tablat,w,c
 15761  000B40  5834               	subwfb	printf@val+1,w,c
 15762  000B42  A0D8               	btfss	status,0,c
 15763  000B44  D02B               	goto	l8338
 15764  000B46  D001               	goto	l8316
 15765                           
 15766                           ;doprnt.c: 1307: break;
 15767  000B48  D029               	goto	l8338
 15768  000B4A                     l8316:
 15769  000B4A  2A38               	incf	printf@c,f,c
 15770  000B4C  D7E6               	goto	l8308
 15771                           
 15772                           ;doprnt.c: 1309: break;
 15773  000B4E  D026               	goto	l8338
 15774  000B50                     l8320:
 15775                           
 15776                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 15777  000B50  0E01               	movlw	1
 15778  000B52  6E38               	movwf	printf@c,c
 15779  000B54                     l8322:
 15780  000B54  0E04               	movlw	4
 15781  000B56  1838               	xorwf	printf@c,w,c
 15782  000B58  B4D8               	btfsc	status,2,c
 15783  000B5A  D020               	goto	l8338
 15784  000B5C  D001               	goto	l8326
 15785  000B5E  D01E               	goto	l8338
 15786  000B60                     l8326:
 15787                           
 15788                           ;doprnt.c: 1317: if(val < hexpowers[c])
 15789  000B60  5038               	movf	printf@c,w,c
 15790  000B62  0D02               	mullw	2
 15791  000B64  0E7C               	movlw	low _hexpowers
 15792  000B66  24F3               	addwf	prodl,w,c
 15793  000B68  6EF6               	movwf	tblptrl,c
 15794  000B6A  0EFE               	movlw	high _hexpowers
 15795  000B6C  20F4               	addwfc	prodh,w,c
 15796  000B6E  6EF7               	movwf	tblptrh,c
 15797  000B70                     	if	0	;There are less than 3 active tblptr bytes
 15798  000B70                     	endif
 15799  000B70  0009               	tblrd		*+
 15800  000B72  50F5               	movf	tablat,w,c
 15801  000B74  5C33               	subwf	printf@val,w,c
 15802  000B76  0009               	tblrd		*+
 15803  000B78  50F5               	movf	tablat,w,c
 15804  000B7A  5834               	subwfb	printf@val+1,w,c
 15805  000B7C  A0D8               	btfss	status,0,c
 15806  000B7E  D00E               	goto	l8338
 15807  000B80  D001               	goto	l8330
 15808                           
 15809                           ;doprnt.c: 1318: break;
 15810  000B82  D00C               	goto	l8338
 15811  000B84                     l8330:
 15812  000B84  2A38               	incf	printf@c,f,c
 15813  000B86  D7E6               	goto	l8322
 15814                           
 15815                           ;doprnt.c: 1336: }
 15816                           
 15817                           ;doprnt.c: 1320: break;
 15818  000B88  D009               	goto	l8338
 15819  000B8A                     l8336:
 15820  000B8A  5035               	movf	printf@flag,w,c
 15821  000B8C  0B80               	andlw	128
 15822                           
 15823                           ; Switch size 1, requested type "space"
 15824                           ; Number of cases is 2, Range of values is 0 to 128
 15825                           ; switch strategies available:
 15826                           ; Name         Instructions Cycles
 15827                           ; simple_byte            7     4 (average)
 15828                           ;	Chosen strategy is simple_byte
 15829  000B8E  0A00               	xorlw	0	; case 0
 15830  000B90  B4D8               	btfsc	status,2,c
 15831  000B92  D7C1               	goto	l8306
 15832  000B94  0A80               	xorlw	128	; case 128
 15833  000B96  B4D8               	btfsc	status,2,c
 15834  000B98  D7DB               	goto	l8320
 15835  000B9A  D000               	goto	l8338
 15836  000B9C                     l8338:
 15837                           
 15838                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15839  000B9C  5036               	movf	printf@width,w,c
 15840  000B9E  1037               	iorwf	printf@width+1,w,c
 15841  000BA0  B4D8               	btfsc	status,2,c
 15842  000BA2  D00A               	goto	l8344
 15843  000BA4  C035  F02B         	movff	printf@flag,??_printf
 15844  000BA8  0E03               	movlw	3
 15845  000BAA  162B               	andwf	??_printf,f,c
 15846  000BAC  B4D8               	btfsc	status,2,c
 15847  000BAE  D004               	goto	l8344
 15848                           
 15849                           ;doprnt.c: 1346: width--;
 15850  000BB0  0636               	decf	printf@width,f,c
 15851  000BB2  A0D8               	btfss	status,0,c
 15852  000BB4  0637               	decf	printf@width+1,f,c
 15853  000BB6  D000               	goto	l8344
 15854  000BB8                     l8344:
 15855                           
 15856                           ;doprnt.c: 1381: if(width > c)
 15857  000BB8  0E80               	movlw	128
 15858  000BBA  BE38               	btfsc	printf@c,7,c
 15859  000BBC  0E7F               	movlw	127
 15860  000BBE  6E2B               	movwf	??_printf& (0+255),c
 15861  000BC0  5036               	movf	printf@width,w,c
 15862  000BC2  5C38               	subwf	printf@c,w,c
 15863  000BC4  5037               	movf	printf@width+1,w,c
 15864  000BC6  0A80               	xorlw	128
 15865  000BC8  582B               	subwfb	??_printf& (0+255),w,c
 15866  000BCA  B0D8               	btfsc	status,0,c
 15867  000BCC  D007               	goto	l8348
 15868                           
 15869                           ;doprnt.c: 1382: width -= c;
 15870  000BCE  5038               	movf	printf@c,w,c
 15871  000BD0  5E36               	subwf	printf@width,f,c
 15872  000BD2  0E00               	movlw	0
 15873  000BD4  BE38               	btfsc	printf@c,7,c
 15874  000BD6  0EFF               	movlw	255
 15875  000BD8  5A37               	subwfb	printf@width+1,f,c
 15876  000BDA  D005               	goto	l8350
 15877  000BDC                     l8348:
 15878                           
 15879                           ;doprnt.c: 1383: else
 15880                           ;doprnt.c: 1384: width = 0;
 15881  000BDC  0E00               	movlw	0
 15882  000BDE  6E37               	movwf	printf@width+1,c
 15883  000BE0  0E00               	movlw	0
 15884  000BE2  6E36               	movwf	printf@width,c
 15885  000BE4  D000               	goto	l8350
 15886  000BE6                     l8350:
 15887                           
 15888                           ;doprnt.c: 1387: if(flag & 0x04) {
 15889  000BE6  A435               	btfss	printf@flag,2,c
 15890  000BE8  D01A               	goto	l8362
 15891                           
 15892                           ;doprnt.c: 1392: if(flag & 0x03)
 15893  000BEA  C035  F02B         	movff	printf@flag,??_printf
 15894  000BEE  0E03               	movlw	3
 15895  000BF0  162B               	andwf	??_printf,f,c
 15896  000BF2  B4D8               	btfsc	status,2,c
 15897  000BF4  D004               	goto	l8356
 15898                           
 15899                           ;doprnt.c: 1393: (putch('-') );
 15900  000BF6  0E2D               	movlw	45
 15901  000BF8  ECCC  F01D         	call	_putch
 15902  000BFC  D000               	goto	l8356
 15903  000BFE                     l8356:
 15904                           
 15905                           ;doprnt.c: 1415: if(width)
 15906  000BFE  5036               	movf	printf@width,w,c
 15907  000C00  1037               	iorwf	printf@width+1,w,c
 15908  000C02  B4D8               	btfsc	status,2,c
 15909  000C04  D026               	goto	l8372
 15910  000C06                     l8358:
 15911                           
 15912                           ;doprnt.c: 1417: (putch('0') );
 15913  000C06  0E30               	movlw	48
 15914  000C08  ECCC  F01D         	call	_putch
 15915                           
 15916                           ;doprnt.c: 1418: while(--width);
 15917  000C0C  0636               	decf	printf@width,f,c
 15918  000C0E  A0D8               	btfss	status,0,c
 15919  000C10  0637               	decf	printf@width+1,f,c
 15920  000C12  5036               	movf	printf@width,w,c
 15921  000C14  1037               	iorwf	printf@width+1,w,c
 15922  000C16  B4D8               	btfsc	status,2,c
 15923  000C18  D01C               	goto	l8372
 15924  000C1A  D7F5               	goto	l8358
 15925                           
 15926                           ;doprnt.c: 1420: } else
 15927  000C1C  D01A               	goto	l8372
 15928  000C1E                     l8362:
 15929                           
 15930                           ;doprnt.c: 1422: {
 15931                           ;doprnt.c: 1424: if(width
 15932                           ;doprnt.c: 1428: )
 15933  000C1E  5036               	movf	printf@width,w,c
 15934  000C20  1037               	iorwf	printf@width+1,w,c
 15935  000C22  B4D8               	btfsc	status,2,c
 15936  000C24  D00C               	goto	l8368
 15937  000C26                     l8364:
 15938                           
 15939                           ;doprnt.c: 1430: (putch(' ') );
 15940  000C26  0E20               	movlw	32
 15941  000C28  ECCC  F01D         	call	_putch
 15942                           
 15943                           ;doprnt.c: 1431: while(--width);
 15944  000C2C  0636               	decf	printf@width,f,c
 15945  000C2E  A0D8               	btfss	status,0,c
 15946  000C30  0637               	decf	printf@width+1,f,c
 15947  000C32  5036               	movf	printf@width,w,c
 15948  000C34  1037               	iorwf	printf@width+1,w,c
 15949  000C36  B4D8               	btfsc	status,2,c
 15950  000C38  D002               	goto	l8368
 15951  000C3A  D7F5               	goto	l8364
 15952  000C3C  D000               	goto	l8368
 15953  000C3E                     l8368:
 15954                           
 15955                           ;doprnt.c: 1438: if(flag & 0x03)
 15956  000C3E  C035  F02B         	movff	printf@flag,??_printf
 15957  000C42  0E03               	movlw	3
 15958  000C44  162B               	andwf	??_printf,f,c
 15959  000C46  B4D8               	btfsc	status,2,c
 15960  000C48  D004               	goto	l8372
 15961                           
 15962                           ;doprnt.c: 1439: (putch('-') );
 15963  000C4A  0E2D               	movlw	45
 15964  000C4C  ECCC  F01D         	call	_putch
 15965  000C50  D000               	goto	l8372
 15966  000C52                     l8372:
 15967                           
 15968                           ;doprnt.c: 1469: }
 15969                           ;doprnt.c: 1472: prec = c;
 15970  000C52  C038  F032         	movff	printf@c,printf@prec
 15971                           
 15972                           ;doprnt.c: 1474: while(prec--) {
 15973  000C56  D053               	goto	l8386
 15974                           
 15975                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 15976  000C58  D045               	goto	l8382
 15977  000C5A                     l8374:
 15978                           
 15979                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15980  000C5A  5032               	movf	printf@prec,w,c
 15981  000C5C  0D02               	mullw	2
 15982  000C5E  0E72               	movlw	low _dpowers
 15983  000C60  24F3               	addwf	prodl,w,c
 15984  000C62  6EF6               	movwf	tblptrl,c
 15985  000C64  0EFE               	movlw	high _dpowers
 15986  000C66  20F4               	addwfc	prodh,w,c
 15987  000C68  6EF7               	movwf	tblptrh,c
 15988  000C6A                     	if	0	;There are less than 3 active tblptr bytes
 15989  000C6A                     	endif
 15990  000C6A  0009               	tblrd		*+
 15991  000C6C  CFF5 F013          	movff	tablat,___lwdiv@divisor
 15992  000C70  000A               	tblrd		*-
 15993  000C72  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 15994  000C76  C033  F011         	movff	printf@val,___lwdiv@dividend
 15995  000C7A  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 15996  000C7E  ECC8  F018         	call	___lwdiv	;wreg free
 15997  000C82  C011  F018         	movff	?___lwdiv,___lwmod@dividend
 15998  000C86  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
 15999  000C8A  0E00               	movlw	0
 16000  000C8C  6E1B               	movwf	___lwmod@divisor+1,c
 16001  000C8E  0E0A               	movlw	10
 16002  000C90  6E1A               	movwf	___lwmod@divisor,c
 16003  000C92  EC3D  F01A         	call	___lwmod	;wreg free
 16004  000C96  5018               	movf	?___lwmod,w,c
 16005  000C98  0F30               	addlw	48
 16006  000C9A  6E38               	movwf	printf@c,c
 16007                           
 16008                           ;doprnt.c: 1491: break;
 16009  000C9C  D02C               	goto	l8384
 16010  000C9E                     l8376:
 16011                           
 16012                           ;doprnt.c: 1499: {
 16013                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 16014  000C9E  C033  F011         	movff	printf@val,___lwdiv@dividend
 16015  000CA2  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 16016  000CA6  5032               	movf	printf@prec,w,c
 16017  000CA8  0D02               	mullw	2
 16018  000CAA  0E7C               	movlw	low _hexpowers
 16019  000CAC  24F3               	addwf	prodl,w,c
 16020  000CAE  6EF6               	movwf	tblptrl,c
 16021  000CB0  0EFE               	movlw	high _hexpowers
 16022  000CB2  20F4               	addwfc	prodh,w,c
 16023  000CB4  6EF7               	movwf	tblptrh,c
 16024  000CB6                     	if	0	;There are less than 3 active tblptr bytes
 16025  000CB6                     	endif
 16026  000CB6  0009               	tblrd		*+
 16027  000CB8  CFF5 F013          	movff	tablat,___lwdiv@divisor
 16028  000CBC  000A               	tblrd		*-
 16029  000CBE  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 16030  000CC2  ECC8  F018         	call	___lwdiv	;wreg free
 16031  000CC6  5011               	movf	?___lwdiv,w,c
 16032  000CC8  0B0F               	andlw	15
 16033  000CCA  6E2F               	movwf	printf@idx,c
 16034                           
 16035                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 16036  000CCC  502F               	movf	printf@idx,w,c
 16037  000CCE  0D01               	mullw	1
 16038  000CD0  0E1F               	movlw	low STR_40
 16039  000CD2  24F3               	addwf	prodl,w,c
 16040  000CD4  6EF6               	movwf	tblptrl,c
 16041  000CD6  0EFF               	movlw	high STR_40
 16042  000CD8  20F4               	addwfc	prodh,w,c
 16043  000CDA  6EF7               	movwf	tblptrh,c
 16044  000CDC                     	if	0	;There are less than 3 active tblptr bytes
 16045  000CDC                     	endif
 16046  000CDC  0008               	tblrd		*
 16047  000CDE  CFF5 F038          	movff	tablat,printf@c
 16048                           
 16049                           ;doprnt.c: 1523: }
 16050                           
 16051                           ;doprnt.c: 1508: }
 16052                           ;doprnt.c: 1510: break;
 16053  000CE2  D009               	goto	l8384
 16054  000CE4                     l8382:
 16055  000CE4  5035               	movf	printf@flag,w,c
 16056  000CE6  0B80               	andlw	128
 16057                           
 16058                           ; Switch size 1, requested type "space"
 16059                           ; Number of cases is 2, Range of values is 0 to 128
 16060                           ; switch strategies available:
 16061                           ; Name         Instructions Cycles
 16062                           ; simple_byte            7     4 (average)
 16063                           ;	Chosen strategy is simple_byte
 16064  000CE8  0A00               	xorlw	0	; case 0
 16065  000CEA  B4D8               	btfsc	status,2,c
 16066  000CEC  D7B6               	goto	l8374
 16067  000CEE  0A80               	xorlw	128	; case 128
 16068  000CF0  B4D8               	btfsc	status,2,c
 16069  000CF2  D7D5               	goto	l8376
 16070  000CF4  D000               	goto	l8384
 16071  000CF6                     l8384:
 16072                           
 16073                           ;doprnt.c: 1524: (putch(c) );
 16074  000CF6  5038               	movf	printf@c,w,c
 16075  000CF8  ECCC  F01D         	call	_putch
 16076  000CFC  D000               	goto	l8386
 16077  000CFE                     l8386:
 16078  000CFE  0632               	decf	printf@prec,f,c
 16079  000D00  2832               	incf	printf@prec,w,c
 16080  000D02  B4D8               	btfsc	status,2,c
 16081  000D04  D002               	goto	l8388
 16082  000D06  D7EE               	goto	l8382
 16083  000D08  D000               	goto	l8388
 16084  000D0A                     l8388:
 16085  000D0A  C01D  FFF6         	movff	printf@f,tblptrl
 16086  000D0E  C01E  FFF7         	movff	printf@f+1,tblptrh
 16087  000D12  4A1D               	infsnz	printf@f,f,c
 16088  000D14  2A1E               	incf	printf@f+1,f,c
 16089  000D16                     	if	0	;tblptru may be non-zero
 16090  000D16                     	endif
 16091  000D16                     	if	0	;tblptru may be non-zero
 16092  000D16                     	endif
 16093  000D16  0008               	tblrd		*
 16094  000D18  CFF5 F038          	movff	tablat,printf@c
 16095  000D1C  5038               	movf	printf@c,w,c
 16096  000D1E  B4D8               	btfsc	status,2,c
 16097  000D20  D002               	goto	l1434
 16098  000D22  D65A               	goto	l8262
 16099  000D24  D000               	goto	l1434
 16100  000D26                     l1434:
 16101  000D26  0012               	return		;funcret
 16102  000D28                     __end_of_printf:
 16103                           	opt stack 0
 16104                           tblptru	equ	0xFF8
 16105                           tblptrh	equ	0xFF7
 16106                           tblptrl	equ	0xFF6
 16107                           tablat	equ	0xFF5
 16108                           prodh	equ	0xFF4
 16109                           prodl	equ	0xFF3
 16110                           intcon	equ	0xFF2
 16111                           intcon2	equ	0xFF1
 16112                           postinc0	equ	0xFEE
 16113                           wreg	equ	0xFE8
 16114                           postdec1	equ	0xFE5
 16115                           fsr1l	equ	0xFE1
 16116                           indf2	equ	0xFDF
 16117                           postinc2	equ	0xFDE
 16118                           postdec2	equ	0xFDD
 16119                           fsr2h	equ	0xFDA
 16120                           fsr2l	equ	0xFD9
 16121                           status	equ	0xFD8
 16122                           
 16123 ;; *************** function _putch *****************
 16124 ;; Defined at:
 16125 ;;		line 82 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Main.c"
 16126 ;; Parameters:    Size  Location     Type
 16127 ;;  c               1    wreg     unsigned char 
 16128 ;; Auto vars:     Size  Location     Type
 16129 ;;  c               1   16[COMRAM] unsigned char 
 16130 ;; Return value:  Size  Location     Type
 16131 ;;		None               void
 16132 ;; Registers used:
 16133 ;;		wreg
 16134 ;; Tracked objects:
 16135 ;;		On entry : 0/0
 16136 ;;		On exit  : 0/0
 16137 ;;		Unchanged: 0/0
 16138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16140 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16142 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16143 ;;Total ram usage:        1 bytes
 16144 ;; Hardware stack levels used:    1
 16145 ;; Hardware stack levels required when called:    3
 16146 ;; This function calls:
 16147 ;;		Nothing
 16148 ;; This function is called by:
 16149 ;;		_printf
 16150 ;; This function uses a non-reentrant model
 16151 ;;
 16152                           
 16153                           	psect	text88
 16154  003B98                     __ptext88:
 16155                           	opt stack 0
 16156  003B98                     _putch:
 16157                           	opt stack 26
 16158                           
 16159                           ;incstack = 0
 16160                           ;putch@c stored from wreg
 16161  003B98  6E11               	movwf	putch@c,c
 16162                           
 16163                           ;Main.c: 84: while (!TRMT);
 16164  003B9A  D000               	goto	l251
 16165  003B9C                     l251:
 16166  003B9C  A2AC               	btfss	4012,1,c	;volatile
 16167  003B9E  D7FE               	goto	l251
 16168                           
 16169                           ;Main.c: 85: TXREG = c;
 16170  003BA0  C011  FFAD         	movff	putch@c,4013	;volatile
 16171  003BA4  0012               	return		;funcret
 16172  003BA6                     __end_of_putch:
 16173                           	opt stack 0
 16174                           tblptru	equ	0xFF8
 16175                           tblptrh	equ	0xFF7
 16176                           tblptrl	equ	0xFF6
 16177                           tablat	equ	0xFF5
 16178                           prodh	equ	0xFF4
 16179                           prodl	equ	0xFF3
 16180                           intcon	equ	0xFF2
 16181                           intcon2	equ	0xFF1
 16182                           postinc0	equ	0xFEE
 16183                           wreg	equ	0xFE8
 16184                           postdec1	equ	0xFE5
 16185                           fsr1l	equ	0xFE1
 16186                           indf2	equ	0xFDF
 16187                           postinc2	equ	0xFDE
 16188                           postdec2	equ	0xFDD
 16189                           fsr2h	equ	0xFDA
 16190                           fsr2l	equ	0xFD9
 16191                           status	equ	0xFD8
 16192                           
 16193 ;; *************** function _isdigit *****************
 16194 ;; Defined at:
 16195 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 16196 ;; Parameters:    Size  Location     Type
 16197 ;;  c               1    wreg     unsigned char 
 16198 ;; Auto vars:     Size  Location     Type
 16199 ;;  c               1   18[COMRAM] unsigned char 
 16200 ;; Return value:  Size  Location     Type
 16201 ;;		None               void
 16202 ;; Registers used:
 16203 ;;		wreg, status,2, status,0
 16204 ;; Tracked objects:
 16205 ;;		On entry : 0/0
 16206 ;;		On exit  : 0/0
 16207 ;;		Unchanged: 0/0
 16208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16211 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16212 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16213 ;;Total ram usage:        3 bytes
 16214 ;; Hardware stack levels used:    1
 16215 ;; Hardware stack levels required when called:    3
 16216 ;; This function calls:
 16217 ;;		Nothing
 16218 ;; This function is called by:
 16219 ;;		_printf
 16220 ;; This function uses a non-reentrant model
 16221 ;;
 16222                           
 16223                           	psect	text89
 16224  003908                     __ptext89:
 16225                           	opt stack 0
 16226  003908                     _isdigit:
 16227                           	opt stack 26
 16228                           
 16229                           ;incstack = 0
 16230                           ;isdigit@c stored from wreg
 16231  003908  6E13               	movwf	isdigit@c,c
 16232  00390A  0E00               	movlw	0
 16233  00390C  6E12               	movwf	_isdigit$2860,c
 16234  00390E  0E3A               	movlw	58
 16235  003910  6013               	cpfslt	isdigit@c,c
 16236  003912  D006               	goto	l5322
 16237  003914  0E2F               	movlw	47
 16238  003916  6413               	cpfsgt	isdigit@c,c
 16239  003918  D003               	goto	l5322
 16240  00391A  0E01               	movlw	1
 16241  00391C  6E12               	movwf	_isdigit$2860,c
 16242  00391E  D000               	goto	l5322
 16243  003920                     l5322:
 16244  003920  C012  F011         	movff	_isdigit$2860,??_isdigit
 16245  003924  3011               	rrcf	??_isdigit,w,c
 16246  003926  D000               	goto	l1901
 16247  003928                     l1901:
 16248  003928  0012               	return		;funcret
 16249  00392A                     __end_of_isdigit:
 16250                           	opt stack 0
 16251                           tblptru	equ	0xFF8
 16252                           tblptrh	equ	0xFF7
 16253                           tblptrl	equ	0xFF6
 16254                           tablat	equ	0xFF5
 16255                           prodh	equ	0xFF4
 16256                           prodl	equ	0xFF3
 16257                           intcon	equ	0xFF2
 16258                           intcon2	equ	0xFF1
 16259                           postinc0	equ	0xFEE
 16260                           wreg	equ	0xFE8
 16261                           postdec1	equ	0xFE5
 16262                           fsr1l	equ	0xFE1
 16263                           indf2	equ	0xFDF
 16264                           postinc2	equ	0xFDE
 16265                           postdec2	equ	0xFDD
 16266                           fsr2h	equ	0xFDA
 16267                           fsr2l	equ	0xFD9
 16268                           status	equ	0xFD8
 16269                           
 16270 ;; *************** function ___wmul *****************
 16271 ;; Defined at:
 16272 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 16273 ;; Parameters:    Size  Location     Type
 16274 ;;  multiplier      2   16[COMRAM] unsigned int 
 16275 ;;  multiplicand    2   18[COMRAM] unsigned int 
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;  product         2   20[COMRAM] unsigned int 
 16278 ;; Return value:  Size  Location     Type
 16279 ;;                  2   16[COMRAM] unsigned int 
 16280 ;; Registers used:
 16281 ;;		wreg, status,2, status,0, prodl, prodh
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16287 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16288 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16290 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16291 ;;Total ram usage:        6 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:    3
 16294 ;; This function calls:
 16295 ;;		Nothing
 16296 ;; This function is called by:
 16297 ;;		_get_RPM
 16298 ;;		_main
 16299 ;;		_read_volt
 16300 ;;		_delay_ms
 16301 ;;		_drawChar
 16302 ;;		_printf
 16303 ;; This function uses a non-reentrant model
 16304 ;;
 16305                           
 16306                           	psect	text90
 16307  00384E                     __ptext90:
 16308                           	opt stack 0
 16309  00384E                     ___wmul:
 16310                           	opt stack 26
 16311                           
 16312                           ;incstack = 0
 16313  00384E  5011               	movf	___wmul@multiplier,w,c
 16314  003850  0213               	mulwf	___wmul@multiplicand,c
 16315  003852  CFF3 F015          	movff	prodl,___wmul@product
 16316  003856  CFF4 F016          	movff	prodh,___wmul@product+1
 16317  00385A  5011               	movf	___wmul@multiplier,w,c
 16318  00385C  0214               	mulwf	___wmul@multiplicand+1,c
 16319  00385E  50F3               	movf	prodl,w,c
 16320  003860  2616               	addwf	___wmul@product+1,f,c
 16321  003862  5012               	movf	___wmul@multiplier+1,w,c
 16322  003864  0213               	mulwf	___wmul@multiplicand,c
 16323  003866  50F3               	movf	prodl,w,c
 16324  003868  2616               	addwf	___wmul@product+1,f,c
 16325  00386A  C015  F011         	movff	___wmul@product,?___wmul
 16326  00386E  C016  F012         	movff	___wmul@product+1,?___wmul+1
 16327  003872  D000               	goto	l1470
 16328  003874                     l1470:
 16329  003874  0012               	return		;funcret
 16330  003876                     __end_of___wmul:
 16331                           	opt stack 0
 16332                           tblptru	equ	0xFF8
 16333                           tblptrh	equ	0xFF7
 16334                           tblptrl	equ	0xFF6
 16335                           tablat	equ	0xFF5
 16336                           prodh	equ	0xFF4
 16337                           prodl	equ	0xFF3
 16338                           intcon	equ	0xFF2
 16339                           intcon2	equ	0xFF1
 16340                           postinc0	equ	0xFEE
 16341                           wreg	equ	0xFE8
 16342                           postdec1	equ	0xFE5
 16343                           fsr1l	equ	0xFE1
 16344                           indf2	equ	0xFDF
 16345                           postinc2	equ	0xFDE
 16346                           postdec2	equ	0xFDD
 16347                           fsr2h	equ	0xFDA
 16348                           fsr2l	equ	0xFD9
 16349                           status	equ	0xFD8
 16350                           
 16351 ;; *************** function ___lwmod *****************
 16352 ;; Defined at:
 16353 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 16354 ;; Parameters:    Size  Location     Type
 16355 ;;  dividend        2   23[COMRAM] unsigned int 
 16356 ;;  divisor         2   25[COMRAM] unsigned int 
 16357 ;; Auto vars:     Size  Location     Type
 16358 ;;  counter         1   27[COMRAM] unsigned char 
 16359 ;; Return value:  Size  Location     Type
 16360 ;;                  2   23[COMRAM] unsigned int 
 16361 ;; Registers used:
 16362 ;;		wreg, status,2, status,0
 16363 ;; Tracked objects:
 16364 ;;		On entry : 0/0
 16365 ;;		On exit  : 0/0
 16366 ;;		Unchanged: 0/0
 16367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16368 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16369 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16371 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16372 ;;Total ram usage:        5 bytes
 16373 ;; Hardware stack levels used:    1
 16374 ;; Hardware stack levels required when called:    3
 16375 ;; This function calls:
 16376 ;;		Nothing
 16377 ;; This function is called by:
 16378 ;;		_printf
 16379 ;; This function uses a non-reentrant model
 16380 ;;
 16381                           
 16382                           	psect	text91
 16383  00347A                     __ptext91:
 16384                           	opt stack 0
 16385  00347A                     ___lwmod:
 16386                           	opt stack 26
 16387                           
 16388                           ;incstack = 0
 16389  00347A  501A               	movf	___lwmod@divisor,w,c
 16390  00347C  101B               	iorwf	___lwmod@divisor+1,w,c
 16391  00347E  B4D8               	btfsc	status,2,c
 16392  003480  D01D               	goto	l2003
 16393  003482  0E01               	movlw	1
 16394  003484  6E1C               	movwf	___lwmod@counter,c
 16395  003486  D005               	goto	l5470
 16396  003488                     l5468:
 16397  003488  90D8               	bcf	status,0,c
 16398  00348A  361A               	rlcf	___lwmod@divisor,f,c
 16399  00348C  361B               	rlcf	___lwmod@divisor+1,f,c
 16400  00348E  2A1C               	incf	___lwmod@counter,f,c
 16401  003490  D000               	goto	l5470
 16402  003492                     l5470:
 16403  003492  BE1B               	btfsc	___lwmod@divisor+1,7,c
 16404  003494  D002               	goto	l5472
 16405  003496  D7F8               	goto	l5468
 16406  003498  D000               	goto	l5472
 16407  00349A                     l5472:
 16408  00349A  501A               	movf	___lwmod@divisor,w,c
 16409  00349C  5C18               	subwf	___lwmod@dividend,w,c
 16410  00349E  501B               	movf	___lwmod@divisor+1,w,c
 16411  0034A0  5819               	subwfb	___lwmod@dividend+1,w,c
 16412  0034A2  A0D8               	btfss	status,0,c
 16413  0034A4  D005               	goto	l5476
 16414  0034A6  501A               	movf	___lwmod@divisor,w,c
 16415  0034A8  5E18               	subwf	___lwmod@dividend,f,c
 16416  0034AA  501B               	movf	___lwmod@divisor+1,w,c
 16417  0034AC  5A19               	subwfb	___lwmod@dividend+1,f,c
 16418  0034AE  D000               	goto	l5476
 16419  0034B0                     l5476:
 16420  0034B0  90D8               	bcf	status,0,c
 16421  0034B2  321B               	rrcf	___lwmod@divisor+1,f,c
 16422  0034B4  321A               	rrcf	___lwmod@divisor,f,c
 16423  0034B6  2E1C               	decfsz	___lwmod@counter,f,c
 16424  0034B8  D7F0               	goto	l5472
 16425  0034BA  D000               	goto	l2003
 16426  0034BC                     l2003:
 16427  0034BC  C018  F018         	movff	___lwmod@dividend,?___lwmod
 16428  0034C0  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
 16429  0034C4  0012               	return		;funcret
 16430  0034C6                     __end_of___lwmod:
 16431                           	opt stack 0
 16432                           tblptru	equ	0xFF8
 16433                           tblptrh	equ	0xFF7
 16434                           tblptrl	equ	0xFF6
 16435                           tablat	equ	0xFF5
 16436                           prodh	equ	0xFF4
 16437                           prodl	equ	0xFF3
 16438                           intcon	equ	0xFF2
 16439                           intcon2	equ	0xFF1
 16440                           postinc0	equ	0xFEE
 16441                           wreg	equ	0xFE8
 16442                           postdec1	equ	0xFE5
 16443                           fsr1l	equ	0xFE1
 16444                           indf2	equ	0xFDF
 16445                           postinc2	equ	0xFDE
 16446                           postdec2	equ	0xFDD
 16447                           fsr2h	equ	0xFDA
 16448                           fsr2l	equ	0xFD9
 16449                           status	equ	0xFD8
 16450                           
 16451 ;; *************** function ___lwdiv *****************
 16452 ;; Defined at:
 16453 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 16454 ;; Parameters:    Size  Location     Type
 16455 ;;  dividend        2   16[COMRAM] unsigned int 
 16456 ;;  divisor         2   18[COMRAM] unsigned int 
 16457 ;; Auto vars:     Size  Location     Type
 16458 ;;  quotient        2   20[COMRAM] unsigned int 
 16459 ;;  counter         1   22[COMRAM] unsigned char 
 16460 ;; Return value:  Size  Location     Type
 16461 ;;                  2   16[COMRAM] unsigned int 
 16462 ;; Registers used:
 16463 ;;		wreg, status,2, status,0
 16464 ;; Tracked objects:
 16465 ;;		On entry : 0/0
 16466 ;;		On exit  : 0/0
 16467 ;;		Unchanged: 0/0
 16468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16470 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16472 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16473 ;;Total ram usage:        7 bytes
 16474 ;; Hardware stack levels used:    1
 16475 ;; Hardware stack levels required when called:    3
 16476 ;; This function calls:
 16477 ;;		Nothing
 16478 ;; This function is called by:
 16479 ;;		_printf
 16480 ;; This function uses a non-reentrant model
 16481 ;;
 16482                           
 16483                           	psect	text92
 16484  003190                     __ptext92:
 16485                           	opt stack 0
 16486  003190                     ___lwdiv:
 16487                           	opt stack 26
 16488                           
 16489                           ;incstack = 0
 16490  003190  0E00               	movlw	0
 16491  003192  6E16               	movwf	___lwdiv@quotient+1,c
 16492  003194  0E00               	movlw	0
 16493  003196  6E15               	movwf	___lwdiv@quotient,c
 16494  003198  5013               	movf	___lwdiv@divisor,w,c
 16495  00319A  1014               	iorwf	___lwdiv@divisor+1,w,c
 16496  00319C  B4D8               	btfsc	status,2,c
 16497  00319E  D021               	goto	l1993
 16498  0031A0  0E01               	movlw	1
 16499  0031A2  6E17               	movwf	___lwdiv@counter,c
 16500  0031A4  D005               	goto	l5450
 16501  0031A6                     l5448:
 16502  0031A6  90D8               	bcf	status,0,c
 16503  0031A8  3613               	rlcf	___lwdiv@divisor,f,c
 16504  0031AA  3614               	rlcf	___lwdiv@divisor+1,f,c
 16505  0031AC  2A17               	incf	___lwdiv@counter,f,c
 16506  0031AE  D000               	goto	l5450
 16507  0031B0                     l5450:
 16508  0031B0  BE14               	btfsc	___lwdiv@divisor+1,7,c
 16509  0031B2  D002               	goto	l5452
 16510  0031B4  D7F8               	goto	l5448
 16511  0031B6  D000               	goto	l5452
 16512  0031B8                     l5452:
 16513  0031B8  90D8               	bcf	status,0,c
 16514  0031BA  3615               	rlcf	___lwdiv@quotient,f,c
 16515  0031BC  3616               	rlcf	___lwdiv@quotient+1,f,c
 16516  0031BE  5013               	movf	___lwdiv@divisor,w,c
 16517  0031C0  5C11               	subwf	___lwdiv@dividend,w,c
 16518  0031C2  5014               	movf	___lwdiv@divisor+1,w,c
 16519  0031C4  5812               	subwfb	___lwdiv@dividend+1,w,c
 16520  0031C6  A0D8               	btfss	status,0,c
 16521  0031C8  D006               	goto	l5460
 16522  0031CA  5013               	movf	___lwdiv@divisor,w,c
 16523  0031CC  5E11               	subwf	___lwdiv@dividend,f,c
 16524  0031CE  5014               	movf	___lwdiv@divisor+1,w,c
 16525  0031D0  5A12               	subwfb	___lwdiv@dividend+1,f,c
 16526  0031D2  8015               	bsf	___lwdiv@quotient,0,c
 16527  0031D4  D000               	goto	l5460
 16528  0031D6                     l5460:
 16529  0031D6  90D8               	bcf	status,0,c
 16530  0031D8  3214               	rrcf	___lwdiv@divisor+1,f,c
 16531  0031DA  3213               	rrcf	___lwdiv@divisor,f,c
 16532  0031DC  2E17               	decfsz	___lwdiv@counter,f,c
 16533  0031DE  D7EC               	goto	l5452
 16534  0031E0  D000               	goto	l1993
 16535  0031E2                     l1993:
 16536  0031E2  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
 16537  0031E6  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16538  0031EA  0012               	return		;funcret
 16539  0031EC                     __end_of___lwdiv:
 16540                           	opt stack 0
 16541                           tblptru	equ	0xFF8
 16542                           tblptrh	equ	0xFF7
 16543                           tblptrl	equ	0xFF6
 16544                           tablat	equ	0xFF5
 16545                           prodh	equ	0xFF4
 16546                           prodl	equ	0xFF3
 16547                           intcon	equ	0xFF2
 16548                           intcon2	equ	0xFF1
 16549                           postinc0	equ	0xFEE
 16550                           wreg	equ	0xFE8
 16551                           postdec1	equ	0xFE5
 16552                           fsr1l	equ	0xFE1
 16553                           indf2	equ	0xFDF
 16554                           postinc2	equ	0xFDE
 16555                           postdec2	equ	0xFDD
 16556                           fsr2h	equ	0xFDA
 16557                           fsr2l	equ	0xFD9
 16558                           status	equ	0xFD8
 16559                           
 16560 ;; *************** function _Init_Interrupt *****************
 16561 ;; Defined at:
 16562 ;;		line 18 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Interrupt.c"
 16563 ;; Parameters:    Size  Location     Type
 16564 ;;		None
 16565 ;; Auto vars:     Size  Location     Type
 16566 ;;		None
 16567 ;; Return value:  Size  Location     Type
 16568 ;;		None               void
 16569 ;; Registers used:
 16570 ;;		wreg, status,2
 16571 ;; Tracked objects:
 16572 ;;		On entry : 0/0
 16573 ;;		On exit  : 0/0
 16574 ;;		Unchanged: 0/0
 16575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16580 ;;Total ram usage:        0 bytes
 16581 ;; Hardware stack levels used:    1
 16582 ;; Hardware stack levels required when called:    3
 16583 ;; This function calls:
 16584 ;;		Nothing
 16585 ;; This function is called by:
 16586 ;;		_Do_Init
 16587 ;; This function uses a non-reentrant model
 16588 ;;
 16589                           
 16590                           	psect	text93
 16591  0038C2                     __ptext93:
 16592                           	opt stack 0
 16593  0038C2                     _Init_Interrupt:
 16594                           	opt stack 26
 16595                           
 16596                           ;Interrupt.c: 21: INTCONbits.INT0IF = 0 ;
 16597                           
 16598                           ;incstack = 0
 16599  0038C2  92F2               	bcf	intcon,1,c	;volatile
 16600                           
 16601                           ;Interrupt.c: 22: INTCON3bits.INT1IF = 0;
 16602  0038C4  90F0               	bcf	intcon3,0,c	;volatile
 16603                           
 16604                           ;Interrupt.c: 23: INTCON3bits.INT2IF = 0;
 16605  0038C6  92F0               	bcf	intcon3,1,c	;volatile
 16606                           
 16607                           ;Interrupt.c: 24: INTCONbits.INT0IE = 1;
 16608  0038C8  88F2               	bsf	intcon,4,c	;volatile
 16609                           
 16610                           ;Interrupt.c: 25: INTCON3bits.INT1IE = 1;
 16611  0038CA  86F0               	bsf	intcon3,3,c	;volatile
 16612                           
 16613                           ;Interrupt.c: 26: INTCON3bits.INT2IE = 1;
 16614  0038CC  88F0               	bsf	intcon3,4,c	;volatile
 16615                           
 16616                           ;Interrupt.c: 27: INTCON2bits.INTEDG0 = 0;
 16617  0038CE  9CF1               	bcf	intcon2,6,c	;volatile
 16618                           
 16619                           ;Interrupt.c: 28: INTCON2bits.INTEDG1 = 0;
 16620  0038D0  9AF1               	bcf	intcon2,5,c	;volatile
 16621                           
 16622                           ;Interrupt.c: 29: INTCON2bits.INTEDG2 = 0;
 16623  0038D2  98F1               	bcf	intcon2,4,c	;volatile
 16624                           
 16625                           ;Interrupt.c: 30: TMR1H = 0;
 16626  0038D4  0E00               	movlw	0
 16627  0038D6  6ECF               	movwf	4047,c	;volatile
 16628                           
 16629                           ;Interrupt.c: 31: TMR1L = 0;
 16630  0038D8  0E00               	movlw	0
 16631  0038DA  6ECE               	movwf	4046,c	;volatile
 16632                           
 16633                           ;Interrupt.c: 32: PIR1bits.TMR1IF = 0;
 16634  0038DC  909E               	bcf	3998,0,c	;volatile
 16635                           
 16636                           ;Interrupt.c: 33: PIE1bits.TMR1IE = 1;
 16637  0038DE  809D               	bsf	3997,0,c	;volatile
 16638                           
 16639                           ;Interrupt.c: 34: INTCONbits.PEIE = 1;
 16640  0038E0  8CF2               	bsf	intcon,6,c	;volatile
 16641                           
 16642                           ;Interrupt.c: 35: INTCONbits.GIE = 1;
 16643  0038E2  8EF2               	bsf	intcon,7,c	;volatile
 16644  0038E4  0012               	return		;funcret
 16645  0038E6                     __end_of_Init_Interrupt:
 16646                           	opt stack 0
 16647                           tblptru	equ	0xFF8
 16648                           tblptrh	equ	0xFF7
 16649                           tblptrl	equ	0xFF6
 16650                           tablat	equ	0xFF5
 16651                           prodh	equ	0xFF4
 16652                           prodl	equ	0xFF3
 16653                           intcon	equ	0xFF2
 16654                           intcon2	equ	0xFF1
 16655                           intcon3	equ	0xFF0
 16656                           postinc0	equ	0xFEE
 16657                           wreg	equ	0xFE8
 16658                           postdec1	equ	0xFE5
 16659                           fsr1l	equ	0xFE1
 16660                           indf2	equ	0xFDF
 16661                           postinc2	equ	0xFDE
 16662                           postdec2	equ	0xFDD
 16663                           fsr2h	equ	0xFDA
 16664                           fsr2l	equ	0xFD9
 16665                           status	equ	0xFD8
 16666                           
 16667 ;; *************** function _Init_ADC *****************
 16668 ;; Defined at:
 16669 ;;		line 216 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/utils.c"
 16670 ;; Parameters:    Size  Location     Type
 16671 ;;		None
 16672 ;; Auto vars:     Size  Location     Type
 16673 ;;		None
 16674 ;; Return value:  Size  Location     Type
 16675 ;;		None               void
 16676 ;; Registers used:
 16677 ;;		wreg, status,2
 16678 ;; Tracked objects:
 16679 ;;		On entry : 0/0
 16680 ;;		On exit  : 0/0
 16681 ;;		Unchanged: 0/0
 16682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16687 ;;Total ram usage:        0 bytes
 16688 ;; Hardware stack levels used:    1
 16689 ;; Hardware stack levels required when called:    3
 16690 ;; This function calls:
 16691 ;;		Nothing
 16692 ;; This function is called by:
 16693 ;;		_Do_Init
 16694 ;; This function uses a non-reentrant model
 16695 ;;
 16696                           
 16697                           	psect	text94
 16698  003BA6                     __ptext94:
 16699                           	opt stack 0
 16700  003BA6                     _Init_ADC:
 16701                           	opt stack 26
 16702                           
 16703                           ;utils.c: 219: ADCON0 = 0x01;
 16704                           
 16705                           ;incstack = 0
 16706  003BA6  0E01               	movlw	1
 16707  003BA8  6EC2               	movwf	4034,c	;volatile
 16708                           
 16709                           ;utils.c: 220: ADCON1 = 0x0E;
 16710  003BAA  0E0E               	movlw	14
 16711  003BAC  6EC1               	movwf	4033,c	;volatile
 16712                           
 16713                           ;utils.c: 221: ADCON2 = 0xA9;
 16714  003BAE  0EA9               	movlw	169
 16715  003BB0  6EC0               	movwf	4032,c	;volatile
 16716  003BB2  0012               	return		;funcret
 16717  003BB4                     __end_of_Init_ADC:
 16718                           	opt stack 0
 16719                           tblptru	equ	0xFF8
 16720                           tblptrh	equ	0xFF7
 16721                           tblptrl	equ	0xFF6
 16722                           tablat	equ	0xFF5
 16723                           prodh	equ	0xFF4
 16724                           prodl	equ	0xFF3
 16725                           intcon	equ	0xFF2
 16726                           intcon2	equ	0xFF1
 16727                           intcon3	equ	0xFF0
 16728                           postinc0	equ	0xFEE
 16729                           wreg	equ	0xFE8
 16730                           postdec1	equ	0xFE5
 16731                           fsr1l	equ	0xFE1
 16732                           indf2	equ	0xFDF
 16733                           postinc2	equ	0xFDE
 16734                           postdec2	equ	0xFDD
 16735                           fsr2h	equ	0xFDA
 16736                           fsr2l	equ	0xFD9
 16737                           status	equ	0xFD8
 16738                           
 16739 ;; *************** function _I2C_Init *****************
 16740 ;; Defined at:
 16741 ;;		line 10 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 16742 ;; Parameters:    Size  Location     Type
 16743 ;;  c               4   16[COMRAM] unsigned long 
 16744 ;; Auto vars:     Size  Location     Type
 16745 ;;		None
 16746 ;; Return value:  Size  Location     Type
 16747 ;;		None               void
 16748 ;; Registers used:
 16749 ;;		wreg, cstack
 16750 ;; Tracked objects:
 16751 ;;		On entry : 0/0
 16752 ;;		On exit  : 0/0
 16753 ;;		Unchanged: 0/0
 16754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16755 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16758 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16759 ;;Total ram usage:        4 bytes
 16760 ;; Hardware stack levels used:    1
 16761 ;; Hardware stack levels required when called:    4
 16762 ;; This function calls:
 16763 ;;		_i2cHighScl
 16764 ;;		_i2cHighSda
 16765 ;; This function is called by:
 16766 ;;		_Do_Init
 16767 ;; This function uses a non-reentrant model
 16768 ;;
 16769                           
 16770                           	psect	text95
 16771  003BCE                     __ptext95:
 16772                           	opt stack 0
 16773  003BCE                     _I2C_Init:
 16774                           	opt stack 25
 16775                           
 16776                           ;I2C_Soft.c: 12: i2cHighScl();
 16777                           
 16778                           ;incstack = 0
 16779  003BCE  ECE1  F01D         	call	_i2cHighScl	;wreg free
 16780                           
 16781                           ;I2C_Soft.c: 13: i2cHighSda();
 16782  003BD2  EC0D  F01E         	call	_i2cHighSda	;wreg free
 16783  003BD6  0012               	return		;funcret
 16784  003BD8                     __end_of_I2C_Init:
 16785                           	opt stack 0
 16786                           tblptru	equ	0xFF8
 16787                           tblptrh	equ	0xFF7
 16788                           tblptrl	equ	0xFF6
 16789                           tablat	equ	0xFF5
 16790                           prodh	equ	0xFF4
 16791                           prodl	equ	0xFF3
 16792                           intcon	equ	0xFF2
 16793                           intcon2	equ	0xFF1
 16794                           intcon3	equ	0xFF0
 16795                           postinc0	equ	0xFEE
 16796                           wreg	equ	0xFE8
 16797                           postdec1	equ	0xFE5
 16798                           fsr1l	equ	0xFE1
 16799                           indf2	equ	0xFDF
 16800                           postinc2	equ	0xFDE
 16801                           postdec2	equ	0xFDD
 16802                           fsr2h	equ	0xFDA
 16803                           fsr2l	equ	0xFD9
 16804                           status	equ	0xFD8
 16805                           
 16806 ;; *************** function _DS1621_Init *****************
 16807 ;; Defined at:
 16808 ;;		line 22 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Support.c"
 16809 ;; Parameters:    Size  Location     Type
 16810 ;;		None
 16811 ;; Auto vars:     Size  Location     Type
 16812 ;;  Device          1   21[COMRAM] unsigned char 
 16813 ;; Return value:  Size  Location     Type
 16814 ;;		None               void
 16815 ;; Registers used:
 16816 ;;		wreg, status,2, status,0, cstack
 16817 ;; Tracked objects:
 16818 ;;		On entry : 0/0
 16819 ;;		On exit  : 0/0
 16820 ;;		Unchanged: 0/0
 16821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16826 ;;Total ram usage:        1 bytes
 16827 ;; Hardware stack levels used:    1
 16828 ;; Hardware stack levels required when called:    6
 16829 ;; This function calls:
 16830 ;;		_I2C_Write_Cmd_Only
 16831 ;;		_I2C_Write_Cmd_Write_Data
 16832 ;; This function is called by:
 16833 ;;		_Do_Init
 16834 ;; This function uses a non-reentrant model
 16835 ;;
 16836                           
 16837                           	psect	text96
 16838  00398A                     __ptext96:
 16839                           	opt stack 0
 16840  00398A                     _DS1621_Init:
 16841                           	opt stack 23
 16842                           
 16843                           ;I2C_Support.c: 24: char Device = 0x48;
 16844                           
 16845                           ;incstack = 0
 16846  00398A  0E48               	movlw	72
 16847  00398C  6E16               	movwf	DS1621_Init@Device,c
 16848                           
 16849                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 16850  00398E  0EAC               	movlw	172
 16851  003990  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 16852  003992  0E02               	movlw	2
 16853  003994  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 16854  003996  5016               	movf	DS1621_Init@Device,w,c
 16855  003998  ECB5  F01C         	call	_I2C_Write_Cmd_Write_Data
 16856                           
 16857                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
 16858  00399C  0EEE               	movlw	238
 16859  00399E  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 16860  0039A0  5016               	movf	DS1621_Init@Device,w,c
 16861  0039A2  ECF0  F01C         	call	_I2C_Write_Cmd_Only
 16862  0039A6  0012               	return		;funcret
 16863  0039A8                     __end_of_DS1621_Init:
 16864                           	opt stack 0
 16865                           tblptru	equ	0xFF8
 16866                           tblptrh	equ	0xFF7
 16867                           tblptrl	equ	0xFF6
 16868                           tablat	equ	0xFF5
 16869                           prodh	equ	0xFF4
 16870                           prodl	equ	0xFF3
 16871                           intcon	equ	0xFF2
 16872                           intcon2	equ	0xFF1
 16873                           intcon3	equ	0xFF0
 16874                           postinc0	equ	0xFEE
 16875                           wreg	equ	0xFE8
 16876                           postdec1	equ	0xFE5
 16877                           fsr1l	equ	0xFE1
 16878                           indf2	equ	0xFDF
 16879                           postinc2	equ	0xFDE
 16880                           postdec2	equ	0xFDD
 16881                           fsr2h	equ	0xFDA
 16882                           fsr2l	equ	0xFD9
 16883                           status	equ	0xFD8
 16884                           
 16885 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 16886 ;; Defined at:
 16887 ;;		line 148 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 16888 ;; Parameters:    Size  Location     Type
 16889 ;;  Device          1    wreg     unsigned char 
 16890 ;;  Cmd             1   18[COMRAM] unsigned char 
 16891 ;;  Data_Out        1   19[COMRAM] unsigned char 
 16892 ;; Auto vars:     Size  Location     Type
 16893 ;;  Device          1   20[COMRAM] unsigned char 
 16894 ;; Return value:  Size  Location     Type
 16895 ;;		None               void
 16896 ;; Registers used:
 16897 ;;		wreg, status,2, status,0, cstack
 16898 ;; Tracked objects:
 16899 ;;		On entry : 0/0
 16900 ;;		On exit  : 0/0
 16901 ;;		Unchanged: 0/0
 16902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16903 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16906 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16907 ;;Total ram usage:        3 bytes
 16908 ;; Hardware stack levels used:    1
 16909 ;; Hardware stack levels required when called:    5
 16910 ;; This function calls:
 16911 ;;		_I2C_Start
 16912 ;;		_I2C_Stop
 16913 ;;		_I2C_Write
 16914 ;; This function is called by:
 16915 ;;		_DS1621_Init
 16916 ;; This function uses a non-reentrant model
 16917 ;;
 16918                           
 16919                           	psect	text97
 16920  00396A                     __ptext97:
 16921                           	opt stack 0
 16922  00396A                     _I2C_Write_Cmd_Write_Data:
 16923                           	opt stack 23
 16924                           
 16925                           ;incstack = 0
 16926                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 16927  00396A  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 16928                           
 16929                           ;I2C_Soft.c: 150: I2C_Start();
 16930  00396C  EC9A  F01D         	call	_I2C_Start	;wreg free
 16931                           
 16932                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 16933  003970  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 16934  003972  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 16935  003974  EC0E  F01B         	call	_I2C_Write
 16936                           
 16937                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 16938  003978  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 16939  00397A  EC0E  F01B         	call	_I2C_Write
 16940                           
 16941                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 16942  00397E  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 16943  003980  EC0E  F01B         	call	_I2C_Write
 16944                           
 16945                           ;I2C_Soft.c: 154: I2C_Stop();
 16946  003984  EC91  F01D         	call	_I2C_Stop	;wreg free
 16947  003988  0012               	return		;funcret
 16948  00398A                     __end_of_I2C_Write_Cmd_Write_Data:
 16949                           	opt stack 0
 16950                           tblptru	equ	0xFF8
 16951                           tblptrh	equ	0xFF7
 16952                           tblptrl	equ	0xFF6
 16953                           tablat	equ	0xFF5
 16954                           prodh	equ	0xFF4
 16955                           prodl	equ	0xFF3
 16956                           intcon	equ	0xFF2
 16957                           intcon2	equ	0xFF1
 16958                           intcon3	equ	0xFF0
 16959                           postinc0	equ	0xFEE
 16960                           wreg	equ	0xFE8
 16961                           postdec1	equ	0xFE5
 16962                           fsr1l	equ	0xFE1
 16963                           indf2	equ	0xFDF
 16964                           postinc2	equ	0xFDE
 16965                           postdec2	equ	0xFDD
 16966                           fsr2h	equ	0xFDA
 16967                           fsr2l	equ	0xFD9
 16968                           status	equ	0xFD8
 16969                           
 16970 ;; *************** function _I2C_Write_Cmd_Only *****************
 16971 ;; Defined at:
 16972 ;;		line 140 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 16973 ;; Parameters:    Size  Location     Type
 16974 ;;  Device          1    wreg     unsigned char 
 16975 ;;  Cmd             1   18[COMRAM] unsigned char 
 16976 ;; Auto vars:     Size  Location     Type
 16977 ;;  Device          1   19[COMRAM] unsigned char 
 16978 ;; Return value:  Size  Location     Type
 16979 ;;		None               void
 16980 ;; Registers used:
 16981 ;;		wreg, status,2, status,0, cstack
 16982 ;; Tracked objects:
 16983 ;;		On entry : 0/0
 16984 ;;		On exit  : 0/0
 16985 ;;		Unchanged: 0/0
 16986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16987 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16990 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16991 ;;Total ram usage:        2 bytes
 16992 ;; Hardware stack levels used:    1
 16993 ;; Hardware stack levels required when called:    5
 16994 ;; This function calls:
 16995 ;;		_I2C_Start
 16996 ;;		_I2C_Stop
 16997 ;;		_I2C_Write
 16998 ;; This function is called by:
 16999 ;;		_DS1621_Init
 17000 ;; This function uses a non-reentrant model
 17001 ;;
 17002                           
 17003                           	psect	text98
 17004  0039E0                     __ptext98:
 17005                           	opt stack 0
 17006  0039E0                     _I2C_Write_Cmd_Only:
 17007                           	opt stack 23
 17008                           
 17009                           ;incstack = 0
 17010                           ;I2C_Write_Cmd_Only@Device stored from wreg
 17011  0039E0  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 17012                           
 17013                           ;I2C_Soft.c: 142: I2C_Start();
 17014  0039E2  EC9A  F01D         	call	_I2C_Start	;wreg free
 17015                           
 17016                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 17017  0039E6  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 17018  0039E8  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 17019  0039EA  EC0E  F01B         	call	_I2C_Write
 17020                           
 17021                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 17022  0039EE  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 17023  0039F0  EC0E  F01B         	call	_I2C_Write
 17024                           
 17025                           ;I2C_Soft.c: 145: I2C_Stop();
 17026  0039F4  EC91  F01D         	call	_I2C_Stop	;wreg free
 17027  0039F8  0012               	return		;funcret
 17028  0039FA                     __end_of_I2C_Write_Cmd_Only:
 17029                           	opt stack 0
 17030                           tblptru	equ	0xFF8
 17031                           tblptrh	equ	0xFF7
 17032                           tblptrl	equ	0xFF6
 17033                           tablat	equ	0xFF5
 17034                           prodh	equ	0xFF4
 17035                           prodl	equ	0xFF3
 17036                           intcon	equ	0xFF2
 17037                           intcon2	equ	0xFF1
 17038                           intcon3	equ	0xFF0
 17039                           postinc0	equ	0xFEE
 17040                           wreg	equ	0xFE8
 17041                           postdec1	equ	0xFE5
 17042                           fsr1l	equ	0xFE1
 17043                           indf2	equ	0xFDF
 17044                           postinc2	equ	0xFDE
 17045                           postdec2	equ	0xFDD
 17046                           fsr2h	equ	0xFDA
 17047                           fsr2l	equ	0xFD9
 17048                           status	equ	0xFD8
 17049                           
 17050 ;; *************** function _DS1621_Read_Temp *****************
 17051 ;; Defined at:
 17052 ;;		line 29 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Support.c"
 17053 ;; Parameters:    Size  Location     Type
 17054 ;;		None
 17055 ;; Auto vars:     Size  Location     Type
 17056 ;;  Device          1   23[COMRAM] unsigned char 
 17057 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 17058 ;;  Cmd             1   21[COMRAM] unsigned char 
 17059 ;; Return value:  Size  Location     Type
 17060 ;;                  2   19[COMRAM] int 
 17061 ;; Registers used:
 17062 ;;		wreg, status,2, status,0, cstack
 17063 ;; Tracked objects:
 17064 ;;		On entry : 0/0
 17065 ;;		On exit  : 0/0
 17066 ;;		Unchanged: 0/0
 17067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17069 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17071 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17072 ;;Total ram usage:        5 bytes
 17073 ;; Hardware stack levels used:    1
 17074 ;; Hardware stack levels required when called:    6
 17075 ;; This function calls:
 17076 ;;		_I2C_ReStart
 17077 ;;		_I2C_Read
 17078 ;;		_I2C_Start
 17079 ;;		_I2C_Stop
 17080 ;;		_I2C_Write
 17081 ;; This function is called by:
 17082 ;;		_main
 17083 ;; This function uses a non-reentrant model
 17084 ;;
 17085                           
 17086                           	psect	text99
 17087  0036D4                     __ptext99:
 17088                           	opt stack 0
 17089  0036D4                     _DS1621_Read_Temp:
 17090                           	opt stack 24
 17091                           
 17092                           ;I2C_Support.c: 32: char Device = 0x48;
 17093                           
 17094                           ;incstack = 0
 17095  0036D4  0E48               	movlw	72
 17096  0036D6  6E18               	movwf	DS1621_Read_Temp@Device,c
 17097                           
 17098                           ;I2C_Support.c: 33: char Cmd = 0xAA;
 17099  0036D8  0EAA               	movlw	170
 17100  0036DA  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 17101                           
 17102                           ;I2C_Support.c: 34: char Data_Ret;
 17103                           ;I2C_Support.c: 35: I2C_Start();
 17104  0036DC  EC9A  F01D         	call	_I2C_Start	;wreg free
 17105                           
 17106                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 17107  0036E0  5018               	movf	DS1621_Read_Temp@Device,w,c
 17108  0036E2  2418               	addwf	DS1621_Read_Temp@Device,w,c
 17109  0036E4  EC0E  F01B         	call	_I2C_Write
 17110                           
 17111                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 17112  0036E8  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 17113  0036EA  EC0E  F01B         	call	_I2C_Write
 17114                           
 17115                           ;I2C_Support.c: 38: I2C_ReStart();
 17116  0036EE  EC44  F01D         	call	_I2C_ReStart	;wreg free
 17117                           
 17118                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 17119  0036F2  80D8               	bsf	status,0,c
 17120  0036F4  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 17121  0036F6  EC0E  F01B         	call	_I2C_Write
 17122                           
 17123                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 17124  0036FA  0E00               	movlw	0
 17125  0036FC  ECAC  F01A         	call	_I2C_Read
 17126  003700  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 17127                           
 17128                           ;I2C_Support.c: 41: I2C_Stop();
 17129  003702  EC91  F01D         	call	_I2C_Stop	;wreg free
 17130                           
 17131                           ;I2C_Support.c: 42: return Data_Ret;
 17132  003706  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 17133  00370A  6A15               	clrf	?_DS1621_Read_Temp+1,c
 17134  00370C  D000               	goto	l915
 17135  00370E                     l915:
 17136  00370E  0012               	return		;funcret
 17137  003710                     __end_of_DS1621_Read_Temp:
 17138                           	opt stack 0
 17139                           tblptru	equ	0xFF8
 17140                           tblptrh	equ	0xFF7
 17141                           tblptrl	equ	0xFF6
 17142                           tablat	equ	0xFF5
 17143                           prodh	equ	0xFF4
 17144                           prodl	equ	0xFF3
 17145                           intcon	equ	0xFF2
 17146                           intcon2	equ	0xFF1
 17147                           intcon3	equ	0xFF0
 17148                           postinc0	equ	0xFEE
 17149                           wreg	equ	0xFE8
 17150                           postdec1	equ	0xFE5
 17151                           fsr1l	equ	0xFE1
 17152                           indf2	equ	0xFDF
 17153                           postinc2	equ	0xFDE
 17154                           postdec2	equ	0xFDD
 17155                           fsr2h	equ	0xFDA
 17156                           fsr2l	equ	0xFD9
 17157                           status	equ	0xFD8
 17158                           
 17159 ;; *************** function _I2C_Write *****************
 17160 ;; Defined at:
 17161 ;;		line 37 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 17162 ;; Parameters:    Size  Location     Type
 17163 ;;  outByte         1    wreg     unsigned char 
 17164 ;; Auto vars:     Size  Location     Type
 17165 ;;  outByte         1   16[COMRAM] unsigned char 
 17166 ;;  n               1   17[COMRAM] unsigned char 
 17167 ;; Return value:  Size  Location     Type
 17168 ;;		None               void
 17169 ;; Registers used:
 17170 ;;		wreg, status,2, status,0, cstack
 17171 ;; Tracked objects:
 17172 ;;		On entry : 0/0
 17173 ;;		On exit  : 0/0
 17174 ;;		Unchanged: 0/0
 17175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17177 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17179 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17180 ;;Total ram usage:        2 bytes
 17181 ;; Hardware stack levels used:    1
 17182 ;; Hardware stack levels required when called:    4
 17183 ;; This function calls:
 17184 ;;		_i2cHighScl
 17185 ;;		_i2cHighSda
 17186 ;;		_i2cLowScl
 17187 ;;		_i2cLowSda
 17188 ;; This function is called by:
 17189 ;;		_DS1621_Read_Temp
 17190 ;;		_DS3231_Read_Time
 17191 ;;		_DS3231_Write_Time
 17192 ;;		_DS3231_Read_Alarm_Time
 17193 ;;		_DS3231_Init
 17194 ;;		_DS3231_Write_Alarm_Time
 17195 ;;		_I2C_Write_Address_Read_One_Byte
 17196 ;;		_I2C_Write_Address_Write_One_Byte
 17197 ;;		_I2C_Write_Cmd_Only
 17198 ;;		_I2C_Write_Cmd_Write_Data
 17199 ;;		_DS3231_Setup_Time
 17200 ;;		_I2C_Write_Cmd_Read_One_Byte
 17201 ;; This function uses a non-reentrant model
 17202 ;;
 17203                           
 17204                           	psect	text100
 17205  00361C                     __ptext100:
 17206                           	opt stack 0
 17207  00361C                     _I2C_Write:
 17208                           	opt stack 23
 17209                           
 17210                           ;incstack = 0
 17211                           ;I2C_Write@outByte stored from wreg
 17212  00361C  6E11               	movwf	I2C_Write@outByte,c
 17213                           
 17214                           ;I2C_Soft.c: 39: unsigned char n;
 17215                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 17216  00361E  0E00               	movlw	0
 17217  003620  6E12               	movwf	I2C_Write@n,c
 17218  003622                     l7878:
 17219  003622  0E07               	movlw	7
 17220  003624  6412               	cpfsgt	I2C_Write@n,c
 17221  003626  D001               	goto	l972
 17222  003628  D011               	goto	l7896
 17223  00362A                     l972:
 17224                           
 17225                           ;I2C_Soft.c: 41: {
 17226                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 17227  00362A  AE11               	btfss	I2C_Write@outByte,7,c
 17228  00362C  D003               	goto	l7884
 17229  00362E  EC0D  F01E         	call	_i2cHighSda	;wreg free
 17230  003632  D003               	goto	l7886
 17231  003634                     l7884:
 17232                           
 17233                           ;I2C_Soft.c: 43: else i2cLowSda();
 17234  003634  ECF1  F01D         	call	_i2cLowSda	;wreg free
 17235  003638  D000               	goto	l7886
 17236  00363A                     l7886:
 17237                           
 17238                           ;I2C_Soft.c: 44: i2cHighScl();
 17239  00363A  ECE1  F01D         	call	_i2cHighScl	;wreg free
 17240                           
 17241                           ;I2C_Soft.c: 45: i2cLowScl();
 17242  00363E  EC09  F01E         	call	_i2cLowScl	;wreg free
 17243                           
 17244                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 17245  003642  5011               	movf	I2C_Write@outByte,w,c
 17246  003644  2411               	addwf	I2C_Write@outByte,w,c
 17247  003646  6E11               	movwf	I2C_Write@outByte,c
 17248  003648  2A12               	incf	I2C_Write@n,f,c
 17249  00364A  D7EB               	goto	l7878
 17250  00364C                     l7896:
 17251                           
 17252                           ;I2C_Soft.c: 47: }
 17253                           ;I2C_Soft.c: 48: i2cHighSda();
 17254  00364C  EC0D  F01E         	call	_i2cHighSda	;wreg free
 17255                           
 17256                           ;I2C_Soft.c: 49: i2cHighScl();
 17257  003650  ECE1  F01D         	call	_i2cHighScl	;wreg free
 17258                           
 17259                           ;I2C_Soft.c: 50: i2cLowScl();
 17260  003654  EC09  F01E         	call	_i2cLowScl	;wreg free
 17261  003658  0012               	return		;funcret
 17262  00365A                     __end_of_I2C_Write:
 17263                           	opt stack 0
 17264                           tblptru	equ	0xFF8
 17265                           tblptrh	equ	0xFF7
 17266                           tblptrl	equ	0xFF6
 17267                           tablat	equ	0xFF5
 17268                           prodh	equ	0xFF4
 17269                           prodl	equ	0xFF3
 17270                           intcon	equ	0xFF2
 17271                           intcon2	equ	0xFF1
 17272                           intcon3	equ	0xFF0
 17273                           postinc0	equ	0xFEE
 17274                           wreg	equ	0xFE8
 17275                           postdec1	equ	0xFE5
 17276                           fsr1l	equ	0xFE1
 17277                           indf2	equ	0xFDF
 17278                           postinc2	equ	0xFDE
 17279                           postdec2	equ	0xFDD
 17280                           fsr2h	equ	0xFDA
 17281                           fsr2l	equ	0xFD9
 17282                           status	equ	0xFD8
 17283                           
 17284 ;; *************** function _I2C_Stop *****************
 17285 ;; Defined at:
 17286 ;;		line 84 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 17287 ;; Parameters:    Size  Location     Type
 17288 ;;		None
 17289 ;; Auto vars:     Size  Location     Type
 17290 ;;		None
 17291 ;; Return value:  Size  Location     Type
 17292 ;;		None               void
 17293 ;; Registers used:
 17294 ;;		wreg, cstack
 17295 ;; Tracked objects:
 17296 ;;		On entry : 0/0
 17297 ;;		On exit  : 0/0
 17298 ;;		Unchanged: 0/0
 17299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17304 ;;Total ram usage:        0 bytes
 17305 ;; Hardware stack levels used:    1
 17306 ;; Hardware stack levels required when called:    4
 17307 ;; This function calls:
 17308 ;;		_i2cHighScl
 17309 ;;		_i2cHighSda
 17310 ;;		_i2cLowScl
 17311 ;;		_i2cLowSda
 17312 ;; This function is called by:
 17313 ;;		_DS1621_Read_Temp
 17314 ;;		_DS3231_Read_Time
 17315 ;;		_DS3231_Write_Time
 17316 ;;		_DS3231_Read_Alarm_Time
 17317 ;;		_DS3231_Init
 17318 ;;		_DS3231_Write_Alarm_Time
 17319 ;;		_I2C_Write_Address_Read_One_Byte
 17320 ;;		_I2C_Write_Address_Write_One_Byte
 17321 ;;		_I2C_Write_Cmd_Only
 17322 ;;		_I2C_Write_Cmd_Write_Data
 17323 ;;		_DS3231_Setup_Time
 17324 ;;		_I2C_Write_Cmd_Read_One_Byte
 17325 ;; This function uses a non-reentrant model
 17326 ;;
 17327                           
 17328                           	psect	text101
 17329  003B22                     __ptext101:
 17330                           	opt stack 0
 17331  003B22                     _I2C_Stop:
 17332                           	opt stack 23
 17333                           
 17334                           ;I2C_Soft.c: 86: i2cLowScl();
 17335                           
 17336                           ;incstack = 0
 17337  003B22  EC09  F01E         	call	_i2cLowScl	;wreg free
 17338                           
 17339                           ;I2C_Soft.c: 87: i2cLowSda();
 17340  003B26  ECF1  F01D         	call	_i2cLowSda	;wreg free
 17341                           
 17342                           ;I2C_Soft.c: 88: i2cHighScl();
 17343  003B2A  ECE1  F01D         	call	_i2cHighScl	;wreg free
 17344                           
 17345                           ;I2C_Soft.c: 89: i2cHighSda();
 17346  003B2E  EC0D  F01E         	call	_i2cHighSda	;wreg free
 17347  003B32  0012               	return		;funcret
 17348  003B34                     __end_of_I2C_Stop:
 17349                           	opt stack 0
 17350                           tblptru	equ	0xFF8
 17351                           tblptrh	equ	0xFF7
 17352                           tblptrl	equ	0xFF6
 17353                           tablat	equ	0xFF5
 17354                           prodh	equ	0xFF4
 17355                           prodl	equ	0xFF3
 17356                           intcon	equ	0xFF2
 17357                           intcon2	equ	0xFF1
 17358                           intcon3	equ	0xFF0
 17359                           postinc0	equ	0xFEE
 17360                           wreg	equ	0xFE8
 17361                           postdec1	equ	0xFE5
 17362                           fsr1l	equ	0xFE1
 17363                           indf2	equ	0xFDF
 17364                           postinc2	equ	0xFDE
 17365                           postdec2	equ	0xFDD
 17366                           fsr2h	equ	0xFDA
 17367                           fsr2l	equ	0xFD9
 17368                           status	equ	0xFD8
 17369                           
 17370 ;; *************** function _I2C_Start *****************
 17371 ;; Defined at:
 17372 ;;		line 67 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 17373 ;; Parameters:    Size  Location     Type
 17374 ;;		None
 17375 ;; Auto vars:     Size  Location     Type
 17376 ;;		None
 17377 ;; Return value:  Size  Location     Type
 17378 ;;		None               void
 17379 ;; Registers used:
 17380 ;;		wreg, cstack
 17381 ;; Tracked objects:
 17382 ;;		On entry : 0/0
 17383 ;;		On exit  : 0/0
 17384 ;;		Unchanged: 0/0
 17385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17390 ;;Total ram usage:        0 bytes
 17391 ;; Hardware stack levels used:    1
 17392 ;; Hardware stack levels required when called:    4
 17393 ;; This function calls:
 17394 ;;		_i2cHighScl
 17395 ;;		_i2cHighSda
 17396 ;;		_i2cLowScl
 17397 ;;		_i2cLowSda
 17398 ;; This function is called by:
 17399 ;;		_DS1621_Read_Temp
 17400 ;;		_DS3231_Read_Time
 17401 ;;		_DS3231_Write_Time
 17402 ;;		_DS3231_Read_Alarm_Time
 17403 ;;		_DS3231_Init
 17404 ;;		_DS3231_Write_Alarm_Time
 17405 ;;		_I2C_Write_Address_Read_One_Byte
 17406 ;;		_I2C_Write_Address_Write_One_Byte
 17407 ;;		_I2C_Write_Cmd_Only
 17408 ;;		_I2C_Write_Cmd_Write_Data
 17409 ;;		_DS3231_Setup_Time
 17410 ;;		_I2C_Write_Cmd_Read_One_Byte
 17411 ;; This function uses a non-reentrant model
 17412 ;;
 17413                           
 17414                           	psect	text102
 17415  003B34                     __ptext102:
 17416                           	opt stack 0
 17417  003B34                     _I2C_Start:
 17418                           	opt stack 23
 17419                           
 17420                           ;I2C_Soft.c: 69: i2cHighSda();
 17421                           
 17422                           ;incstack = 0
 17423  003B34  EC0D  F01E         	call	_i2cHighSda	;wreg free
 17424                           
 17425                           ;I2C_Soft.c: 70: i2cHighScl();
 17426  003B38  ECE1  F01D         	call	_i2cHighScl	;wreg free
 17427                           
 17428                           ;I2C_Soft.c: 71: i2cLowSda();
 17429  003B3C  ECF1  F01D         	call	_i2cLowSda	;wreg free
 17430                           
 17431                           ;I2C_Soft.c: 72: i2cLowScl();
 17432  003B40  EC09  F01E         	call	_i2cLowScl	;wreg free
 17433  003B44  0012               	return		;funcret
 17434  003B46                     __end_of_I2C_Start:
 17435                           	opt stack 0
 17436                           tblptru	equ	0xFF8
 17437                           tblptrh	equ	0xFF7
 17438                           tblptrl	equ	0xFF6
 17439                           tablat	equ	0xFF5
 17440                           prodh	equ	0xFF4
 17441                           prodl	equ	0xFF3
 17442                           intcon	equ	0xFF2
 17443                           intcon2	equ	0xFF1
 17444                           intcon3	equ	0xFF0
 17445                           postinc0	equ	0xFEE
 17446                           wreg	equ	0xFE8
 17447                           postdec1	equ	0xFE5
 17448                           fsr1l	equ	0xFE1
 17449                           indf2	equ	0xFDF
 17450                           postinc2	equ	0xFDE
 17451                           postdec2	equ	0xFDD
 17452                           fsr2h	equ	0xFDA
 17453                           fsr2l	equ	0xFD9
 17454                           status	equ	0xFD8
 17455                           
 17456 ;; *************** function _I2C_Read *****************
 17457 ;; Defined at:
 17458 ;;		line 16 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 17459 ;; Parameters:    Size  Location     Type
 17460 ;;  ack             1    wreg     unsigned char 
 17461 ;; Auto vars:     Size  Location     Type
 17462 ;;  ack             1   16[COMRAM] unsigned char 
 17463 ;;  inByte          1   18[COMRAM] unsigned char 
 17464 ;;  n               1   17[COMRAM] unsigned char 
 17465 ;; Return value:  Size  Location     Type
 17466 ;;                  1    wreg      unsigned char 
 17467 ;; Registers used:
 17468 ;;		wreg, status,2, status,0, cstack
 17469 ;; Tracked objects:
 17470 ;;		On entry : 0/0
 17471 ;;		On exit  : 0/0
 17472 ;;		Unchanged: 0/0
 17473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17475 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17477 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17478 ;;Total ram usage:        3 bytes
 17479 ;; Hardware stack levels used:    1
 17480 ;; Hardware stack levels required when called:    5
 17481 ;; This function calls:
 17482 ;;		_i2cAck
 17483 ;;		_i2cHighScl
 17484 ;;		_i2cHighSda
 17485 ;;		_i2cLowScl
 17486 ;;		_i2cNack
 17487 ;; This function is called by:
 17488 ;;		_DS1621_Read_Temp
 17489 ;;		_DS3231_Read_Time
 17490 ;;		_DS3231_Read_Alarm_Time
 17491 ;;		_DS3231_Init
 17492 ;;		_I2C_Write_Address_Read_One_Byte
 17493 ;;		_I2C_Write_Cmd_Read_One_Byte
 17494 ;; This function uses a non-reentrant model
 17495 ;;
 17496                           
 17497                           	psect	text103
 17498  003558                     __ptext103:
 17499                           	opt stack 0
 17500  003558                     _I2C_Read:
 17501                           	opt stack 22
 17502                           
 17503                           ;incstack = 0
 17504                           ;I2C_Read@ack stored from wreg
 17505  003558  6E11               	movwf	I2C_Read@ack,c
 17506                           
 17507                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 17508                           ;I2C_Soft.c: 19: i2cHighSda();
 17509  00355A  EC0D  F01E         	call	_i2cHighSda	;wreg free
 17510                           
 17511                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 17512  00355E  0E00               	movlw	0
 17513  003560  6E12               	movwf	I2C_Read@n,c
 17514  003562                     l7914:
 17515  003562  0E07               	movlw	7
 17516  003564  6412               	cpfsgt	I2C_Read@n,c
 17517  003566  D001               	goto	l7918
 17518  003568  D00F               	goto	l7932
 17519  00356A                     l7918:
 17520                           
 17521                           ;I2C_Soft.c: 21: {
 17522                           ;I2C_Soft.c: 22: i2cHighScl();
 17523  00356A  ECE1  F01D         	call	_i2cHighScl	;wreg free
 17524                           
 17525                           ;I2C_Soft.c: 24: if (PORTDbits.RD7)
 17526  00356E  AE83               	btfss	3971,7,c	;volatile
 17527  003570  D003               	goto	l7924
 17528                           
 17529                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 17530  003572  80D8               	bsf	status,0,c
 17531  003574  3613               	rlcf	I2C_Read@inByte,f,c
 17532  003576  D004               	goto	l7926
 17533  003578                     l7924:
 17534                           
 17535                           ;I2C_Soft.c: 26: else
 17536                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 17537  003578  5013               	movf	I2C_Read@inByte,w,c
 17538  00357A  2413               	addwf	I2C_Read@inByte,w,c
 17539  00357C  6E13               	movwf	I2C_Read@inByte,c
 17540  00357E  D000               	goto	l7926
 17541  003580                     l7926:
 17542                           
 17543                           ;I2C_Soft.c: 28: i2cLowScl();
 17544  003580  EC09  F01E         	call	_i2cLowScl	;wreg free
 17545  003584  2A12               	incf	I2C_Read@n,f,c
 17546  003586  D7ED               	goto	l7914
 17547  003588                     l7932:
 17548                           
 17549                           ;I2C_Soft.c: 29: }
 17550                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 17551  003588  5011               	movf	I2C_Read@ack,w,c
 17552  00358A  B4D8               	btfsc	status,2,c
 17553  00358C  D003               	goto	l7936
 17554  00358E  ECA3  F01D         	call	_i2cAck	;wreg free
 17555  003592  D003               	goto	l7938
 17556  003594                     l7936:
 17557                           
 17558                           ;I2C_Soft.c: 31: else i2cNack();
 17559  003594  ECEC  F01D         	call	_i2cNack	;wreg free
 17560  003598  D000               	goto	l7938
 17561  00359A                     l7938:
 17562                           
 17563                           ;I2C_Soft.c: 34: return(inByte);
 17564  00359A  5013               	movf	I2C_Read@inByte,w,c
 17565  00359C  D000               	goto	l969
 17566  00359E                     l969:
 17567  00359E  0012               	return		;funcret
 17568  0035A0                     __end_of_I2C_Read:
 17569                           	opt stack 0
 17570                           tblptru	equ	0xFF8
 17571                           tblptrh	equ	0xFF7
 17572                           tblptrl	equ	0xFF6
 17573                           tablat	equ	0xFF5
 17574                           prodh	equ	0xFF4
 17575                           prodl	equ	0xFF3
 17576                           intcon	equ	0xFF2
 17577                           intcon2	equ	0xFF1
 17578                           intcon3	equ	0xFF0
 17579                           postinc0	equ	0xFEE
 17580                           wreg	equ	0xFE8
 17581                           postdec1	equ	0xFE5
 17582                           fsr1l	equ	0xFE1
 17583                           indf2	equ	0xFDF
 17584                           postinc2	equ	0xFDE
 17585                           postdec2	equ	0xFDD
 17586                           fsr2h	equ	0xFDA
 17587                           fsr2l	equ	0xFD9
 17588                           status	equ	0xFD8
 17589                           
 17590 ;; *************** function _i2cNack *****************
 17591 ;; Defined at:
 17592 ;;		line 53 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 17593 ;; Parameters:    Size  Location     Type
 17594 ;;		None
 17595 ;; Auto vars:     Size  Location     Type
 17596 ;;		None
 17597 ;; Return value:  Size  Location     Type
 17598 ;;		None               void
 17599 ;; Registers used:
 17600 ;;		wreg, cstack
 17601 ;; Tracked objects:
 17602 ;;		On entry : 0/0
 17603 ;;		On exit  : 0/0
 17604 ;;		Unchanged: 0/0
 17605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17610 ;;Total ram usage:        0 bytes
 17611 ;; Hardware stack levels used:    1
 17612 ;; Hardware stack levels required when called:    4
 17613 ;; This function calls:
 17614 ;;		_i2cHighScl
 17615 ;;		_i2cLowScl
 17616 ;; This function is called by:
 17617 ;;		_I2C_Read
 17618 ;; This function uses a non-reentrant model
 17619 ;;
 17620                           
 17621                           	psect	text104
 17622  003BD8                     __ptext104:
 17623                           	opt stack 0
 17624  003BD8                     _i2cNack:
 17625                           	opt stack 22
 17626                           
 17627                           ;I2C_Soft.c: 55: i2cHighScl();
 17628                           
 17629                           ;incstack = 0
 17630  003BD8  ECE1  F01D         	call	_i2cHighScl	;wreg free
 17631                           
 17632                           ;I2C_Soft.c: 56: i2cLowScl();
 17633  003BDC  EC09  F01E         	call	_i2cLowScl	;wreg free
 17634  003BE0  0012               	return		;funcret
 17635  003BE2                     __end_of_i2cNack:
 17636                           	opt stack 0
 17637                           tblptru	equ	0xFF8
 17638                           tblptrh	equ	0xFF7
 17639                           tblptrl	equ	0xFF6
 17640                           tablat	equ	0xFF5
 17641                           prodh	equ	0xFF4
 17642                           prodl	equ	0xFF3
 17643                           intcon	equ	0xFF2
 17644                           intcon2	equ	0xFF1
 17645                           intcon3	equ	0xFF0
 17646                           postinc0	equ	0xFEE
 17647                           wreg	equ	0xFE8
 17648                           postdec1	equ	0xFE5
 17649                           fsr1l	equ	0xFE1
 17650                           indf2	equ	0xFDF
 17651                           postinc2	equ	0xFDE
 17652                           postdec2	equ	0xFDD
 17653                           fsr2h	equ	0xFDA
 17654                           fsr2l	equ	0xFD9
 17655                           status	equ	0xFD8
 17656                           
 17657 ;; *************** function _i2cAck *****************
 17658 ;; Defined at:
 17659 ;;		line 59 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 17660 ;; Parameters:    Size  Location     Type
 17661 ;;		None
 17662 ;; Auto vars:     Size  Location     Type
 17663 ;;		None
 17664 ;; Return value:  Size  Location     Type
 17665 ;;		None               void
 17666 ;; Registers used:
 17667 ;;		wreg, cstack
 17668 ;; Tracked objects:
 17669 ;;		On entry : 0/0
 17670 ;;		On exit  : 0/0
 17671 ;;		Unchanged: 0/0
 17672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17677 ;;Total ram usage:        0 bytes
 17678 ;; Hardware stack levels used:    1
 17679 ;; Hardware stack levels required when called:    4
 17680 ;; This function calls:
 17681 ;;		_i2cHighScl
 17682 ;;		_i2cHighSda
 17683 ;;		_i2cLowScl
 17684 ;;		_i2cLowSda
 17685 ;; This function is called by:
 17686 ;;		_I2C_Read
 17687 ;; This function uses a non-reentrant model
 17688 ;;
 17689                           
 17690                           	psect	text105
 17691  003B46                     __ptext105:
 17692                           	opt stack 0
 17693  003B46                     _i2cAck:
 17694                           	opt stack 22
 17695                           
 17696                           ;I2C_Soft.c: 61: i2cLowSda();
 17697                           
 17698                           ;incstack = 0
 17699  003B46  ECF1  F01D         	call	_i2cLowSda	;wreg free
 17700                           
 17701                           ;I2C_Soft.c: 62: i2cHighScl();
 17702  003B4A  ECE1  F01D         	call	_i2cHighScl	;wreg free
 17703                           
 17704                           ;I2C_Soft.c: 63: i2cLowScl();
 17705  003B4E  EC09  F01E         	call	_i2cLowScl	;wreg free
 17706                           
 17707                           ;I2C_Soft.c: 64: i2cHighSda();
 17708  003B52  EC0D  F01E         	call	_i2cHighSda	;wreg free
 17709  003B56  0012               	return		;funcret
 17710  003B58                     __end_of_i2cAck:
 17711                           	opt stack 0
 17712                           tblptru	equ	0xFF8
 17713                           tblptrh	equ	0xFF7
 17714                           tblptrl	equ	0xFF6
 17715                           tablat	equ	0xFF5
 17716                           prodh	equ	0xFF4
 17717                           prodl	equ	0xFF3
 17718                           intcon	equ	0xFF2
 17719                           intcon2	equ	0xFF1
 17720                           intcon3	equ	0xFF0
 17721                           postinc0	equ	0xFEE
 17722                           wreg	equ	0xFE8
 17723                           postdec1	equ	0xFE5
 17724                           fsr1l	equ	0xFE1
 17725                           indf2	equ	0xFDF
 17726                           postinc2	equ	0xFDE
 17727                           postdec2	equ	0xFDD
 17728                           fsr2h	equ	0xFDA
 17729                           fsr2l	equ	0xFD9
 17730                           status	equ	0xFD8
 17731                           
 17732 ;; *************** function _I2C_ReStart *****************
 17733 ;; Defined at:
 17734 ;;		line 75 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 17735 ;; Parameters:    Size  Location     Type
 17736 ;;		None
 17737 ;; Auto vars:     Size  Location     Type
 17738 ;;		None
 17739 ;; Return value:  Size  Location     Type
 17740 ;;		None               void
 17741 ;; Registers used:
 17742 ;;		wreg, cstack
 17743 ;; Tracked objects:
 17744 ;;		On entry : 0/0
 17745 ;;		On exit  : 0/0
 17746 ;;		Unchanged: 0/0
 17747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17752 ;;Total ram usage:        0 bytes
 17753 ;; Hardware stack levels used:    1
 17754 ;; Hardware stack levels required when called:    4
 17755 ;; This function calls:
 17756 ;;		_i2cHighScl
 17757 ;;		_i2cHighSda
 17758 ;;		_i2cLowScl
 17759 ;;		_i2cLowSda
 17760 ;; This function is called by:
 17761 ;;		_DS1621_Read_Temp
 17762 ;;		_DS3231_Read_Time
 17763 ;;		_DS3231_Read_Alarm_Time
 17764 ;;		_DS3231_Init
 17765 ;;		_I2C_Write_Address_Read_One_Byte
 17766 ;;		_I2C_Write_Cmd_Read_One_Byte
 17767 ;; This function uses a non-reentrant model
 17768 ;;
 17769                           
 17770                           	psect	text106
 17771  003A88                     __ptext106:
 17772                           	opt stack 0
 17773  003A88                     _I2C_ReStart:
 17774                           	opt stack 23
 17775                           
 17776                           ;I2C_Soft.c: 77: i2cLowScl();
 17777                           
 17778                           ;incstack = 0
 17779  003A88  EC09  F01E         	call	_i2cLowScl	;wreg free
 17780                           
 17781                           ;I2C_Soft.c: 78: i2cHighSda();
 17782  003A8C  EC0D  F01E         	call	_i2cHighSda	;wreg free
 17783                           
 17784                           ;I2C_Soft.c: 79: i2cHighScl();
 17785  003A90  ECE1  F01D         	call	_i2cHighScl	;wreg free
 17786                           
 17787                           ;I2C_Soft.c: 80: i2cLowSda();
 17788  003A94  ECF1  F01D         	call	_i2cLowSda	;wreg free
 17789                           
 17790                           ;I2C_Soft.c: 81: i2cLowScl();
 17791  003A98  EC09  F01E         	call	_i2cLowScl	;wreg free
 17792  003A9C  0012               	return		;funcret
 17793  003A9E                     __end_of_I2C_ReStart:
 17794                           	opt stack 0
 17795                           tblptru	equ	0xFF8
 17796                           tblptrh	equ	0xFF7
 17797                           tblptrl	equ	0xFF6
 17798                           tablat	equ	0xFF5
 17799                           prodh	equ	0xFF4
 17800                           prodl	equ	0xFF3
 17801                           intcon	equ	0xFF2
 17802                           intcon2	equ	0xFF1
 17803                           intcon3	equ	0xFF0
 17804                           postinc0	equ	0xFEE
 17805                           wreg	equ	0xFE8
 17806                           postdec1	equ	0xFE5
 17807                           fsr1l	equ	0xFE1
 17808                           indf2	equ	0xFDF
 17809                           postinc2	equ	0xFDE
 17810                           postdec2	equ	0xFDD
 17811                           fsr2h	equ	0xFDA
 17812                           fsr2l	equ	0xFD9
 17813                           status	equ	0xFD8
 17814                           
 17815 ;; *************** function _i2cLowSda *****************
 17816 ;; Defined at:
 17817 ;;		line 98 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 17818 ;; Parameters:    Size  Location     Type
 17819 ;;		None
 17820 ;; Auto vars:     Size  Location     Type
 17821 ;;		None
 17822 ;; Return value:  Size  Location     Type
 17823 ;;		None               void
 17824 ;; Registers used:
 17825 ;;		None
 17826 ;; Tracked objects:
 17827 ;;		On entry : 0/0
 17828 ;;		On exit  : 0/0
 17829 ;;		Unchanged: 0/0
 17830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17835 ;;Total ram usage:        0 bytes
 17836 ;; Hardware stack levels used:    1
 17837 ;; Hardware stack levels required when called:    3
 17838 ;; This function calls:
 17839 ;;		Nothing
 17840 ;; This function is called by:
 17841 ;;		_I2C_Write
 17842 ;;		_i2cAck
 17843 ;;		_I2C_Start
 17844 ;;		_I2C_ReStart
 17845 ;;		_I2C_Stop
 17846 ;; This function uses a non-reentrant model
 17847 ;;
 17848                           
 17849                           	psect	text107
 17850  003BE2                     __ptext107:
 17851                           	opt stack 0
 17852  003BE2                     _i2cLowSda:
 17853                           	opt stack 23
 17854                           
 17855                           ;I2C_Soft.c: 100: PORTDbits.RD7 = 0;
 17856                           
 17857                           ;incstack = 0
 17858  003BE2  9E83               	bcf	3971,7,c	;volatile
 17859                           
 17860                           ;I2C_Soft.c: 101: PORTDbits.RD7 = 0;
 17861  003BE4  9E83               	bcf	3971,7,c	;volatile
 17862                           
 17863                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 17864  003BE6  D000               	nop2		;2 cycle nop
 17865  003BE8  D000               	nop2		;2 cycle nop
 17866  003BEA  0012               	return		;funcret
 17867  003BEC                     __end_of_i2cLowSda:
 17868                           	opt stack 0
 17869                           tblptru	equ	0xFF8
 17870                           tblptrh	equ	0xFF7
 17871                           tblptrl	equ	0xFF6
 17872                           tablat	equ	0xFF5
 17873                           prodh	equ	0xFF4
 17874                           prodl	equ	0xFF3
 17875                           intcon	equ	0xFF2
 17876                           intcon2	equ	0xFF1
 17877                           intcon3	equ	0xFF0
 17878                           postinc0	equ	0xFEE
 17879                           wreg	equ	0xFE8
 17880                           postdec1	equ	0xFE5
 17881                           fsr1l	equ	0xFE1
 17882                           indf2	equ	0xFDF
 17883                           postinc2	equ	0xFDE
 17884                           postdec2	equ	0xFDD
 17885                           fsr2h	equ	0xFDA
 17886                           fsr2l	equ	0xFD9
 17887                           status	equ	0xFD8
 17888                           
 17889 ;; *************** function _i2cLowScl *****************
 17890 ;; Defined at:
 17891 ;;		line 111 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 17892 ;; Parameters:    Size  Location     Type
 17893 ;;		None
 17894 ;; Auto vars:     Size  Location     Type
 17895 ;;		None
 17896 ;; Return value:  Size  Location     Type
 17897 ;;		None               void
 17898 ;; Registers used:
 17899 ;;		None
 17900 ;; Tracked objects:
 17901 ;;		On entry : 0/0
 17902 ;;		On exit  : 0/0
 17903 ;;		Unchanged: 0/0
 17904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17909 ;;Total ram usage:        0 bytes
 17910 ;; Hardware stack levels used:    1
 17911 ;; Hardware stack levels required when called:    3
 17912 ;; This function calls:
 17913 ;;		Nothing
 17914 ;; This function is called by:
 17915 ;;		_I2C_Read
 17916 ;;		_I2C_Write
 17917 ;;		_i2cNack
 17918 ;;		_i2cAck
 17919 ;;		_I2C_Start
 17920 ;;		_I2C_ReStart
 17921 ;;		_I2C_Stop
 17922 ;; This function uses a non-reentrant model
 17923 ;;
 17924                           
 17925                           	psect	text108
 17926  003C12                     __ptext108:
 17927                           	opt stack 0
 17928  003C12                     _i2cLowScl:
 17929                           	opt stack 23
 17930                           
 17931                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
 17932                           
 17933                           ;incstack = 0
 17934  003C12  9881               	bcf	3969,4,c	;volatile
 17935                           
 17936                           ;I2C_Soft.c: 114: PORTBbits.RB4 = 0;
 17937  003C14  9881               	bcf	3969,4,c	;volatile
 17938                           
 17939                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 17940  003C16  D000               	nop2		;2 cycle nop
 17941  003C18  0012               	return		;funcret
 17942  003C1A                     __end_of_i2cLowScl:
 17943                           	opt stack 0
 17944                           tblptru	equ	0xFF8
 17945                           tblptrh	equ	0xFF7
 17946                           tblptrl	equ	0xFF6
 17947                           tablat	equ	0xFF5
 17948                           prodh	equ	0xFF4
 17949                           prodl	equ	0xFF3
 17950                           intcon	equ	0xFF2
 17951                           intcon2	equ	0xFF1
 17952                           intcon3	equ	0xFF0
 17953                           postinc0	equ	0xFEE
 17954                           wreg	equ	0xFE8
 17955                           postdec1	equ	0xFE5
 17956                           fsr1l	equ	0xFE1
 17957                           indf2	equ	0xFDF
 17958                           postinc2	equ	0xFDE
 17959                           postdec2	equ	0xFDD
 17960                           fsr2h	equ	0xFDA
 17961                           fsr2l	equ	0xFD9
 17962                           status	equ	0xFD8
 17963                           
 17964 ;; *************** function _i2cHighSda *****************
 17965 ;; Defined at:
 17966 ;;		line 92 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 17967 ;; Parameters:    Size  Location     Type
 17968 ;;		None
 17969 ;; Auto vars:     Size  Location     Type
 17970 ;;		None
 17971 ;; Return value:  Size  Location     Type
 17972 ;;		None               void
 17973 ;; Registers used:
 17974 ;;		None
 17975 ;; Tracked objects:
 17976 ;;		On entry : 0/0
 17977 ;;		On exit  : 0/0
 17978 ;;		Unchanged: 0/0
 17979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17984 ;;Total ram usage:        0 bytes
 17985 ;; Hardware stack levels used:    1
 17986 ;; Hardware stack levels required when called:    3
 17987 ;; This function calls:
 17988 ;;		Nothing
 17989 ;; This function is called by:
 17990 ;;		_I2C_Init
 17991 ;;		_I2C_Read
 17992 ;;		_I2C_Write
 17993 ;;		_i2cAck
 17994 ;;		_I2C_Start
 17995 ;;		_I2C_ReStart
 17996 ;;		_I2C_Stop
 17997 ;; This function uses a non-reentrant model
 17998 ;;
 17999                           
 18000                           	psect	text109
 18001  003C1A                     __ptext109:
 18002                           	opt stack 0
 18003  003C1A                     _i2cHighSda:
 18004                           	opt stack 23
 18005                           
 18006                           ;I2C_Soft.c: 94: PORTDbits.RD7 = 1;
 18007                           
 18008                           ;incstack = 0
 18009  003C1A  8E83               	bsf	3971,7,c	;volatile
 18010                           
 18011                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 18012  003C1C  D000               	nop2		;2 cycle nop
 18013  003C1E  D000               	nop2		;2 cycle nop
 18014  003C20  0012               	return		;funcret
 18015  003C22                     __end_of_i2cHighSda:
 18016                           	opt stack 0
 18017                           tblptru	equ	0xFF8
 18018                           tblptrh	equ	0xFF7
 18019                           tblptrl	equ	0xFF6
 18020                           tablat	equ	0xFF5
 18021                           prodh	equ	0xFF4
 18022                           prodl	equ	0xFF3
 18023                           intcon	equ	0xFF2
 18024                           intcon2	equ	0xFF1
 18025                           intcon3	equ	0xFF0
 18026                           postinc0	equ	0xFEE
 18027                           wreg	equ	0xFE8
 18028                           postdec1	equ	0xFE5
 18029                           fsr1l	equ	0xFE1
 18030                           indf2	equ	0xFDF
 18031                           postinc2	equ	0xFDE
 18032                           postdec2	equ	0xFDD
 18033                           fsr2h	equ	0xFDA
 18034                           fsr2l	equ	0xFD9
 18035                           status	equ	0xFD8
 18036                           
 18037 ;; *************** function _i2cHighScl *****************
 18038 ;; Defined at:
 18039 ;;		line 105 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/I2C_Soft.c"
 18040 ;; Parameters:    Size  Location     Type
 18041 ;;		None
 18042 ;; Auto vars:     Size  Location     Type
 18043 ;;		None
 18044 ;; Return value:  Size  Location     Type
 18045 ;;		None               void
 18046 ;; Registers used:
 18047 ;;		wreg
 18048 ;; Tracked objects:
 18049 ;;		On entry : 0/0
 18050 ;;		On exit  : 0/0
 18051 ;;		Unchanged: 0/0
 18052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18057 ;;Total ram usage:        0 bytes
 18058 ;; Hardware stack levels used:    1
 18059 ;; Hardware stack levels required when called:    3
 18060 ;; This function calls:
 18061 ;;		Nothing
 18062 ;; This function is called by:
 18063 ;;		_I2C_Init
 18064 ;;		_I2C_Read
 18065 ;;		_I2C_Write
 18066 ;;		_i2cNack
 18067 ;;		_i2cAck
 18068 ;;		_I2C_Start
 18069 ;;		_I2C_ReStart
 18070 ;;		_I2C_Stop
 18071 ;; This function uses a non-reentrant model
 18072 ;;
 18073                           
 18074                           	psect	text110
 18075  003BC2                     __ptext110:
 18076                           	opt stack 0
 18077  003BC2                     _i2cHighScl:
 18078                           	opt stack 23
 18079                           
 18080                           ;I2C_Soft.c: 107: PORTBbits.RB4 = 1;
 18081                           
 18082                           ;incstack = 0
 18083  003BC2  8881               	bsf	3969,4,c	;volatile
 18084                           
 18085                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 18086  003BC4  0E06               	movlw	6
 18087  003BC6                     u7257:
 18088  003BC6  2EE8               	decfsz	wreg,f,c
 18089  003BC8  D7FE               	goto	u7257
 18090  003BCA  D000               	nop2		;nop
 18091  003BCC  0012               	return		;funcret
 18092  003BCE                     __end_of_i2cHighScl:
 18093                           	opt stack 0
 18094                           tblptru	equ	0xFF8
 18095                           tblptrh	equ	0xFF7
 18096                           tblptrl	equ	0xFF6
 18097                           tablat	equ	0xFF5
 18098                           prodh	equ	0xFF4
 18099                           prodl	equ	0xFF3
 18100                           intcon	equ	0xFF2
 18101                           intcon2	equ	0xFF1
 18102                           intcon3	equ	0xFF0
 18103                           postinc0	equ	0xFEE
 18104                           wreg	equ	0xFE8
 18105                           postdec1	equ	0xFE5
 18106                           fsr1l	equ	0xFE1
 18107                           indf2	equ	0xFDF
 18108                           postinc2	equ	0xFDE
 18109                           postdec2	equ	0xFDD
 18110                           fsr2h	equ	0xFDA
 18111                           fsr2l	equ	0xFD9
 18112                           status	equ	0xFD8
 18113                           
 18114 ;; *************** function _chkisr *****************
 18115 ;; Defined at:
 18116 ;;		line 39 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Interrupt.c"
 18117 ;; Parameters:    Size  Location     Type
 18118 ;;		None
 18119 ;; Auto vars:     Size  Location     Type
 18120 ;;		None
 18121 ;; Return value:  Size  Location     Type
 18122 ;;		None               void
 18123 ;; Registers used:
 18124 ;;		wreg, status,2, status,0, cstack
 18125 ;; Tracked objects:
 18126 ;;		On entry : 0/0
 18127 ;;		On exit  : 0/0
 18128 ;;		Unchanged: 0/0
 18129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18132 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18133 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18134 ;;Total ram usage:       14 bytes
 18135 ;; Hardware stack levels used:    1
 18136 ;; Hardware stack levels required when called:    2
 18137 ;; This function calls:
 18138 ;;		_INT0_isr
 18139 ;;		_INT1_isr
 18140 ;;		_INT2_isr
 18141 ;;		_TIMER1_isr
 18142 ;; This function is called by:
 18143 ;;		Interrupt level 2
 18144 ;; This function uses a non-reentrant model
 18145 ;;
 18146                           
 18147                           	psect	intcode
 18148  000008                     __pintcode:
 18149                           	opt stack 0
 18150  000008                     _chkisr:
 18151                           	opt stack 18
 18152                           
 18153                           ;incstack = 0
 18154  000008  CFFA F003          	movff	pclath,??_chkisr
 18155  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 18156  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 18157  000014  EDBA  F015         	call	int_func,f	;refresh shadow registers
 18158                           pclatu	equ	0xFFB
 18159                           pclath	equ	0xFFA
 18160                           tblptru	equ	0xFF8
 18161                           tblptrh	equ	0xFF7
 18162                           tblptrl	equ	0xFF6
 18163                           tablat	equ	0xFF5
 18164                           prodh	equ	0xFF4
 18165                           prodl	equ	0xFF3
 18166                           intcon	equ	0xFF2
 18167                           intcon2	equ	0xFF1
 18168                           intcon3	equ	0xFF0
 18169                           postinc0	equ	0xFEE
 18170                           fsr0l	equ	0xFE9
 18171                           wreg	equ	0xFE8
 18172                           postdec1	equ	0xFE5
 18173                           fsr1l	equ	0xFE1
 18174                           indf2	equ	0xFDF
 18175                           postinc2	equ	0xFDE
 18176                           postdec2	equ	0xFDD
 18177                           fsr2h	equ	0xFDA
 18178                           fsr2l	equ	0xFD9
 18179                           status	equ	0xFD8
 18180                           
 18181                           	psect	intcode_body
 18182  002B74                     __pintcode_body:
 18183                           	opt stack 18
 18184  002B74                     int_func:
 18185                           	opt stack 18
 18186  002B74  0006               	pop		; remove dummy address from shadow register refresh
 18187  002B76  CFEA F006          	movff	fsr0h,??_chkisr+3
 18188  002B7A  CFE1 F007          	movff	fsr1l,??_chkisr+4
 18189  002B7E  CFE2 F008          	movff	fsr1h,??_chkisr+5
 18190  002B82  CFD9 F009          	movff	fsr2l,??_chkisr+6
 18191  002B86  CFDA F00A          	movff	fsr2h,??_chkisr+7
 18192  002B8A  CFF3 F00B          	movff	prodl,??_chkisr+8
 18193  002B8E  CFF4 F00C          	movff	prodh,??_chkisr+9
 18194  002B92  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 18195  002B96  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 18196  002B9A  CFF8 F00F          	movff	tblptru,??_chkisr+12
 18197  002B9E  CFF5 F010          	movff	tablat,??_chkisr+13
 18198                           
 18199                           ;Interrupt.c: 42: if (PIR1bits.TMR1IF == 1) {TIMER1_isr();}
 18200  002BA2  A09E               	btfss	3998,0,c	;volatile
 18201  002BA4  D003               	goto	i2l7438
 18202  002BA6  ECDA  F01D         	call	_TIMER1_isr	;wreg free
 18203  002BAA  D000               	goto	i2l7438
 18204  002BAC                     i2l7438:
 18205                           
 18206                           ;Interrupt.c: 43: if (INTCONbits.INT0IF == 1) {INT0_isr();}
 18207  002BAC  A2F2               	btfss	intcon,1,c	;volatile
 18208  002BAE  D003               	goto	i2l7442
 18209  002BB0  ECE9  F00A         	call	_INT0_isr	;wreg free
 18210  002BB4  D000               	goto	i2l7442
 18211  002BB6                     i2l7442:
 18212                           
 18213                           ;Interrupt.c: 44: if (INTCON3bits.INT1IF == 1) {INT1_isr();}
 18214  002BB6  A0F0               	btfss	intcon3,0,c	;volatile
 18215  002BB8  D003               	goto	i2l7446
 18216  002BBA  ECFB  F01D         	call	_INT1_isr	;wreg free
 18217  002BBE  D000               	goto	i2l7446
 18218  002BC0                     i2l7446:
 18219                           
 18220                           ;Interrupt.c: 45: if (INTCON3bits.INT2IF == 1) {INT2_isr();}
 18221  002BC0  A2F0               	btfss	intcon3,1,c	;volatile
 18222  002BC2  D003               	goto	i2l816
 18223  002BC4  ECF6  F01D         	call	_INT2_isr	;wreg free
 18224  002BC8  D000               	goto	i2l816
 18225  002BCA                     i2l816:
 18226  002BCA  C010  FFF5         	movff	??_chkisr+13,tablat
 18227  002BCE  C00F  FFF8         	movff	??_chkisr+12,tblptru
 18228  002BD2  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 18229  002BD6  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 18230  002BDA  C00C  FFF4         	movff	??_chkisr+9,prodh
 18231  002BDE  C00B  FFF3         	movff	??_chkisr+8,prodl
 18232  002BE2  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 18233  002BE6  C009  FFD9         	movff	??_chkisr+6,fsr2l
 18234  002BEA  C008  FFE2         	movff	??_chkisr+5,fsr1h
 18235  002BEE  C007  FFE1         	movff	??_chkisr+4,fsr1l
 18236  002BF2  C006  FFEA         	movff	??_chkisr+3,fsr0h
 18237  002BF6  C005  FFE9         	movff	??_chkisr+2,fsr0l
 18238  002BFA  C004  FFFB         	movff	??_chkisr+1,pclatu
 18239  002BFE  C003  FFFA         	movff	??_chkisr,pclath
 18240  002C02  0011               	retfie		f
 18241  002C04                     __end_of_chkisr:
 18242                           	opt stack 0
 18243                           pclatu	equ	0xFFB
 18244                           pclath	equ	0xFFA
 18245                           tblptru	equ	0xFF8
 18246                           tblptrh	equ	0xFF7
 18247                           tblptrl	equ	0xFF6
 18248                           tablat	equ	0xFF5
 18249                           prodh	equ	0xFF4
 18250                           prodl	equ	0xFF3
 18251                           intcon	equ	0xFF2
 18252                           intcon2	equ	0xFF1
 18253                           intcon3	equ	0xFF0
 18254                           postinc0	equ	0xFEE
 18255                           fsr0h	equ	0xFEA
 18256                           fsr0l	equ	0xFE9
 18257                           wreg	equ	0xFE8
 18258                           postdec1	equ	0xFE5
 18259                           fsr1h	equ	0xFE2
 18260                           fsr1l	equ	0xFE1
 18261                           indf2	equ	0xFDF
 18262                           postinc2	equ	0xFDE
 18263                           postdec2	equ	0xFDD
 18264                           fsr2h	equ	0xFDA
 18265                           fsr2l	equ	0xFD9
 18266                           status	equ	0xFD8
 18267                           
 18268 ;; *************** function _TIMER1_isr *****************
 18269 ;; Defined at:
 18270 ;;		line 48 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Interrupt.c"
 18271 ;; Parameters:    Size  Location     Type
 18272 ;;		None
 18273 ;; Auto vars:     Size  Location     Type
 18274 ;;		None
 18275 ;; Return value:  Size  Location     Type
 18276 ;;		None               void
 18277 ;; Registers used:
 18278 ;;		wreg, status,2
 18279 ;; Tracked objects:
 18280 ;;		On entry : 0/0
 18281 ;;		On exit  : 0/0
 18282 ;;		Unchanged: 0/0
 18283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18288 ;;Total ram usage:        0 bytes
 18289 ;; Hardware stack levels used:    1
 18290 ;; This function calls:
 18291 ;;		Nothing
 18292 ;; This function is called by:
 18293 ;;		_chkisr
 18294 ;; This function uses a non-reentrant model
 18295 ;;
 18296                           
 18297                           	psect	text112
 18298  003BB4                     __ptext112:
 18299                           	opt stack 0
 18300  003BB4                     _TIMER1_isr:
 18301                           	opt stack 19
 18302                           
 18303                           ;Interrupt.c: 50: Nec_state = 0;
 18304                           
 18305                           ;incstack = 0
 18306  003BB4  0E00               	movlw	0
 18307  003BB6  0100               	movlb	0	; () banked
 18308  003BB8  6FF4               	movwf	_Nec_state& (0+255),b
 18309                           
 18310                           ; BSR set to: 0
 18311                           ;Interrupt.c: 51: INTCON2bits.INTEDG0 = 0;
 18312  003BBA  9CF1               	bcf	intcon2,6,c	;volatile
 18313                           
 18314                           ; BSR set to: 0
 18315                           ;Interrupt.c: 52: T1CONbits.TMR1ON = 0;
 18316  003BBC  90CD               	bcf	4045,0,c	;volatile
 18317                           
 18318                           ; BSR set to: 0
 18319                           ;Interrupt.c: 53: PIR1bits.TMR1IF = 0;
 18320  003BBE  909E               	bcf	3998,0,c	;volatile
 18321                           
 18322                           ; BSR set to: 0
 18323  003BC0  0012               	return		;funcret
 18324  003BC2                     __end_of_TIMER1_isr:
 18325                           	opt stack 0
 18326                           pclatu	equ	0xFFB
 18327                           pclath	equ	0xFFA
 18328                           tblptru	equ	0xFF8
 18329                           tblptrh	equ	0xFF7
 18330                           tblptrl	equ	0xFF6
 18331                           tablat	equ	0xFF5
 18332                           prodh	equ	0xFF4
 18333                           prodl	equ	0xFF3
 18334                           intcon	equ	0xFF2
 18335                           intcon2	equ	0xFF1
 18336                           intcon3	equ	0xFF0
 18337                           postinc0	equ	0xFEE
 18338                           fsr0h	equ	0xFEA
 18339                           fsr0l	equ	0xFE9
 18340                           wreg	equ	0xFE8
 18341                           postdec1	equ	0xFE5
 18342                           fsr1h	equ	0xFE2
 18343                           fsr1l	equ	0xFE1
 18344                           indf2	equ	0xFDF
 18345                           postinc2	equ	0xFDE
 18346                           postdec2	equ	0xFDD
 18347                           fsr2h	equ	0xFDA
 18348                           fsr2l	equ	0xFD9
 18349                           status	equ	0xFD8
 18350                           
 18351 ;; *************** function _INT2_isr *****************
 18352 ;; Defined at:
 18353 ;;		line 174 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Interrupt.c"
 18354 ;; Parameters:    Size  Location     Type
 18355 ;;		None
 18356 ;; Auto vars:     Size  Location     Type
 18357 ;;		None
 18358 ;; Return value:  Size  Location     Type
 18359 ;;		None               void
 18360 ;; Registers used:
 18361 ;;		wreg, status,2
 18362 ;; Tracked objects:
 18363 ;;		On entry : 0/0
 18364 ;;		On exit  : 0/0
 18365 ;;		Unchanged: 0/0
 18366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18371 ;;Total ram usage:        0 bytes
 18372 ;; Hardware stack levels used:    1
 18373 ;; This function calls:
 18374 ;;		Nothing
 18375 ;; This function is called by:
 18376 ;;		_chkisr
 18377 ;; This function uses a non-reentrant model
 18378 ;;
 18379                           
 18380                           	psect	text113
 18381  003BEC                     __ptext113:
 18382                           	opt stack 0
 18383  003BEC                     _INT2_isr:
 18384                           	opt stack 19
 18385                           
 18386                           ;Interrupt.c: 177: INTCON3bits.INT2IF=0;
 18387                           
 18388                           ; BSR set to: 0
 18389                           ;incstack = 0
 18390  003BEC  92F0               	bcf	intcon3,1,c	;volatile
 18391                           
 18392                           ;Interrupt.c: 179: INT2_flag = 1;
 18393  003BEE  0E01               	movlw	1
 18394  003BF0  0100               	movlb	0	; () banked
 18395  003BF2  6FF0               	movwf	_INT2_flag& (0+255),b
 18396                           
 18397                           ; BSR set to: 0
 18398  003BF4  0012               	return		;funcret
 18399  003BF6                     __end_of_INT2_isr:
 18400                           	opt stack 0
 18401                           pclatu	equ	0xFFB
 18402                           pclath	equ	0xFFA
 18403                           tblptru	equ	0xFF8
 18404                           tblptrh	equ	0xFF7
 18405                           tblptrl	equ	0xFF6
 18406                           tablat	equ	0xFF5
 18407                           prodh	equ	0xFF4
 18408                           prodl	equ	0xFF3
 18409                           intcon	equ	0xFF2
 18410                           intcon2	equ	0xFF1
 18411                           intcon3	equ	0xFF0
 18412                           postinc0	equ	0xFEE
 18413                           fsr0h	equ	0xFEA
 18414                           fsr0l	equ	0xFE9
 18415                           wreg	equ	0xFE8
 18416                           postdec1	equ	0xFE5
 18417                           fsr1h	equ	0xFE2
 18418                           fsr1l	equ	0xFE1
 18419                           indf2	equ	0xFDF
 18420                           postinc2	equ	0xFDE
 18421                           postdec2	equ	0xFDD
 18422                           fsr2h	equ	0xFDA
 18423                           fsr2l	equ	0xFD9
 18424                           status	equ	0xFD8
 18425                           
 18426 ;; *************** function _INT1_isr *****************
 18427 ;; Defined at:
 18428 ;;		line 166 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Interrupt.c"
 18429 ;; Parameters:    Size  Location     Type
 18430 ;;		None
 18431 ;; Auto vars:     Size  Location     Type
 18432 ;;		None
 18433 ;; Return value:  Size  Location     Type
 18434 ;;		None               void
 18435 ;; Registers used:
 18436 ;;		wreg, status,2
 18437 ;; Tracked objects:
 18438 ;;		On entry : 0/0
 18439 ;;		On exit  : 0/0
 18440 ;;		Unchanged: 0/0
 18441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18446 ;;Total ram usage:        0 bytes
 18447 ;; Hardware stack levels used:    1
 18448 ;; This function calls:
 18449 ;;		Nothing
 18450 ;; This function is called by:
 18451 ;;		_chkisr
 18452 ;; This function uses a non-reentrant model
 18453 ;;
 18454                           
 18455                           	psect	text114
 18456  003BF6                     __ptext114:
 18457                           	opt stack 0
 18458  003BF6                     _INT1_isr:
 18459                           	opt stack 19
 18460                           
 18461                           ;Interrupt.c: 169: INTCON3bits.INT1IF=0;
 18462                           
 18463                           ; BSR set to: 0
 18464                           ;incstack = 0
 18465  003BF6  90F0               	bcf	intcon3,0,c	;volatile
 18466                           
 18467                           ;Interrupt.c: 171: INT1_flag = 1;
 18468  003BF8  0E01               	movlw	1
 18469  003BFA  0100               	movlb	0	; () banked
 18470  003BFC  6FEF               	movwf	_INT1_flag& (0+255),b
 18471                           
 18472                           ; BSR set to: 0
 18473  003BFE  0012               	return		;funcret
 18474  003C00                     __end_of_INT1_isr:
 18475                           	opt stack 0
 18476                           pclatu	equ	0xFFB
 18477                           pclath	equ	0xFFA
 18478                           tblptru	equ	0xFF8
 18479                           tblptrh	equ	0xFF7
 18480                           tblptrl	equ	0xFF6
 18481                           tablat	equ	0xFF5
 18482                           prodh	equ	0xFF4
 18483                           prodl	equ	0xFF3
 18484                           intcon	equ	0xFF2
 18485                           intcon2	equ	0xFF1
 18486                           intcon3	equ	0xFF0
 18487                           postinc0	equ	0xFEE
 18488                           fsr0h	equ	0xFEA
 18489                           fsr0l	equ	0xFE9
 18490                           wreg	equ	0xFE8
 18491                           postdec1	equ	0xFE5
 18492                           fsr1h	equ	0xFE2
 18493                           fsr1l	equ	0xFE1
 18494                           indf2	equ	0xFDF
 18495                           postinc2	equ	0xFDE
 18496                           postdec2	equ	0xFDD
 18497                           fsr2h	equ	0xFDA
 18498                           fsr2l	equ	0xFD9
 18499                           status	equ	0xFD8
 18500                           
 18501 ;; *************** function _INT0_isr *****************
 18502 ;; Defined at:
 18503 ;;		line 62 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Interrupt.c"
 18504 ;; Parameters:    Size  Location     Type
 18505 ;;		None
 18506 ;; Auto vars:     Size  Location     Type
 18507 ;;		None
 18508 ;; Return value:  Size  Location     Type
 18509 ;;		None               void
 18510 ;; Registers used:
 18511 ;;		wreg, status,2, status,0, cstack
 18512 ;; Tracked objects:
 18513 ;;		On entry : 0/0
 18514 ;;		On exit  : 0/0
 18515 ;;		Unchanged: 0/0
 18516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18519 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18520 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18521 ;;Total ram usage:        2 bytes
 18522 ;; Hardware stack levels used:    1
 18523 ;; Hardware stack levels required when called:    1
 18524 ;; This function calls:
 18525 ;;		_force_nec_state0
 18526 ;; This function is called by:
 18527 ;;		_chkisr
 18528 ;; This function uses a non-reentrant model
 18529 ;;
 18530                           
 18531                           	psect	text115
 18532  0015D2                     __ptext115:
 18533                           	opt stack 0
 18534  0015D2                     _INT0_isr:
 18535                           	opt stack 18
 18536                           
 18537                           ;Interrupt.c: 66: INTCONbits.INT0IF = 0;
 18538                           
 18539                           ; BSR set to: 0
 18540                           ;incstack = 0
 18541  0015D2  92F2               	bcf	intcon,1,c	;volatile
 18542                           
 18543                           ;Interrupt.c: 67: if (Nec_state != 0)
 18544  0015D4  0100               	movlb	0	; () banked
 18545  0015D6  51F4               	movf	_Nec_state& (0+255),w,b
 18546  0015D8  B4D8               	btfsc	status,2,c
 18547  0015DA  D0A6               	goto	i2l7266
 18548                           
 18549                           ; BSR set to: 0
 18550                           ;Interrupt.c: 68: {
 18551                           ;Interrupt.c: 69: Time_Elapsed = (TMR1H << 8) | TMR1L;
 18552  0015DC  50CE               	movf	4046,w,c	;volatile
 18553  0015DE  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 18554  0015E2  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 18555  0015E4  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 18556  0015E8  6A01               	clrf	??_INT0_isr,c
 18557  0015EA  1001               	iorwf	??_INT0_isr,w,c
 18558  0015EC  6E4E               	movwf	_Time_Elapsed,c
 18559  0015EE  5002               	movf	??_INT0_isr+1,w,c
 18560  0015F0  6E4F               	movwf	_Time_Elapsed+1,c
 18561                           
 18562                           ; BSR set to: 0
 18563                           ;Interrupt.c: 70: TMR1H = 0;
 18564  0015F2  0E00               	movlw	0
 18565  0015F4  6ECF               	movwf	4047,c	;volatile
 18566                           
 18567                           ; BSR set to: 0
 18568                           ;Interrupt.c: 71: TMR1L = 0;
 18569  0015F6  0E00               	movlw	0
 18570  0015F8  6ECE               	movwf	4046,c	;volatile
 18571                           
 18572                           ; BSR set to: 0
 18573                           ;Interrupt.c: 72: }
 18574                           ;Interrupt.c: 74: switch(Nec_state)
 18575  0015FA  D096               	goto	i2l7266
 18576  0015FC                     i2l7196:
 18577                           
 18578                           ; BSR set to: 0
 18579                           ;Interrupt.c: 77: {
 18580                           ;Interrupt.c: 79: TMR1H = 0;
 18581  0015FC  0E00               	movlw	0
 18582  0015FE  6ECF               	movwf	4047,c	;volatile
 18583                           
 18584                           ;Interrupt.c: 80: TMR1L = 0;
 18585  001600  0E00               	movlw	0
 18586  001602  6ECE               	movwf	4046,c	;volatile
 18587                           
 18588                           ; BSR set to: 0
 18589                           ;Interrupt.c: 81: PIR1bits.TMR1IF = 0;
 18590  001604  909E               	bcf	3998,0,c	;volatile
 18591                           
 18592                           ;Interrupt.c: 82: T1CON= 0x90;
 18593  001606  0E90               	movlw	144
 18594  001608  6ECD               	movwf	4045,c	;volatile
 18595                           
 18596                           ; BSR set to: 0
 18597                           ;Interrupt.c: 83: T1CONbits.TMR1ON = 1;
 18598  00160A  80CD               	bsf	4045,0,c	;volatile
 18599                           
 18600                           ;Interrupt.c: 84: bit_count = 0;
 18601  00160C  0E00               	movlw	0
 18602  00160E  0100               	movlb	0	; () banked
 18603  001610  6FF6               	movwf	_bit_count& (0+255),b
 18604                           
 18605                           ;Interrupt.c: 85: Nec_code = 0;
 18606  001612  0E00               	movlw	0
 18607  001614  0100               	movlb	0	; () banked
 18608  001616  6FDA               	movwf	_Nec_code& (0+255),b
 18609  001618  0E00               	movlw	0
 18610  00161A  6FDB               	movwf	(_Nec_code+1)& (0+255),b
 18611  00161C  0E00               	movlw	0
 18612  00161E  6FDC               	movwf	(_Nec_code+2)& (0+255),b
 18613  001620  0E00               	movlw	0
 18614  001622  6FDD               	movwf	(_Nec_code+3)& (0+255),b
 18615                           
 18616                           ;Interrupt.c: 86: Nec_state = 1;
 18617  001624  0E01               	movlw	1
 18618  001626  0100               	movlb	0	; () banked
 18619  001628  6FF4               	movwf	_Nec_state& (0+255),b
 18620  00162A  D07C               	goto	i2l7260
 18621                           
 18622                           ; BSR set to: 0
 18623                           ;Interrupt.c: 88: return;
 18624                           
 18625                           ; BSR set to: 0
 18626                           ;Interrupt.c: 87: INTCON2bits.INTEDG0 = 1;
 18627  00162C  D08F               	goto	i2l828
 18628  00162E                     i2l7206:
 18629                           
 18630                           ; BSR set to: 0
 18631                           ;Interrupt.c: 92: {
 18632                           ;Interrupt.c: 93: if (Time_Elapsed <=9500 && Time_Elapsed >=8500)
 18633  00162E  0E1D               	movlw	29
 18634  001630  5C4E               	subwf	_Time_Elapsed,w,c
 18635  001632  0E25               	movlw	37
 18636  001634  584F               	subwfb	_Time_Elapsed+1,w,c
 18637  001636  B0D8               	btfsc	status,0,c
 18638  001638  D00A               	goto	i2l7212
 18639                           
 18640                           ; BSR set to: 0
 18641  00163A  0E34               	movlw	52
 18642  00163C  5C4E               	subwf	_Time_Elapsed,w,c
 18643  00163E  0E21               	movlw	33
 18644  001640  584F               	subwfb	_Time_Elapsed+1,w,c
 18645  001642  A0D8               	btfss	status,0,c
 18646  001644  D004               	goto	i2l7212
 18647                           
 18648                           ; BSR set to: 0
 18649                           ;Interrupt.c: 94: {
 18650                           ;Interrupt.c: 95: Nec_state = 2;
 18651  001646  0E02               	movlw	2
 18652  001648  0100               	movlb	0	; () banked
 18653  00164A  6FF4               	movwf	_Nec_state& (0+255),b
 18654                           
 18655                           ;Interrupt.c: 96: }
 18656  00164C  D02B               	goto	i2l7238
 18657  00164E                     i2l7212:
 18658                           
 18659                           ; BSR set to: 0
 18660                           ;Interrupt.c: 97: else
 18661                           ;Interrupt.c: 98: {
 18662                           ;Interrupt.c: 99: force_nec_state0();
 18663  00164E  EC00  F01E         	call	_force_nec_state0	;wreg free
 18664  001652  D028               	goto	i2l7238
 18665  001654  D027               	goto	i2l7238
 18666                           
 18667                           ;Interrupt.c: 102: return;
 18668                           
 18669                           ;Interrupt.c: 100: }
 18670                           ;Interrupt.c: 101: INTCON2bits.INTEDG0 = 0;
 18671  001656  D07A               	goto	i2l828
 18672  001658                     i2l7218:
 18673                           
 18674                           ;Interrupt.c: 106: {
 18675                           ;Interrupt.c: 107: if (Time_Elapsed <=5000 && Time_Elapsed >=4000)
 18676  001658  0E89               	movlw	137
 18677  00165A  5C4E               	subwf	_Time_Elapsed,w,c
 18678  00165C  0E13               	movlw	19
 18679  00165E  584F               	subwfb	_Time_Elapsed+1,w,c
 18680  001660  B0D8               	btfsc	status,0,c
 18681  001662  D00A               	goto	i2l7224
 18682  001664  0EA0               	movlw	160
 18683  001666  5C4E               	subwf	_Time_Elapsed,w,c
 18684  001668  0E0F               	movlw	15
 18685  00166A  584F               	subwfb	_Time_Elapsed+1,w,c
 18686  00166C  A0D8               	btfss	status,0,c
 18687  00166E  D004               	goto	i2l7224
 18688  001670                     
 18689                           ;Interrupt.c: 108: {
 18690                           ;Interrupt.c: 109: Nec_state = 3;
 18691  001670  0E03               	movlw	3
 18692  001672  0100               	movlb	0	; () banked
 18693  001674  6FF4               	movwf	_Nec_state& (0+255),b
 18694                           
 18695                           ;Interrupt.c: 111: }
 18696  001676  D056               	goto	i2l7260
 18697  001678                     i2l7224:
 18698                           
 18699                           ;Interrupt.c: 112: else
 18700                           ;Interrupt.c: 113: {
 18701                           ;Interrupt.c: 114: force_nec_state0();
 18702  001678  EC00  F01E         	call	_force_nec_state0	;wreg free
 18703  00167C  D053               	goto	i2l7260
 18704  00167E  D052               	goto	i2l7260
 18705                           
 18706                           ;Interrupt.c: 117: return;
 18707                           
 18708                           ;Interrupt.c: 115: }
 18709                           ;Interrupt.c: 116: INTCON2bits.INTEDG0 = 1;
 18710  001680  D065               	goto	i2l828
 18711  001682                     i2l7230:
 18712                           
 18713                           ;Interrupt.c: 121: {
 18714                           ;Interrupt.c: 122: if (Time_Elapsed <=700 && Time_Elapsed >=400)
 18715  001682  0EBD               	movlw	189
 18716  001684  5C4E               	subwf	_Time_Elapsed,w,c
 18717  001686  0E02               	movlw	2
 18718  001688  584F               	subwfb	_Time_Elapsed+1,w,c
 18719  00168A  B0D8               	btfsc	status,0,c
 18720  00168C  D008               	goto	i2l7236
 18721  00168E  0E90               	movlw	144
 18722  001690  5C4E               	subwf	_Time_Elapsed,w,c
 18723  001692  0E01               	movlw	1
 18724  001694  584F               	subwfb	_Time_Elapsed+1,w,c
 18725  001696  A0D8               	btfss	status,0,c
 18726  001698  D002               	goto	i2l7236
 18727                           
 18728                           ;Interrupt.c: 123: {
 18729                           ;Interrupt.c: 124: Nec_state = 4;
 18730  00169A  0E04               	movlw	4
 18731  00169C  D7D5               	goto	L14
 18732  00169E                     i2l7236:
 18733                           
 18734                           ;Interrupt.c: 126: else
 18735                           ;Interrupt.c: 127: {
 18736                           ;Interrupt.c: 128: force_nec_state0();
 18737  00169E  EC00  F01E         	call	_force_nec_state0	;wreg free
 18738  0016A2  D000               	goto	i2l7238
 18739  0016A4                     i2l7238:
 18740                           
 18741                           ;Interrupt.c: 129: }
 18742                           ;Interrupt.c: 130: INTCON2bits.INTEDG0 = 0;
 18743  0016A4  9CF1               	bcf	intcon2,6,c	;volatile
 18744                           
 18745                           ;Interrupt.c: 131: return;
 18746  0016A6  D052               	goto	i2l828
 18747  0016A8                     i2l7242:
 18748                           
 18749                           ;Interrupt.c: 135: {
 18750                           ;Interrupt.c: 136: if (Time_Elapsed <=1800 && Time_Elapsed >=400)
 18751  0016A8  0E09               	movlw	9
 18752  0016AA  5C4E               	subwf	_Time_Elapsed,w,c
 18753  0016AC  0E07               	movlw	7
 18754  0016AE  584F               	subwfb	_Time_Elapsed+1,w,c
 18755  0016B0  B0D8               	btfsc	status,0,c
 18756  0016B2  D035               	goto	i2l7258
 18757  0016B4  0E90               	movlw	144
 18758  0016B6  5C4E               	subwf	_Time_Elapsed,w,c
 18759  0016B8  0E01               	movlw	1
 18760  0016BA  584F               	subwfb	_Time_Elapsed+1,w,c
 18761  0016BC  A0D8               	btfss	status,0,c
 18762  0016BE  D02F               	goto	i2l7258
 18763                           
 18764                           ;Interrupt.c: 137: {
 18765                           ;Interrupt.c: 138: Nec_code = Nec_code << 1;
 18766  0016C0  90D8               	bcf	status,0,c
 18767  0016C2  0100               	movlb	0	; () banked
 18768  0016C4  35DA               	rlcf	_Nec_code& (0+255),w,b
 18769  0016C6  0100               	movlb	0	; () banked
 18770  0016C8  6FDA               	movwf	_Nec_code& (0+255),b
 18771  0016CA  0100               	movlb	0	; () banked
 18772  0016CC  35DB               	rlcf	(_Nec_code+1)& (0+255),w,b
 18773  0016CE  0100               	movlb	0	; () banked
 18774  0016D0  6FDB               	movwf	(_Nec_code+1)& (0+255),b
 18775  0016D2  0100               	movlb	0	; () banked
 18776  0016D4  35DC               	rlcf	(_Nec_code+2)& (0+255),w,b
 18777  0016D6  0100               	movlb	0	; () banked
 18778  0016D8  6FDC               	movwf	(_Nec_code+2)& (0+255),b
 18779  0016DA  0100               	movlb	0	; () banked
 18780  0016DC  35DD               	rlcf	(_Nec_code+3)& (0+255),w,b
 18781  0016DE  0100               	movlb	0	; () banked
 18782  0016E0  6FDD               	movwf	(_Nec_code+3)& (0+255),b
 18783                           
 18784                           ;Interrupt.c: 140: if (Time_Elapsed > 1000)
 18785  0016E2  0EE9               	movlw	233
 18786  0016E4  5C4E               	subwf	_Time_Elapsed,w,c
 18787  0016E6  0E03               	movlw	3
 18788  0016E8  584F               	subwfb	_Time_Elapsed+1,w,c
 18789  0016EA  A0D8               	btfss	status,0,c
 18790  0016EC  D008               	goto	i2l7250
 18791                           
 18792                           ; BSR set to: 0
 18793                           ;Interrupt.c: 142: {
 18794                           ;Interrupt.c: 143: Nec_code += 1;
 18795  0016EE  0E01               	movlw	1
 18796  0016F0  0100               	movlb	0	; () banked
 18797  0016F2  27DA               	addwf	_Nec_code& (0+255),f,b
 18798  0016F4  0E00               	movlw	0
 18799  0016F6  23DB               	addwfc	(_Nec_code+1)& (0+255),f,b
 18800  0016F8  23DC               	addwfc	(_Nec_code+2)& (0+255),f,b
 18801  0016FA  23DD               	addwfc	(_Nec_code+3)& (0+255),f,b
 18802  0016FC  D000               	goto	i2l7250
 18803  0016FE                     i2l7250:
 18804                           
 18805                           ; BSR set to: 0
 18806                           ;Interrupt.c: 144: }
 18807                           ;Interrupt.c: 145: bit_count++;
 18808  0016FE  0100               	movlb	0	; () banked
 18809  001700  2BF6               	incf	_bit_count& (0+255),f,b
 18810                           
 18811                           ; BSR set to: 0
 18812                           ;Interrupt.c: 146: if (bit_count > 31)
 18813  001702  0E1F               	movlw	31
 18814  001704  0100               	movlb	0	; () banked
 18815  001706  65F6               	cpfsgt	_bit_count& (0+255),b
 18816  001708  D7B3               	goto	L15
 18817                           
 18818                           ; BSR set to: 0
 18819                           ;Interrupt.c: 147: {
 18820                           ;Interrupt.c: 148: nec_ok = 1;
 18821  00170A  0E00               	movlw	0
 18822  00170C  0100               	movlb	0	; () banked
 18823  00170E  6FEC               	movwf	(_nec_ok+1)& (0+255),b
 18824  001710  0E01               	movlw	1
 18825  001712  6FEB               	movwf	_nec_ok& (0+255),b
 18826                           
 18827                           ; BSR set to: 0
 18828                           ;Interrupt.c: 149: INTCONbits.INT0IE = 0;
 18829  001714  98F2               	bcf	intcon,4,c	;volatile
 18830                           
 18831                           ;Interrupt.c: 150: Nec_state = 0;
 18832  001716  0E00               	movlw	0
 18833  001718  0100               	movlb	0	; () banked
 18834  00171A  6FF4               	movwf	_Nec_state& (0+255),b
 18835  00171C  D7A9               	goto	L15
 18836  00171E                     i2l7258:
 18837                           
 18838                           ;Interrupt.c: 155: else
 18839                           ;Interrupt.c: 156: {
 18840                           ;Interrupt.c: 157: force_nec_state0();
 18841  00171E  EC00  F01E         	call	_force_nec_state0	;wreg free
 18842  001722  D000               	goto	i2l7260
 18843  001724                     i2l7260:
 18844                           
 18845                           ;Interrupt.c: 158: }
 18846                           ;Interrupt.c: 159: INTCON2bits.INTEDG0 = 1;
 18847  001724  8CF1               	bsf	intcon2,6,c	;volatile
 18848                           
 18849                           ;Interrupt.c: 161: }
 18850                           ;Interrupt.c: 162: }
 18851                           
 18852                           ;Interrupt.c: 160: return;
 18853  001726  D012               	goto	i2l828
 18854  001728                     i2l7266:
 18855  001728  0100               	movlb	0	; () banked
 18856  00172A  51F4               	movf	_Nec_state& (0+255),w,b
 18857                           
 18858                           ; Switch size 1, requested type "space"
 18859                           ; Number of cases is 5, Range of values is 0 to 4
 18860                           ; switch strategies available:
 18861                           ; Name         Instructions Cycles
 18862                           ; simple_byte           16     9 (average)
 18863                           ;	Chosen strategy is simple_byte
 18864  00172C  0A00               	xorlw	0	; case 0
 18865  00172E  B4D8               	btfsc	status,2,c
 18866  001730  D765               	goto	i2l7196
 18867  001732  0A01               	xorlw	1	; case 1
 18868  001734  B4D8               	btfsc	status,2,c
 18869  001736  D77B               	goto	i2l7206
 18870  001738  0A03               	xorlw	3	; case 2
 18871  00173A  B4D8               	btfsc	status,2,c
 18872  00173C  D78D               	goto	i2l7218
 18873  00173E  0A01               	xorlw	1	; case 3
 18874  001740  B4D8               	btfsc	status,2,c
 18875  001742  D79F               	goto	i2l7230
 18876  001744  0A07               	xorlw	7	; case 4
 18877  001746  B4D8               	btfsc	status,2,c
 18878  001748  D7AF               	goto	i2l7242
 18879  00174A  D000               	goto	i2l828
 18880  00174C                     i2l828:
 18881  00174C  0012               	return		;funcret
 18882  00174E                     __end_of_INT0_isr:
 18883                           	opt stack 0
 18884                           pclatu	equ	0xFFB
 18885                           pclath	equ	0xFFA
 18886                           tblptru	equ	0xFF8
 18887                           tblptrh	equ	0xFF7
 18888                           tblptrl	equ	0xFF6
 18889                           tablat	equ	0xFF5
 18890                           prodh	equ	0xFF4
 18891                           prodl	equ	0xFF3
 18892                           intcon	equ	0xFF2
 18893                           intcon2	equ	0xFF1
 18894                           intcon3	equ	0xFF0
 18895                           postinc0	equ	0xFEE
 18896                           fsr0h	equ	0xFEA
 18897                           fsr0l	equ	0xFE9
 18898                           wreg	equ	0xFE8
 18899                           postdec1	equ	0xFE5
 18900                           fsr1h	equ	0xFE2
 18901                           fsr1l	equ	0xFE1
 18902                           indf2	equ	0xFDF
 18903                           postinc2	equ	0xFDE
 18904                           postdec2	equ	0xFDD
 18905                           fsr2h	equ	0xFDA
 18906                           fsr2l	equ	0xFD9
 18907                           status	equ	0xFD8
 18908                           
 18909 ;; *************** function _force_nec_state0 *****************
 18910 ;; Defined at:
 18911 ;;		line 56 in file "C:/Users/Michael Luna/Desktop/ECE 3301 Files/ECE3301L_Spring22_Final_Lab_Sample/Interrupt.c"
 18912 ;; Parameters:    Size  Location     Type
 18913 ;;		None
 18914 ;; Auto vars:     Size  Location     Type
 18915 ;;		None
 18916 ;; Return value:  Size  Location     Type
 18917 ;;		None               void
 18918 ;; Registers used:
 18919 ;;		wreg, status,2
 18920 ;; Tracked objects:
 18921 ;;		On entry : 0/0
 18922 ;;		On exit  : 0/0
 18923 ;;		Unchanged: 0/0
 18924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18929 ;;Total ram usage:        0 bytes
 18930 ;; Hardware stack levels used:    1
 18931 ;; This function calls:
 18932 ;;		Nothing
 18933 ;; This function is called by:
 18934 ;;		_INT0_isr
 18935 ;; This function uses a non-reentrant model
 18936 ;;
 18937                           
 18938                           	psect	text116
 18939  003C00                     __ptext116:
 18940                           	opt stack 0
 18941  003C00                     _force_nec_state0:
 18942                           	opt stack 18
 18943                           
 18944                           ;Interrupt.c: 58: Nec_state=0;
 18945                           
 18946                           ;incstack = 0
 18947  003C00  0E00               	movlw	0
 18948  003C02  0100               	movlb	0	; () banked
 18949  003C04  6FF4               	movwf	_Nec_state& (0+255),b
 18950                           
 18951                           ; BSR set to: 0
 18952                           ;Interrupt.c: 59: T1CONbits.TMR1ON = 0;
 18953  003C06  90CD               	bcf	4045,0,c	;volatile
 18954                           
 18955                           ; BSR set to: 0
 18956  003C08  0012               	return		;funcret
 18957  003C0A                     __end_of_force_nec_state0:
 18958                           	opt stack 0
 18959                           pclatu	equ	0xFFB
 18960                           pclath	equ	0xFFA
 18961                           tblptru	equ	0xFF8
 18962                           tblptrh	equ	0xFF7
 18963                           tblptrl	equ	0xFF6
 18964                           tablat	equ	0xFF5
 18965                           prodh	equ	0xFF4
 18966                           prodl	equ	0xFF3
 18967                           intcon	equ	0xFF2
 18968                           intcon2	equ	0xFF1
 18969                           intcon3	equ	0xFF0
 18970                           postinc0	equ	0xFEE
 18971                           fsr0h	equ	0xFEA
 18972                           fsr0l	equ	0xFE9
 18973                           wreg	equ	0xFE8
 18974                           postdec1	equ	0xFE5
 18975                           fsr1h	equ	0xFE2
 18976                           fsr1l	equ	0xFE1
 18977                           indf2	equ	0xFDF
 18978                           postinc2	equ	0xFDE
 18979                           postdec2	equ	0xFDD
 18980                           fsr2h	equ	0xFDA
 18981                           fsr2l	equ	0xFD9
 18982                           status	equ	0xFD8
 18983                           pclatu	equ	0xFFB
 18984                           pclath	equ	0xFFA
 18985                           tblptru	equ	0xFF8
 18986                           tblptrh	equ	0xFF7
 18987                           tblptrl	equ	0xFF6
 18988                           tablat	equ	0xFF5
 18989                           prodh	equ	0xFF4
 18990                           prodl	equ	0xFF3
 18991                           intcon	equ	0xFF2
 18992                           intcon2	equ	0xFF1
 18993                           intcon3	equ	0xFF0
 18994                           postinc0	equ	0xFEE
 18995                           fsr0h	equ	0xFEA
 18996                           fsr0l	equ	0xFE9
 18997                           wreg	equ	0xFE8
 18998                           postdec1	equ	0xFE5
 18999                           fsr1h	equ	0xFE2
 19000                           fsr1l	equ	0xFE1
 19001                           indf2	equ	0xFDF
 19002                           postinc2	equ	0xFDE
 19003                           postdec2	equ	0xFDD
 19004                           fsr2h	equ	0xFDA
 19005                           fsr2l	equ	0xFD9
 19006                           status	equ	0xFD8
 19007                           
 19008                           	psect	rparam
 19009  0000                     pclatu	equ	0xFFB
 19010                           pclath	equ	0xFFA
 19011                           tblptru	equ	0xFF8
 19012                           tblptrh	equ	0xFF7
 19013                           tblptrl	equ	0xFF6
 19014                           tablat	equ	0xFF5
 19015                           prodh	equ	0xFF4
 19016                           prodl	equ	0xFF3
 19017                           intcon	equ	0xFF2
 19018                           intcon2	equ	0xFF1
 19019                           intcon3	equ	0xFF0
 19020                           postinc0	equ	0xFEE
 19021                           fsr0h	equ	0xFEA
 19022                           fsr0l	equ	0xFE9
 19023                           wreg	equ	0xFE8
 19024                           postdec1	equ	0xFE5
 19025                           fsr1h	equ	0xFE2
 19026                           fsr1l	equ	0xFE1
 19027                           indf2	equ	0xFDF
 19028                           postinc2	equ	0xFDE
 19029                           postdec2	equ	0xFDD
 19030                           fsr2h	equ	0xFDA
 19031                           fsr2l	equ	0xFD9
 19032                           status	equ	0xFD8


Data Sizes:
    Strings     379
    Constant    493
    Data        152
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     73     110
    BANK0           128      5     128
    BANK1           256     13      74
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_38(CODE[5]), STR_37(CODE[5]), STR_36(CODE[12]), STR_35(CODE[19]), 
		 -> STR_34(CODE[16]), STR_33(CODE[10]), STR_32(CODE[11]), STR_31(CODE[19]), 
		 -> STR_29(CODE[5]), STR_28(CODE[8]), STR_27(CODE[8]), STR_26(CODE[18]), 
		 -> STR_25(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), STR_22(CODE[4]), 
		 -> STR_21(CODE[4]), STR_20(CODE[5]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[7]), STR_16(CODE[13]), STR_15(CODE[9]), STR_14(CODE[11]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[2]), STR_10(CODE[3]), 
		 -> STR_9(CODE[13]), STR_8(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_39(CODE[22]), STR_30(CODE[11]), STR_7(CODE[20]), STR_6(CODE[24]), 
		 -> STR_5(CODE[21]), STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[16]), 
		 -> STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _read_volt->___fttol
    ___awtoft->___ftpack
    _Update_Screen->___fttol
    _Update_Screen->_drawtext
    _Test_Alarm->_DS3231_Turn_Off_Alarm
    _Test_Alarm->_DS3231_Turn_On_Alarm
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Heater_Screen->_drawtext
    _Initialize_Setup_Heater_Screen->_drawtext
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Time_Screen->_drawtext
    _check_for_button_input->_printf
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Update_Setup_Alarm_Time_Screen->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___awmod->___fttol
    ___awdiv->___wmul
    _init_UART->_OpenUSART
    _Turn_Off_Fan->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_get_RPM
    _get_RPM->_do_update_pwm
    _Update_Screen->___awmod
    _Turn_On_Fan->_do_update_pwm
    _Monitor_Heater->_do_update_pwm
    _Update_Setup_Time_Screen->___awmod
    _dec_2_bcd->___awmod
    _Update_Setup_Alarm_Time_Screen->___awmod

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _get_RPM->_do_update_pwm
    _Update_Screen->___awmod
    _Turn_On_Fan->_do_update_pwm
    _Monitor_Heater->_do_update_pwm
    _Do_Save_New_Time->_DS3231_Write_Time
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->___awmod
    _Do_Save_New_Alarm_Time->_DS3231_Write_Alarm_Time
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _Update_Setup_Alarm_Time_Screen->___awmod

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1104951
                                             11 BANK1      2     2      0
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
               _Do_Setup_Heater_Temp
                      _Do_Setup_Time
                  _Initialize_Screen
                     _Monitor_Heater
                         _Test_Alarm
                      _Toggle_Heater
                      _Update_Screen
                            ___awdiv
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _read_volt                                            7     4      3    7109
                                              0 BANK0      3     0      3
                                              0 BANK1      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      34
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2331
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2   13735
                                              3 BANK0      2     0      2
                                              6 BANK1      2     2      0
                            ___awdiv
                             ___wmul
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        5     5      0   47600
                                              2 BANK1      5     5      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Heater                                        0     0      0   20585
                       _Turn_Off_Fan
                        _Turn_On_Fan
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0   12771
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Test_Alarm                                           4     4      0    9322
                                             31 COMRAM     4     4      0
                    _Activate_Buzzer
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                      _Set_RGB_Color
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     242
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _Set_RGB_Color                                        1     1      0     176
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_On_Alarm                                 5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_Off_Alarm                                5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _DS3231_Init                                          4     4      0    2380
                                             22 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Write_One_Byte                     3     1      2     876
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Read_One_Byte                      3     2      1     783
                                             19 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Monitor_Heater                                       0     0      0    9014
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                       5     1      4     150
                                             16 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _do_update_pwm                                        9     9      0    8864
                                              0 BANK0      3     3      0
                                              0 BANK1      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2099
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     696
                                             58 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3036
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2838
                                             43 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  311601
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   50423
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Heater_Temp                                 0     0      0  285260
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Increase_Time
     _Initialize_Setup_Heater_Screen
         _Update_Setup_Heater_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Heater_Screen                           3     3      0   36668
                                              0 BANK0      3     3      0
                            ___awdiv
                           _drawtext
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Heater_Screen                       0     0      0   39267
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   39729
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   53507
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   60662
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0    7155
                                              9 BANK1      2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   39729
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   39729
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  324182
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                               3     3      0    4040
                                             56 COMRAM     3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   50423
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0   43636
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0   11627
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0   11658
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   53507
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   61522
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   53077
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    4009
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2387
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4884
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2312
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2312
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2182
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2182
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0    7585
                                              9 BANK1      2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2    6954
                                              2 BANK1      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0       0
               _Activate_Buzzer_2KHz
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0       0
              _Activate_Buzzer_500Hz
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0   43636
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0   43636
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   32871
                                             56 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   18314
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5   11156
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3163
                                              0 BANK0      4     0      4
                                              0 BANK1      2     2      0
                            ___awdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    3695
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    4926
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                       _Turn_Off_Fan
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0    3907
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3907
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1142
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Turn_Off_Fan
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Heater_Temp
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Heater_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Heater_Screen
       ___awdiv
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Heater
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___wmul (ARG)
       ___lbtoft
         ___ftpack
     _get_duty_cycle
   _Test_Alarm
     _Activate_Buzzer
     _DS3231_Turn_Off_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Turn_On_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _Deactivate_Buzzer
     _Set_RGB_Color
     ___ftge
   _Toggle_Heater
     _Turn_Off_Fan
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___wmul (ARG)
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _check_for_button_input
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _INT1_isr
   _INT2_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      D      4A       7       28.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      5      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     49      6E       1       86.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      34        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue May 10 09:16:12 2022

                                 drawCircle@f 002A                                   drawCircle@r 0020  
                                 drawCircle@x 002C                                   drawCircle@y 002E  
                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                  drawCircle@x0 001C  
                                drawCircle@y0 001E                                            l30 37CA  
                                          l32 37CE                                            l40 3556  
                                          l27 37F8                                            l37 3948  
                __size_of_Do_Setup_Alarm_Time 00BE                                  ___awdiv@sign 001C  
                        __size_of_Turn_On_Fan 001C                                 read_volt@volt 013F  
                         ___wmul@multiplicand 0013                               ??_Update_Screen 013F  
                                         l251 3B9C                                           l298 18B2  
                                         l915 370E                                           l755 10C6  
                                         l766 127A                                           l972 362A  
                                         l969 359E                                           _PR2 000FCB  
                              read_volt@nStep 013D                          DS3231_Init@Address_7 0017  
                        DS3231_Init@Address_E 0018                                           _day 005D  
                           _Deactivate_Buzzer 3C0A                          __size_of_I2C_ReStart 0016  
                   __size_of_Do_Save_New_Time 0014                                           _dow 00F8  
                                         _nbr 00E9                                           _rpm 0050  
                       __size_of_Turn_Off_Fan 0016                                           _rps 00ED  
                                         _txt 0052                                  ___awmod@sign 013E  
                                         wreg 000FE8                                 _Increase_Time 2AE4  
                __size_of_Go_Next_Alarm_Field 0018                            ?_Deactivate_Buzzer 0001  
                 __end_of_Decrease_Alarm_Time 342E        Update_Setup_Screen_Cursor_Forward@xinc 0030  
      Update_Setup_Screen_Cursor_Forward@yinc 002F                               ??_fillRectangle 001D  
                                __CFG_LVP$OFF 000000                       _TFT_GreenTab_Initialize 3824  
                                ___ftdiv@cntr 0035                                  ___ftdiv@sign 003A  
                                __CFG_WDT$OFF 000000                                          l1006 3740  
                                        l1201 3AC0                                          l2003 34BC  
                              drawFastVLine@h 0019                                          l1142 2F86  
                                        l1151 389A                                          l2032 361A  
                                        l1304 2484                                          l1305 23F0  
                                        l1145 2EA0                                          l1251 2DA0  
                                        l1091 3062                                          l1315 133E  
                                        l1307 2460                                          l1308 2482  
                                        l1084 2D18                                          l1148 387A  
                                        l1245 37A2                                          l1191 338A  
                                        l1088 3822                                          l1434 0D26  
                                        l1267 1A08                                          l1276 195E  
                              drawFastVLine@x 0022                                          l1269 18E2  
                              drawFastVLine@y 0018                                          l1470 3874  
                                        l1462 2FCE                                          l1463 2FD0  
                                        l1464 2FDA                                          l1465 2FDC  
                                        l1458 2FB4                                          l1467 2FF6  
                                        l1901 3928                                          l1397 0ACE  
                                        l1663 2AE2                                          l1850 22C6  
                                        l1676 2914                                          l1853 2292  
                                        l1927 38C0                                          l1688 36D2  
                                        l1865 1E28                                          l5322 3920  
                                        l1778 26EA                                          l1859 2A4C  
                                        l1789 26C2                                          l1886 21E4  
                                        l1993 31E2                                          l5450 31B0  
                                        l6410 2F58                                          l6402 2F3E  
                                        l5460 31D6                                          l5452 31B8  
                                        l5470 3492                                          l6270 37E4  
                                        l6414 2F66                                          l6406 2F4C  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l5448 31A6  
                                        l5472 349A                                          l8200 2A8C  
                                        l8202 2A96                                          l8130 2464  
                                        l8114 2428                                          l6274 37F0  
                                        l6418 2F76                                          l5476 34B0  
                                        l5468 3488                                          l8220 2AD8  
                                        l8212 2ABC                                          l8204 2A9E  
                                        l8052 18DE                                          l8044 18C4  
                                        l8140 247E                                          l8108 23BA  
                                        l8302 0AFC                                          l8062 191E  
                                        l8054 18E6                                          l8134 246E  
                                        l8126 2456                                          l8320 0B50  
                                        l8312 0B26                                          l8216 2AC8  
                                        l8240 28A6                                          l8232 2880  
                                        l8064 1952                                          l8048 18D0  
                                        l8160 268A                                          l8152 2646  
                                        l6712 2A1C                                          l8330 0B84  
                                        l8322 0B54                                          l8306 0B16  
                                        l8242 28B4                                          l8082 19D4  
                                        l8074 1980                                          l8090 1A04  
                                        l8066 1956                                          l8058 18EE  
                                        l9050 2CCA                                          l8170 26CA  
                                        l8162 26AA                                          l8154 2652  
                                        l6394 2F22                                          l8316 0B4A  
                                        l8308 0B1A                                          l8244 28BE  
                                        l8252 28F4                                          l8236 2892  
                                        l8084 19FC                                          l8076 19A8  
                                        l9140 33EE                                          l9116 3A36  
                                        l9060 2CF6                                          l8164 26B6  
                                        l8156 2672                                          l8148 2636  
                                        l6708 29EA                                          l8350 0BE6  
                                        l8326 0B60                                          l8262 09D8  
                                        l5950 2FA4                                          l9142 33F2  
                                        l8502 1324                                          l9126 3A52  
                                        l9118 3A3A                                          l9070 2D0E  
                                        l9046 2CB6                                          l9230 3A22  
                                        l6398 2F2E                                          l6718 2A48  
                                        l8344 0BB8                                          l8336 0B8A  
                                        l8272 0A00                                          l8256 290A  
                                        l8248 28E4                                          l7800 2D2A  
                                        l8096 35E8                                          l9152 340E  
                                        l9136 33E2                                          l9056 2CEE  
                                        l9240 38E8                                          l8176 26DC  
                                        l8362 0C1E                                          l8338 0B9C  
                                        l8290 0AA0                                          l8274 0A16  
                                        l8266 09E8                                          l5954 2FAC  
                                        l5946 2F9A                                          l8194 2A76  
                                        l8098 35EE                                          l9146 33FE  
                                        l8530 1414                                          l9162 3394  
                                        l9074 2D14                                          l9250 3902  
                                        l8364 0C26                                          l8372 0C52  
                                        l8356 0BFE                                          l8348 0BDC  
                                        l8268 09F6                                          l8188 2A64  
                                        l7804 2D62                                          l9148 3402  
                                        l9156 3412                                          l8444 374C  
                                        l9244 38F4                                          l9260 2AF6  
                                        l9324 3A06                                          l8604 22A0  
                                        l8620 1D78                                          l8374 0C5A  
                                        l8382 0CE4                                          l8358 0C06  
                                        l8286 0A98                                          l8278 0A34  
                                        l5966 2FC6                                          l5958 2FB8  
                                        l7814 2D88                                          l7830 34EC  
                                        l9158 3428                                          l8446 3756  
                                        l9174 33B4                                          l9182 33C4  
                                        l9254 2AE6                                          l9326 3A0A  
                                        l8614 1D50                                          l9502 188C  
                                        l8376 0C9E                                          l8384 0CF6  
                                        l8368 0C3E                                          l7816 2D96  
                                        l8480 2396                                          l8472 2352  
                                        l8456 22F0                                          l9168 33A4  
                                        l9184 33DA                                          l9248 38F8  
                                        l9272 2B16                                          l8616 1D6A  
                                        l9360 3942                                          l9344 36AE  
                                        l7914 3562                                          l8386 0CFE  
                                        l7826 34D0                                          l8482 239C  
                                        l8810 0F76                                          l9266 2B06  
                                        l8570 221E                                          l8642 1DD4  
                                        l8634 1DAC                                          l9442 175E  
                                        l7924 3578                                          l7932 3588  
                                        l8388 0D0A                                          l8468 2338  
                                        l8820 1024                                          l8812 0FAC  
                                        l9284 2B36                                          l9292 2B46  
                                        l9700 261C                                          l8652 1E02  
                                        l8644 1DDA                                          l8716 2528  
                                        l9460 17C0                                          l9540 0158  
                                        l9524 00A8                                          l7926 3580  
                                        l7918 356A                                          l7862 3784  
                                        l8822 105E                                          l8806 0F1A  
                                        l9278 2B26                                          l9294 2B6E  
                                        l8574 222C                                          l8638 1DBE  
                                        l8662 211E                                          l9462 17CC  
                                        l9454 179E                                          l9534 0114  
                                        l9518 0064                                          l7936 3594  
                                        l8816 0FE8                                          l8832 10D4  
                                        l9800 2C84                                          l8568 2204  
                                        l8648 1DEC                                          l8680 2178  
                                        l9448 177E                                          l7938 359A  
                                        l8842 119C                                          l8834 110A  
                                        l9722 2728                                          l9802 2C8A  
                                        l8594 226C                                          l8690 21A2  
                                        l9474 17FC                                          l7884 3634  
                                        l8828 109E                                          l8844 11D6  
                                        l8692 21B0                                          l8684 2188  
                                        l9484 1842                                          l9580 023A  
                                        l7886 363A                                          l7878 3622  
                                        l8838 1146                                          l8854 1252  
                                        l9750 2788                                          l9742 276C  
                                        l9734 2750                                          l8686 218E  
                                        l8694 21BA                                          l9590 02A4  
                                        l9910 0EB2                                          l9902 0E9E  
                                        l7896 364C                                          l8848 1216  
                                        l9680 25DA                                          l9664 25A4  
                                        l9592 02BA                                          l9754 2796  
                                        l9746 277A                                          l9738 275E  
                                        l8698 21D2                                          l9498 1886  
                                        l9578 0224                                          l9914 0EBC  
                                        l9906 0EA8                                          l9922 0ECC  
                                        l9756 279A                                          l9692 2604  
                                        l9684 25E8                                          l9676 25CC  
                                        l9596 02C2                                          l9924 0EEA  
                                        l9758 27A0                                          l9790 2C64  
                                        l9782 2C48                                          l9598 02CA  
                                        l9918 0EC6                                          STR_1 FF40  
                                        l9768 2C16                                          l9696 2612  
                                        l9688 25F6                                          l9928 0EFA  
                                        STR_2 FF50                                          STR_3 FF60  
                                        l9794 2C72                                          l9786 2C56  
                                        l9698 2616                                          l9882 0DB6  
                                        STR_4 FE84                                          STR_5 FED0  
                                        l9868 0D3E                                          STR_6 FEA2  
                                        STR_7 FEF9                                          l9798 2C80  
                                        STR_8 FEE5                                          STR_9 FF6F  
                                        l9898 0E88                                          u6111 1D42  
                                        u5410 19B6                                          u6131 1D60  
                                        u5180 2D58                                          u6061 21F6  
                                        u6081 2214                                          u6171 2110  
                                        u7060 0E4A                                          u6190 213C  
                                        u5480 23E8                                          u5490 241E  
                                        u6610 187A                                          u6195 2134  
                                        u7068 0E4E                  __end_of_Activate_Buzzer_2KHz 3B10  
                                        u7257 3BC6                                          _RBPU 007F8F  
                                        u5990 231C                                          _TRMT 007D61  
                    ??_Do_Save_New_Alarm_Time 004A                         _setup_heater_set_temp 00FA  
                                _DS1621_tempC 004A                                  _DS1621_tempF 004C  
                       _setup_heater_set_text 00BF                           ??_Deactivate_Buzzer 0011  
                                        _date 008B                                          _main 0D28  
                                        _font FC97       Update_Setup_Screen_Cursor_Backward@xinc 0030  
                                ___ftpack@arg 0011       Update_Setup_Screen_Cursor_Backward@yinc 002F  
                                        _hour 0060                                  ___ftpack@exp 0014  
                            __end_of_I2C_Init 3BD8                              __end_of_I2C_Read 35A0  
                                        _time 0134                                          _year 006D  
                                        fsr0h 000FEA                                          fsr1h 000FE2  
                              ??_get_full_ADC 0013                                          fsr0l 000FE9  
                                        fsr2h 000FDA                                          fsr1l 000FE1  
                                        indf2 000FDF                                          fsr2l 000FD9  
                                        _wrap 0081                                          _volt 00DE  
                            __end_of_I2C_Stop 3B34                        ?_DS3231_Turn_Off_Alarm 0001  
                                        pclat 000FFA                            __size_of_LCD_Reset 0012  
                                        prodh 000FF4                                          prodl 000FF3  
                                        start 0018                   __size_of_I2C_Write_Cmd_Only 001A  
                              _Monitor_Heater 37A4                               __end_of_Do_Init 3190  
                                 _Do_Beep_Bad 3C28                               ??_drawFastVLine 001C  
                                ___ftmul@cntr 002A                               __end_of_i2cNack 3BE2  
                                ___param_bank 000010                                  ___ftmul@sign 002B  
     Update_Setup_Screen_Cursor_Forward@field 002E                                  ___fttol@exp1 0049  
                   ??_DS3231_Write_Alarm_Time 004A                         __size_of_Do_Beep_Good 0006  
                                _Turn_Off_Fan 3A72                                  ___fttol@lval 0045  
                                 ?_TIMER1_isr 0001                              __end_of_INT0_isr 174E  
                            __end_of_INT1_isr 3C00                              __end_of_INT2_isr 3BF6  
              __size_of_Activate_Buzzer_500Hz 0012                     __end_of_Deactivate_Buzzer 3C12  
                             ??_do_update_pwm 00FB                               drawFastVLine@hi 0020  
                             drawFastVLine@lo 0021                 __end_of_Activate_Buzzer_500Hz 3B22  
                                       ?_main 0001                               __end_of___awdiv 2AE4  
                             drawCircle@ddF_x 0026                                         STR_10 FFF6  
                             drawCircle@ddF_y 0028                                         STR_11 FFF0  
                                       STR_12 FFB1                                         STR_20 FFE5  
                                       STR_21 FFF2                                         STR_13 FFE0  
                                       STR_22 FFEA                                         STR_14 FFAB  
                                       STR_30 FFA0                                         STR_31 FEE6  
                                       STR_23 FFEE                                         STR_15 FFC0  
                                       STR_24 FFEA                                         STR_32 FF95  
                                       STR_16 FF7C                                         STR_40 FF1F  
                                       STR_25 FFEE                                         STR_17 FFD9  
                                       STR_33 FFB6                                         STR_18 FFF9  
                                       STR_34 FF30                                         STR_26 FF0D  
                                       STR_35 FEE6                                         STR_19 FFFC  
                                       STR_27 FFC9                                         STR_28 FFD1  
                                       STR_36 FF89                               __end_of___awmod 2916  
                                       STR_37 FFB1                                         STR_29 FFB1  
                                       STR_38 FFE0                                         STR_39 FEBA  
                             __end_of___ftdiv 22C8                               __end_of___ftmul 1E2A  
                                       _T0CON 000FD5                               ___awdiv@divisor 0019  
                                       _T1CON 000FCD                               __end_of___fttol 21E6  
                                       _T2CON 000FCA                                         _T3CON 000FB1  
               __size_of_Do_Setup_Heater_Temp 008E                               __end_of___lwdiv 31EC  
                             __end_of___lwmod 34C6                                         i2l816 2BCA  
                                       i2l828 174C                               ___awdiv@counter 001B  
                             drawCircle@color 0022                                         _RCSTA 000FAB  
                                       _TMR0H 000FD7                                         _TMR1H 000FCF  
                                       _TMR0L 000FD6                                         _TMR1L 000FCE  
                                       _TMR3L 000FB2                                         _SPBRG 000FAF  
                                       _PORTE 000F84                                ?_Increase_Time 0001  
                                       _TRISA 000F92                                         _TRISB 000F93  
                                       _TRISC 000F94                                         _TRISD 000F95  
                                       _TRISE 000F96                                         _TXREG 000FAD  
                                       _TXSTA 000FAC                               __end_of_get_RPM 3558  
                                       _Rcmd1 1A0A                                         _Rcmd3 1F1C  
    Update_Setup_Screen_Cursor_Backward@field 002E                                    _i2cHighSda 3C1A  
                                  _i2cHighScl 3BC2                                  bcd_2_dec@bcd 0015  
                                bcd_2_dec@dec 0013                                 ___awtoft@sign 001C  
                             __end_of_dpowers FE7C                                         _color 00E7  
                                       _font2 FD96                                         _found 005F  
                             __end_of_isdigit 392A                                         _tempC 00D0  
                                       _tempF 00D4                                         _month 0062  
                               ___ftpack@sign 0015                                         _putch 3B98  
                           __end_of_I2C_Start 3B46                             __end_of_I2C_Write 365A  
                              __CFG_BOREN$OFF 000000                                         tablat 000FF5  
                      __end_of_Monitor_Heater 37D0                                         status 000FD8  
                           ?_DS1621_Read_Temp 0014                                  _Do_Beep_Good 3C22  
             __size_of_check_for_button_input 0088                         __end_of_Go_Next_Field 3A2A  
                             write_data@data_ 0013                            ??_DS1621_Read_Temp 0016  
                          Set_RGB_Color@color 0011                               __initialization 2EA2  
                                __end_of_main 0F0E                                  __end_of_font FD96  
                            __end_of_Init_ADC 3BB4                              __end_of_Rcmd2red 35DE  
                          _Select_Alarm_Field 0056                                        ??_main 0148  
                               ___fttol@sign1 0044                                 __activetblptr 000002  
                           ?_DS3231_Read_Time 0001                             __end_of_LCD_Reset 3AFE  
     I2C_Write_Address_Write_One_Byte@Address 0013                         __end_of_Go_Prev_Field 3A12  
                   ??_TFT_GreenTab_Initialize 001D                   ?_Update_Setup_Heater_Screen 0001  
                  ??_Update_Setup_Time_Screen 004A                                _Init_Interrupt 38C2  
                          ??_DS3231_Read_Time 0014                                        ?_Rcmd1 0001  
                                      ?_Rcmd3 0001                                     I2C_Init@c 0011  
                         _In_Alarm_Time_Setup 00F1                                     I2C_Read@n 0012  
                 DS3231_Turn_Off_Alarm@Device 001F                                        _ADCON0 000FC2  
                                      _ADCON1 000FC1                                        _ADCON2 000FC0  
                         DS1621_Read_Temp@Cmd 0016                                        _ADRESH 000FC4  
                                      _ADRESL 000FC3                                        _CCPR1L 000FBE  
                                      _CCPR2L 000FBB                              ___awdiv@dividend 0017  
                          __size_of_i2cLowSda 000A                            __size_of_i2cLowScl 0008  
                            __end_of___awtoft 36D4                                        _HEATER 0054  
                                      ?_putch 0001                              __end_of___ftpack 26EC  
                            __end_of___lbtoft 38C2                                        _DC_Txt 00C8  
                                   ??_Do_Init 0039                                        i2l7212 164E  
                                      i2l7230 1682                                        i2l7206 162E  
                                      i2l7224 1678                                        i2l7250 16FE  
                                      i2l7242 16A8                                        i2l7218 1658  
                                      i2l7260 1724                                        i2l7236 169E  
                                      i2l7238 16A4                                        i2l7258 171E  
                                      i2l7266 1728                                        i2l7442 2BB6  
                                      i2l7196 15FC                                        i2l7446 2BC0  
                                      i2l7438 2BAC                                        _OSCCON 000FD3  
             __size_of_Do_Save_New_Alarm_Time 0018                           __size_of_TIMER1_isr 000E  
                                      _SPBRGH 000FB0                               ?_Monitor_Heater 0001  
                                      _SSPBUF 000FC9                                     ??_i2cNack 0011  
                                _Alarm_SW_Txt 00C4                              _force_nec_state0 3C00  
                            __end_of_delay_ms 3392                                        _i2cAck 3B46  
            ??_Initialize_Setup_Heater_Screen 004A               ?_Initialize_Setup_Heater_Screen 0001  
                __size_of_Go_Prev_Alarm_Field 0018                              __end_of_fillRect 3510  
                            __end_of_drawChar 1A0A                            __size_of_OpenUSART 0070  
                                      ___ftge 29B8                   __end_of_Increase_Alarm_Time 33E0  
                        DS3231_Init@control_E 0019                      __size_of_Activate_Buzzer 0012  
                                      ___wmul 384E                                     ??___awdiv 001B  
                            __end_of_drawtext 23AA                                     ??___awmod 004A  
                                   ??___ftdiv 0032                                    _Test_Alarm 174E  
                                   ??___ftmul 0023                                     ??___fttol 003F  
                                      _chkisr 0008                                     ??___lwdiv 0015  
                                      _array1 011F                                     ??___lwmod 001C  
                                      _buffer 0100                __size_of_Exit_Setup_Alarm_Time 0010  
                                      _nec_ok 00EB                 __end_of_Exit_Setup_Alarm_Time 3B78  
                                      clear_0 2EA8                                        clear_1 2EB4  
                            ___awdiv@quotient 001D                                        _minute 0061  
                                      _second 0063                               ___awmod@divisor 00FD  
                        _Activate_Buzzer_2KHz 3AFE                                     ??_get_RPM 004A  
                  __size_of_Deactivate_Buzzer 0008                               ___awmod@counter 013D  
                                      _printf 09CE                                  drawtext@size 0040  
                             ??_Increase_Time 004A                                        _strcpy 3742  
                                      _strlen 35DE                         ___ftmul@f3_as_product 0027  
                      __end_of_Init_Interrupt 38E6                          __end_of_get_full_ADC 389C  
                      _check_for_button_input 2C92                              _Do_Save_New_Time 3A9E  
                                __pdataCOMRAM 006E                                     ??_isdigit 0011  
                                   ?_I2C_Init 0011                                     ?_I2C_Read 0001  
                      get_duty_cycle@set_temp 0013                                     ?_I2C_Stop 0001  
                                __mediumconst FC96                                        tblptrh 000FF7  
                                      tblptrl 000FF6                                        tblptru 000FF8  
            __end_of_I2C_Write_Cmd_Write_Data 398A                                   ?_i2cHighSda 0001  
                                 ?_i2cHighScl 0001                                        putch@c 0011  
                      __size_of_Set_RGB_Color 0072                              __end_of_spiwrite 3AC6  
                    __size_of_Exit_Time_Setup 0010                            __size_of_bcd_2_dec 002A  
                         _Do_Setup_Alarm_Time 26EC                                    __accesstop 0080  
                     __end_of__initialization 2F0C                              ??_get_duty_cycle 0015  
       I2C_Write_Address_Read_One_Byte@Device 0016                            __size_of_dec_2_bcd 006C  
                                  ___ftge@ff1 0011                                    ___ftge@ff2 0014  
                                   ?_INT0_isr 0001                                     ?_INT1_isr 0001  
                                   ?_INT2_isr 0001                            _setup_alarm_minute 0065  
                          _setup_alarm_second 0066                                 ___rparam_used 000001  
                                  ___ftdiv@f1 002C                                    ___ftdiv@f2 002F  
                                  ___ftdiv@f3 0036                                    ___awtoft@c 0019  
                                  ___lbtoft@c 001C                           _Go_Next_Alarm_Field 3A42  
                                  ___ftmul@f1 001D                                    ___ftmul@f2 0020  
                                  ___fttol@f1 003B                                 __end_of_Rcmd1 1B1A  
                               __end_of_Rcmd3 200E                                __pcstackCOMRAM 0001  
               DS3231_Turn_On_Alarm@Address_E 001B                 DS3231_Turn_On_Alarm@Address_F 001C  
                                __pidataBANK0 31EC                                  __pidataBANK1 365A  
                               __end_of_font2 FE72                             __end_of_i2cLowSda 3BEC  
                           __end_of_i2cLowScl 3C1A                          ?_Do_Setup_Alarm_Time 0001  
                               __end_of_putch 3BA6                         ?_Activate_Buzzer_2KHz 0001  
                      _Do_Save_New_Alarm_Time 3A5A                                drawPixel@color 0019  
                                dec_2_bcd@bcd 0143                                  dec_2_bcd@dec 0145  
                      __size_of_Decrease_Time 0022                               ?_Init_Interrupt 0001  
                      __size_of_write_command 0010                                    ??_I2C_Init 0015  
                                  ??_I2C_Read 0011                                  _alarm_minute 005B  
                                _alarm_second 005C              ??_Update_Setup_Alarm_Time_Screen 004A  
             ?_Update_Setup_Alarm_Time_Screen 0001                  __end_of_DS3231_Turn_On_Alarm 32EE  
                                  ??_I2C_Stop 0011                          ?_Go_Next_Alarm_Field 0001  
                                     ??_Rcmd1 001D                                       ??_Rcmd3 001D  
                          __size_of_drawPixel 0030                             __end_of_OpenUSART 2FF8  
                                     ??_putch 0011                       ??_DS3231_Turn_Off_Alarm 001B  
                                  __pbssBANK0 00DA                              _setup_alarm_hour 0064  
                                   ?_Init_ADC 0001                              _setup_alarm_time 0094  
        __end_of_Initialize_Setup_Time_Screen 1C26         __size_of_Initialize_Setup_Time_Screen 010C  
                _Initialize_Setup_Time_Screen 1B1A                                 ??_DS1621_Init 0016  
                               ??_DS3231_Init 0017                                     ?_Rcmd2red 0001  
                       __end_of_Toggle_Heater 394A                            __size_of_init_UART 0014  
                             spiwrite@spidata 0012                                    _alarm_date 0059  
                                  ??_INT0_isr 0001                                    ??_INT1_isr 0001  
                                  ??_INT2_isr 0001                                    _alarm_mode 00E5  
                                  _alarm_hour 005A                                    _alarm_time 0082  
    I2C_Write_Address_Write_One_Byte@Data_Out 0014                                       ?_i2cAck 0001  
                                ?_Do_Beep_Bad 0001                            __size_of_read_volt 007C  
                          __CFG_CCP2MX$PORTBE 000000                                 _Set_RGB_Color 2F16  
                               ??_Turn_On_Fan 004A                                I2C_Read@inByte 0013  
                                     ?___ftge 0011           __size_of_Update_Setup_Heater_Screen 006A  
                  DS3231_Turn_On_Alarm@Device 001F                                       ?___wmul 0011  
                         __size_of_i2cHighSda 0008                           __size_of_i2cHighScl 000C  
                                 ?_Test_Alarm 0001                         ??_Do_Setup_Alarm_Time 004A  
                                     ?_chkisr 0001                               _heater_set_temp 006E  
                      __size_of_setAddrWindow 0056                             __end_of_bcd_2_dec 3824  
                                     _CCP1CON 000FBD              I2C_Write_Cmd_Write_Data@Data_Out 0014  
                                     _CCP2CON 000FBA                        __size_of_Do_Setup_Time 00CA  
                                ??_TIMER1_isr 0001                                 ??_I2C_ReStart 0011  
                                     _ALARMEN 00E1                                     ?___awtoft 0019  
                                   ?___ftpack 0011                                     ?___lbtoft 0019  
                                  I2C_Write@n 0012                                       ?_printf 001D  
                                     ?_strcpy 0011                                       ?_strlen 0011  
                           __end_of_dec_2_bcd 3064                             ??_Activate_Buzzer 0011  
                                  _fillScreen 39C4                                       _MATCHED 00E3  
                       __end_of_Update_Screen 064E                      ??_DS3231_Read_Alarm_Time 0014  
                                  _drawCircle 127C                         ??_Go_Next_Alarm_Field 0031  
                                   ?_delay_ms 0017                                     ?_fillRect 0023  
                                   ?_drawChar 002E                                       _SSPCON1 000FC6  
                                     _SSPSTAT 000FC7                                       _RPM_Txt 00BA  
                       __end_of_fillRectangle 2486                                     ?_drawtext 0039  
                                  ??_Init_ADC 0011                                       _Do_Init 3134  
                    _I2C_Write_Cmd_Write_Data 396A                    __end_of_I2C_Write_Cmd_Only 39FA  
                                  ??_Rcmd2red 0014                  __end_of_Do_Setup_Heater_Temp 2C92  
                      DS1621_Read_Temp@Device 0018                                 _Decrease_Time 38E6  
                                     _i2cNack 3BD8                            __end_of_TIMER1_isr 3BC2  
               ?_Initialize_Setup_Time_Screen 0001                  __size_of_Decrease_Alarm_Time 004E  
                               _write_command 3B88                                     _I2C_Start 3B34  
                                   _I2C_Write 361C                             ??_Exit_Time_Setup 004A  
                             __size_of_i2cAck 0012                                       __Hparam 0000  
                                     __Lparam 0000                                ?_Set_RGB_Color 0001  
                         __end_of_DS1621_Init 39A8                           __end_of_DS3231_Init 2862  
                           __end_of_drawPixel 37A4                         __end_of_drawFastVLine 2DA2  
                             __size_of___ftge 0096                                       ___awdiv 2A4E  
                                     ___awmod 2862                                       ___ftdiv 21E6  
                             __size_of___wmul 0028                        ??_Activate_Buzzer_2KHz 0011  
                                     ___ftmul 1D32                                       ___fttol 2100  
                                     ___lwdiv 3190                                       ___lwmod 347A  
                       __size_of_get_full_ADC 0026                               __size_of_chkisr 2BFC  
                                   ?_spiwrite 0001                                       __pcinit 2EA2  
                                  ??___awtoft 001C                                    ??___ftpack 0016  
                                  ??___lbtoft 001C                                       __ramtop 1000  
                                     _get_RPM 3510                                       __ptext0 0D28  
                                     __ptext1 2E26                                       __ptext2 3876  
                                     __ptext3 3698                                       __ptext4 3510  
                                     __ptext5 001C                     __size_of_DS1621_Read_Temp 003C  
                                     __ptext6 392A                                       __ptext7 39A8  
                                     __ptext8 174E                                       __ptext9 29B8  
                             __size_of_printf 035A                             __end_of_init_UART 3ADA  
                         __end_of_Turn_On_Fan 39C4                                     _T0CONbits 000FD5  
                             __size_of_strcpy 0032                               __size_of_strlen 003E  
                           __end_of_hexpowers FE84                      __end_of_force_nec_state0 3C0A  
                                   _T1CONbits 000FCD                                       _dpowers FE72  
                       __end_of_do_update_pwm 255C                                       _isdigit 3908  
                       _Activate_Buzzer_500Hz 3B10                              ___awmod@dividend 00FB  
                                  _duty_cycle 005E                           _Go_Prev_Alarm_Field 3A2A  
                           __end_of_read_volt 2EA2                                    ??_delay_ms 0019  
                         __end_of_I2C_ReStart 3A9E                                 drawtext@_text 003A  
                               drawtext@color 003C                              ??_Monitor_Heater 004A  
                                  ??_fillRect 0028                                    ??_drawChar 0035  
                                   _LCD_Reset 3AEC                             _DS3231_Write_Time 2916  
                               _setAddrWindow 3246                                __pintcode_body 2B74  
                                  delay_ms@ms 0017                          end_of_initialization 2F0C  
                               _Do_Setup_Time 255C                                     _INT1_flag 00EF  
                         __size_of_Test_Alarm 0166                                     _INT2_flag 00F0  
                                  ??_drawtext 0041                            ?_DS3231_Write_Time 0001  
                              ?_Decrease_Time 0001                 DS3231_Turn_On_Alarm@control_E 001D  
               DS3231_Turn_On_Alarm@control_F 001E                                ?_write_command 0001  
                               __Lmediumconst FC96                     __size_of_DS3231_Read_Time 0066  
                                     int_func 2B74                       DS3231_Read_Time@Address 0014  
                    DS3231_Write_Time@Address 0147                                    ?_I2C_Start 0001  
                                  ?_I2C_Write 0001                                    get_RPM@RPS 0143  
                    __end_of_Do_Save_New_Time 3AB2                                  _get_full_ADC 3876  
                         ??_DS3231_Write_Time 004A                          ?_Go_Prev_Alarm_Field 0001  
                     check_for_button_input@j 003A                      ?_DS3231_Write_Alarm_Time 0001  
                                  _tempSecond 0080                          _DS3231_Turn_On_Alarm 329C  
                                   _RCSTAbits 000FAB                                       printf@c 0038  
                                     printf@f 001D                                       postdec1 000FE5  
                                     postdec2 000FDD                                       postinc0 000FEE  
                                     postinc2 000FDE                                    ??_spiwrite 0011  
                     ?_check_for_button_input 0001                                       strlen@s 0011  
                 I2C_Write_Cmd_Write_Data@Cmd 0013                                     _PORTAbits 000F80  
                            drawtext@cursor_x 0049                              drawtext@cursor_y 0048  
                                   _PORTBbits 000F81                                     _PORTCbits 000F82  
                                   _PORTDbits 000F83                              I2C_Write@outByte 0011  
      __end_of_Initialize_Setup_Heater_Screen 1F1C       __size_of_Initialize_Setup_Heater_Screen 00F2  
              _Initialize_Setup_Heater_Screen 1E2A                                    _setup_date 009D  
                                 ?_fillScreen 0024                                    _setup_hour 0068  
                                  _setup_time 00A6                                    _setup_year 006C  
                                 ?_drawCircle 001C               __size_of_DS3231_Read_Alarm_Time 004C  
                                  drawChar@bg 0032                     __end_of_DS3231_Write_Time 29B8  
              DS3231_Turn_Off_Alarm@Address_E 001B                DS3231_Turn_Off_Alarm@Address_F 001C  
                                   _TRISCbits 000F94                        __size_of_Go_Next_Field 0018  
      I2C_Write_Address_Read_One_Byte@Address 0014                                  ??_i2cHighSda 0011  
                                ??_i2cHighScl 0011                             __size_of_I2C_Init 000A  
                           __size_of_I2C_Read 0048                             __size_of_I2C_Stop 0012  
                              ?_setAddrWindow 0014                                    ?_LCD_Reset 0001  
                              ?_Do_Setup_Time 0001                          _In_Heater_Temp_Setup 0055  
                            drawtext@textsize 0044                                    drawPixel@x 001B  
                                  drawPixel@y 0018                                   _DS1621_Init 398A  
                                 _DS3231_Init 27AA                                   ___ftdiv@exp 0039  
                                 printf@width 0036                                     _TXSTAbits 000FAC  
                             ??_Set_RGB_Color 0011                         ??_Go_Prev_Alarm_Field 0031  
           __size_of_Update_Setup_Time_Screen 01A8                            get_full_ADC@result 0015  
                   ?_Update_Setup_Time_Screen 0001                         ?_DS3231_Turn_On_Alarm 0001  
                           __size_of_INT0_isr 017C                             __size_of_INT1_isr 000A  
                           __size_of_INT2_isr 000A                                __end_of_i2cAck 3B58  
                                 ___ftmul@exp 0026                        __size_of_Go_Prev_Field 0018  
              ??_Initialize_Setup_Time_Screen 004A                       ?_Do_Save_New_Alarm_Time 0001  
                        __size_of_Do_Beep_Bad 0006                      DS1621_Read_Temp@Data_Ret 0017  
                                 _Turn_On_Fan 39A8                __end_of_check_for_button_input 2D1A  
                            ??_Init_Interrupt 0011            Update_Setup_Heater_Screen@dc_char1 00FB  
          Update_Setup_Heater_Screen@dc_char2 00FC            Update_Setup_Heater_Screen@dc_char3 00FD  
                          __end_of_i2cHighSda 3C22                                __end_of___ftge 2A4E  
                          __end_of_i2cHighScl 3BCE                                __end_of___wmul 3876  
                               delay_ms@count 001B                                    _write_data 3B78  
                               __pidataCOMRAM 3C2E                                __end_of_chkisr 2C04  
                    ?_TFT_GreenTab_Initialize 0001                                   _I2C_ReStart 3A88  
                                  drawtext@bg 003E                         _Exit_Setup_Alarm_Time 3B68  
                      ?_Activate_Buzzer_500Hz 0001                                     _Nec_code1 00F3  
                                   _i2cLowSda 3BE2                          _Do_Setup_Heater_Temp 2C04  
                                   _i2cLowScl 3C12                  __size_of_Increase_Alarm_Time 004E  
                              __end_of_printf 0D28                         __end_of_Increase_Time 2B74  
                              __end_of_strcpy 3774                                __end_of_strlen 361C  
                                   _Nec_state 00F4                           start_initialization 2EA2  
                      Update_Screen@neg_tempF 0141                               ??_Decrease_Time 004A  
                          get_duty_cycle@temp 0011                               ??_write_command 0013  
             __end_of_DS3231_Write_Alarm_Time 2E26                                     _OpenUSART 2F88  
              __size_of_DS3231_Turn_Off_Alarm 0052                  DS3231_Read_Alarm_Time@Device 0015  
               __end_of_DS3231_Turn_Off_Alarm 3340                              __CFG_OSC$INTIO67 000000  
                                 ??_I2C_Start 0011                             __size_of_Init_ADC 000E  
                                 ??_I2C_Write 0011                        _DS3231_Read_Alarm_Time 342E  
                                    ??_i2cAck 0011                             __size_of_Rcmd2red 003E  
                         __size_of_fillScreen 001C       I2C_Write_Address_Read_One_Byte@Data_Ret 0015  
              __end_of_Do_Save_New_Alarm_Time 3A72                           __size_of_drawCircle 01AE  
                               _Go_Next_Field 3A12                               _Activate_Buzzer 3ADA  
                                    ??___ftge 0017                                      ??___wmul 0015  
                                ??_Test_Alarm 0020                                 ?_Turn_Off_Fan 0001  
                                    ??_chkisr 0003                                   __pdataBANK0 0080  
                                 __pdataBANK1 0100                               setAddrWindow@x0 0017  
                             setAddrWindow@x1 0015                               setAddrWindow@y0 0014  
                             setAddrWindow@y1 0016                                      ??_printf 002B  
                            _DS1621_Read_Temp 36D4                         ?_Do_Setup_Heater_Temp 0001  
                                    ??_strcpy 0015                                      ??_strlen 0013  
                                  ?_i2cLowSda 0001                                    ?_i2cLowScl 0001  
                         _Decrease_Alarm_Time 33E0                                     _bcd_2_dec 37FA  
                           __size_of___awtoft 003C                             __size_of___ftpack 00C6  
                           __size_of___lbtoft 0026                                   __pbssCOMRAM 004A  
                  ??_I2C_Write_Cmd_Write_Data 0015                    __size_of_DS3231_Write_Time 00A2  
                             ??_setAddrWindow 0017                                 __pcstackBANK0 00FB  
                               __pcstackBANK1 013D                                 _Go_Prev_Field 39FA  
                             ??_Do_Setup_Time 004A                                     _dec_2_bcd 2FF8  
                             _Exit_Time_Setup 3B58                                   ??_LCD_Reset 001D  
                                _isdigit$2860 0012                             __size_of_delay_ms 0052  
                               _Heater_SW_Txt 00CC                                      ?_Do_Init 0001  
                           __size_of_fillRect 004A                             __size_of_drawChar 0156  
                          __end_of_Test_Alarm 18B4                                    ?_OpenUSART 0011  
                            _DS3231_Read_Time 30CE                           _Heater_Set_Temp_Txt 00B5  
                                    ?_i2cNack 0001                          ?_Decrease_Alarm_Time 0001  
                           __size_of_drawtext 00E2                                 ?_Do_Beep_Good 0001  
                      ??_DS3231_Turn_On_Alarm 001B   __end_of_Update_Setup_Screen_Cursor_Backward 127C  
__size_of_Update_Setup_Screen_Cursor_Backward 01B4         ??_Update_Setup_Screen_Cursor_Backward 002E  
        ?_Update_Setup_Screen_Cursor_Backward 0001           _Update_Setup_Screen_Cursor_Backward 10C8  
                 __end_of_Do_Setup_Alarm_Time 27AA                                ?_Go_Next_Field 0001  
                            ___lwdiv@dividend 0011                                   I2C_Read@ack 0011  
                                   _bit_count 00F6                                     __pintcode 0008  
             __end_of_TFT_GreenTab_Initialize 384E                                ??_Turn_Off_Fan 0039  
                               __pmediumconst FC96                                      ?___awdiv 0017  
                                   __ptext100 361C                                     __ptext101 3B22  
                                   __ptext110 3BC2                                     __ptext102 3B34  
                                   __ptext103 3558                                     __ptext112 3BB4  
                                   __ptext104 3BD8                                     __ptext113 3BEC  
                                   __ptext105 3B46                                     __ptext114 3BF6  
                                   __ptext106 3A88                                     __ptext115 15D2  
                                   __ptext107 3BE2                                     __ptext116 3C00  
                                   __ptext108 3C12                                     __ptext109 3C1A  
                                    ?___awmod 00FB                                      ?___ftdiv 002C  
                                    ?___ftmul 001D                                      ?___fttol 003B  
                     __size_of_get_duty_cycle 002A                                     __tft_type 0058  
                                    ?___lwdiv 0011                            _I2C_Write_Cmd_Only 39E0  
                                    ?___lwmod 0018                   __end_of_Go_Next_Alarm_Field 3A5A  
              DS3231_Turn_Off_Alarm@control_E 001D                DS3231_Turn_Off_Alarm@control_F 001E  
                          drawFastVLine@color 001A                                   ?_write_data 0001  
                      ?_Exit_Setup_Alarm_Time 0001                                     _drawPixel 3774  
                                    ?_get_RPM 00FE                             __size_of_spiwrite 0014  
                                  ?_bcd_2_dec 0001                        __size_of_Toggle_Heater 0020  
                         ?_I2C_Write_Cmd_Only 0013                             ?_force_nec_state0 0001  
                                    ?_isdigit 0001                                      _I2C_Init 3BCE  
                                    _I2C_Read 3558                                ?_Go_Prev_Field 0001  
                                    _I2C_Stop 3B22                             _Initialize_Screen 064E  
                              __size_of_Rcmd1 0110                                __size_of_Rcmd3 00F2  
                ??_Update_Setup_Heater_Screen 004A                                     _init_UART 3AC6  
                                  ?_dec_2_bcd 013F                            ??_force_nec_state0 0001  
                    I2C_Write_Cmd_Only@Device 0014                                     _hexpowers FE7C  
                          ?_Initialize_Screen 0001                              ___lwdiv@quotient 0015  
                              __size_of_putch 000E                                     _read_volt 2E26  
    __end_of_I2C_Write_Address_Write_One_Byte 396A     __size_of_I2C_Write_Address_Write_One_Byte 0020  
          ??_I2C_Write_Address_Write_One_Byte 0015             ?_I2C_Write_Address_Write_One_Byte 0013  
            _I2C_Write_Address_Write_One_Byte 394A                       __end_of_Activate_Buzzer 3AEC  
                       ??_Decrease_Alarm_Time 004A                                ___wmul@product 0015  
                              ??_Do_Beep_Good 0011                           ??_Initialize_Screen 004A  
                                _Select_Field 0057                                      _INT0_isr 15D2  
                                    _INT1_isr 3BF6                                      _INT2_isr 3BEC  
                        ??_I2C_Write_Cmd_Only 0014                                      _PIE1bits 000F9D  
                           ?_Do_Save_New_Time 0001                        __size_of_Update_Screen 0632  
                      DS3231_Read_Time@Device 0015                       DS3231_Write_Time@Device 0146  
                                    _PIR1bits 000F9E                                 _In_Time_Setup 00F2  
                          ??_Do_Save_New_Time 004A                                     _setup_day 0067  
                           DS1621_Init@Device 0016                                     fillRect@h 0025  
                                   fillRect@i 002C                                     fillRect@w 0024  
                                   fillRect@x 002B                                     fillRect@y 0023  
                      ??_Do_Setup_Heater_Temp 004A                                     drawChar@c 002F  
                                   drawChar@i 0038                                     drawChar@j 0037  
                                   drawChar@x 0036                                     drawChar@y 002E  
               __size_of_Activate_Buzzer_2KHz 0012                                    ?_drawPixel 0018  
                      __size_of_fillRectangle 00DC                                    _ADCON0bits 000FC2  
                     __end_of_Exit_Time_Setup 3B68                             ___wmul@multiplier 0011  
                   __end_of_Initialize_Screen 09CE                                   ??_i2cLowSda 0011  
                                 ??_i2cLowScl 0011                 DS3231_Read_Alarm_Time@Address 0014  
                                ??_fillScreen 0026              __size_of_DS3231_Write_Alarm_Time 0084  
                                ??_drawCircle 0024                                    printf@flag 0035  
                                  printf@prec 0032                                    ?_init_UART 0001  
            __end_of_Update_Setup_Time_Screen 15D2                                   _INTCON2bits 000FF1  
     __end_of_I2C_Write_Address_Read_One_Byte 3742      __size_of_I2C_Write_Address_Read_One_Byte 0032  
           ??_I2C_Write_Address_Read_One_Byte 0015              ?_I2C_Write_Address_Read_One_Byte 0014  
             _I2C_Write_Address_Read_One_Byte 3710                                   _INTCON3bits 000FF0  
                                   copy_data0 2ECE                                     copy_data1 2EEE  
                                   drawtext@i 0046                        __size_of_drawFastVLine 0088  
                                   drawtext@x 0043                                     drawtext@y 0039  
                                  ?_read_volt 00FB                                      _Nec_code 00DA  
                                    _Init_ADC 3BA6                             write_command@cmd_ 0013  
  __end_of_Initialize_Setup_Alarm_Time_Screen 1D32   __size_of_Initialize_Setup_Alarm_Time_Screen 010C  
        ??_Initialize_Setup_Alarm_Time_Screen 004A           ?_Initialize_Setup_Alarm_Time_Screen 0001  
          _Initialize_Setup_Alarm_Time_Screen 1C26                                   ??_OpenUSART 0013  
                                ?_DS1621_Init 0001                                      _Rcmd2red 35A0  
                            __size_of_Do_Init 005C                           __size_of_write_data 0010  
                                ?_DS3231_Init 0001                               ??_Go_Next_Field 0031  
                             OpenUSART@config 0013        I2C_Write_Address_Write_One_Byte@Device 0015  
                               _Toggle_Heater 392A                                  _Time_Elapsed 004E  
                         _Increase_Alarm_Time 3392                              __size_of_i2cNack 000A  
                               _RTC_ALARM_Txt 00D8                                      __Hrparam 0000  
                      __size_of_do_update_pwm 00D6                            __end_of_fillScreen 39E0  
                                    __Lrparam 0000                            __end_of_drawCircle 142A  
                                ?_Turn_On_Fan 0001                       ??_Activate_Buzzer_500Hz 0011  
                            __size_of___awdiv 0096                          Test_Alarm@alarm_case 0022  
                            __size_of___awmod 00B4                              __size_of___ftdiv 00E2  
                            __size_of___ftmul 00F8                              __size_of___fttol 00E6  
                            __size_of___lwdiv 005C                                      _Volt_Txt 00AF  
                            __size_of___lwmod 004C                                      ___awtoft 3698  
                                    ___ftpack 2626                                      ___lbtoft 389C  
                                ?_I2C_ReStart 0001                               ??_Go_Prev_Field 0031  
                            __size_of_get_RPM 0048                                   ??_bcd_2_dec 0011  
                        ?_Increase_Alarm_Time 0001                                 _Update_Screen 001C  
                            __size_of_isdigit 0022                                      _delay_ms 3340  
                             ___lwdiv@divisor 0013                                   ??_dec_2_bcd 0141  
                             ___lwdiv@counter 0017                                      __ptext10 2F16  
                                    __ptext11 3C0A                                      __ptext20 2486  
                                    __ptext12 329C                                      __ptext21 389C  
                                    __ptext13 32EE                                      __ptext30 3064  
                                    __ptext22 2100                                      __ptext14 27AA  
                                    __ptext31 1E2A                                      __ptext23 1D32  
                                    __ptext15 394A                                      __ptext40 2C92  
                                    __ptext32 2AE4                                      __ptext24 21E6  
                                    __ptext16 3710                                      __ptext41 37FA  
                                    __ptext33 3A12                                      __ptext25 2626  
                                    __ptext17 3ADA                                      __ptext50 064E  
                                    __ptext42 1C26                                      __ptext34 3B58  
                                    __ptext26 255C                                      __ptext18 37A4  
                                    __ptext51 3742                                      __ptext43 3392  
                                    __ptext35 3A9E                                      __ptext27 1B1A  
                                    __ptext19 37D0                                      __ptext60 3340  
                                    __ptext52 39C4                                      __ptext44 3A2A  
                                    __ptext36 2916                                      __ptext28 39FA  
                                    __ptext61 2DA2                                      __ptext53 23AA  
                                    __ptext45 10C8                                      __ptext37 38E6  
                                    __ptext29 2C04                                      __ptext70 200E  
                                    __ptext62 2FF8                                      __ptext54 127C  
                                    __ptext46 3A42                                      __ptext38 142A  
                                    __ptext71 22C8                                      __ptext63 30CE  
                                    __ptext55 3824                                      __ptext47 0F0E  
                                    __ptext39 26EC                                      __ptext80 3AB2  
                                    __ptext72 35DE                                      __ptext64 342E  
                                    __ptext56 1F1C                                      __ptext48 3B68  
                                    __ptext81 2862                                      __ptext73 18B4  
                                    __ptext65 3C22                                      __ptext57 35A0  
                                    __ptext49 3A5A                                      __ptext90 384E  
                                    __ptext82 2A4E                                      __ptext74 34C6  
                                    __ptext66 3AFE                                      __ptext58 1A0A  
                                    __ptext91 347A                                      __ptext83 3134  
                                    __ptext75 2D1A                                      __ptext67 3C28  
                                    __ptext59 3AEC                                      __ptext92 3190  
                                    __ptext84 3AC6                                      __ptext76 3774  
                                    __ptext68 3B10                                      __ptext93 38C2  
                                    __ptext85 2F88                                      __ptext77 3246  
                                    __ptext69 33E0                                      __ptext94 3BA6  
                                    __ptext86 3A72                                      __ptext78 3B78  
                                    __ptext95 3BCE                                      __ptext87 09CE  
                                    __ptext79 3B88                                      __ptext96 398A  
                                    __ptext88 3B98                                      __ptext97 396A  
                                    __ptext89 3908                                      __ptext98 39E0  
                                    __ptext99 36D4                                      _fillRect 34C6  
                                    _drawChar 18B4                          __end_of_Turn_Off_Fan 3A88  
            __size_of_TFT_GreenTab_Initialize 002A    __end_of_Update_Setup_Screen_Cursor_Forward 10C8  
 __size_of_Update_Setup_Screen_Cursor_Forward 01BA          ??_Update_Setup_Screen_Cursor_Forward 002E  
         ?_Update_Setup_Screen_Cursor_Forward 0001            _Update_Setup_Screen_Cursor_Forward 0F0E  
                                    _colstart 00F7                   __end_of_Go_Prev_Alarm_Field 3A42  
                                    _drawtext 22C8                                    strcpy@from 0013  
                     ?_DS3231_Read_Alarm_Time 0001                                 _fillRectangle 23AA  
              DS3231_Write_Alarm_Time@Address 0147                                ?_Toggle_Heater 0001  
                    __end_of_DS1621_Read_Temp 3710                              ?_Activate_Buzzer 0001  
                               __size_of_main 01E6                                 ??_Do_Beep_Bad 0011  
                     __size_of_Monitor_Heater 002C                         __end_of_Set_RGB_Color 2F88  
                             fillRectangle@hi 0021                               fillRectangle@lo 0022  
               Update_Screen@neg_DS1621_tempC 0143                                _get_duty_cycle 37D0  
                               _drawFastVLine 2D1A                                     printf@idx 002F  
                                    _spiwrite 3AB2                                     printf@val 0033  
                           DS3231_Init@Device 001A                                   ??_drawPixel 001B  
                                    _rowstart 00F9                      __end_of_DS3231_Read_Time 3134  
                       ??_Increase_Alarm_Time 004A                    __size_of_Initialize_Screen 0380  
                            ?_Exit_Time_Setup 0001                          __end_of_Do_Beep_Good 3C28  
                              ?_Update_Screen 0001                                    _INTCONbits 000FF2  
          __end_of_Update_Setup_Heater_Screen 30CE                    _Update_Setup_Heater_Screen 3064  
                               _do_update_pwm 2486                                OpenUSART@spbrg 0011  
                                 ??_init_UART 0014                                      isdigit@c 0013  
              __end_of_DS3231_Read_Alarm_Time 347A                                   ??_read_volt 004A  
                                   spiwrite@x 0011                                      intlevel2 0000  
                              ?_fillRectangle 0018                         __end_of_Decrease_Time 3908  
                    _Update_Setup_Time_Screen 142A                              ___lwmod@dividend 0018  
                       __end_of_write_command 3B98                               fillScreen@color 0024  
                       _DS3231_Turn_Off_Alarm 32EE                 DS3231_Write_Alarm_Time@Device 0146  
                     do_update_pwm@duty_cycle 0140                        __end_of_get_duty_cycle 37FA  
                      __size_of_Increase_Time 0090                      _Select_Heater_Temp_Field 00F5  
                              fillRectangle@h 001A                                fillRectangle@w 0019  
                              fillRectangle@x 0023                                fillRectangle@y 0018  
                     ??_Exit_Setup_Alarm_Time 004A                                ?_drawFastVLine 0018  
                                    printf@ap 0030                           __end_of_Do_Beep_Bad 3C2E  
                                ??_write_data 0013                                    _TIMER1_isr 3BB4  
                               fillRect@color 0026                       _DS3231_Write_Alarm_Time 2DA2  
                              ?_do_update_pwm 0001                               ___lwmod@divisor 001A  
                                    strcpy@cp 0015                                      strlen@cp 0015  
                                    strcpy@to 0011                         I2C_Write_Cmd_Only@Cmd 0013  
                             ___lwmod@counter 001C                                  _setup_minute 0069  
                                _setup_second 006B                       __size_of_Init_Interrupt 0024  
                       __end_of_setAddrWindow 329C                         __end_of_Do_Setup_Time 2626  
                          fillRectangle@color 001B                               ??_Toggle_Heater 004A  
                           do_update_pwm@dc_I 0141                             do_update_pwm@dc_f 013D  
                               drawChar@color 0030                                   _setup_month 006A  
                          __end_of_write_data 3B88                     __size_of_force_nec_state0 000A  
                                drawChar@line 0035                                 ?_get_full_ADC 0011  
                    ??_check_for_button_input 0039                                  drawChar@size 0034  
           __size_of_I2C_Write_Cmd_Write_Data 0020                          __size_of_DS1621_Init 001E  
                   ?_I2C_Write_Cmd_Write_Data 0013                          __size_of_DS3231_Init 00B8  
                             ?_get_duty_cycle 0011                 __size_of_DS3231_Turn_On_Alarm 0052  
      __end_of_Update_Setup_Alarm_Time_Screen 2100       __size_of_Update_Setup_Alarm_Time_Screen 00F2  
              _Update_Setup_Alarm_Time_Screen 200E  
